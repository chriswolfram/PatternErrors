Notebook[{

Cell[CellGroupData[{
Cell["ChristopherWolfram/PatternErrors", "Title",
 Deletable->False,
 TaggingRules->{},
 CellTags->{"Name", "TemplateCell", "Title"},
 CellID->1778270703,ExpressionUUID->"373faede-a0fe-4361-aa7e-a67a5647e854"],

Cell["Generate meaningful errors from pattern matching", "Text",
 Deletable->False,
 TaggingRules->{},
 CellChangeTimes->{{3.8823144169219723`*^9, 3.882314429843676*^9}},
 CellTags->{"Description", "TemplateCell"},
 CellID->1867830905,ExpressionUUID->"9d2b6e3e-a413-4eba-b0de-5f80ed56eca8"],

Cell[CellGroupData[{

Cell["Paclet Manifest", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "PacletManifest"},
 CellTags->{"Paclet Manifest", "PacletManifest", "TemplateCellGroup"},
 CellID->196832285,ExpressionUUID->"26e9601c-3176-4959-9d78-7e56875cfc80"],

Cell[BoxData[
 TemplateBox[{},
  "PacletDirectoryChooserTemplate"]], "PacletDirectoryChooser",
 TaggingRules->{"PacletDirectoryType" -> "Notebook", "Refreshing" -> False},
 CellTags->"PacletManifestPanel",
 CellID->115408480,ExpressionUUID->"8c2a4177-57a5-430e-a200-0b92cfb9c07f"],

Cell[CellGroupData[{

Cell["", "FileManagerTopSpacer",
 CellGroupingRules->{"SectionGrouping", 99},
 TaggingRules->{},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->2108660185,ExpressionUUID->"c38d2b9f-2781-4452-ac16-e55b59c428d6"],

Cell[TextData[Cell[BoxData[
 InterpretationBox[
  TagBox[
   ActionMenuBox["\<\"Documentation\"\>", {"\<\"Open/Close Group\"\>":>(
    SelectionMove[
      ParentCell[
       EvaluationCell[]], All, Cell]; FrontEndTokenExecute[
      EvaluationNotebook[], "OpenCloseGroup"]), "\<\"Open Directory\"\>":>
    DefinitionNotebookClient`FileTreeOpen[
     ParentCell[
      EvaluationCell[]]], "\<\"Un/Mark as Excluded\"\>":>
    DefinitionNotebookClient`FileTreeExclusionToggle[
     ParentCell[
      EvaluationCell[]]], "\<\"Copy Path to Clipboard\"\>":>
    DefinitionNotebookClient`FileTreeCopy[
     ParentCell[
      EvaluationCell[]]]},
    Appearance->None,
    BaseStyle->{"Text"}],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[0]]& ],
  FileNameJoin[{
    NotebookDirectory[], "Documentation"}],
  BoxID -> "FileTreePath",
  BaseStyle->{
   "Text"}]],ExpressionUUID->"2bac7018-f60b-4b6b-8773-b539fc361f56"]], \
"FileManagerDirectory",
 CellMargins->{{Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerDocumentationIconTemplate"]], Background -> 
     None], Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->398005756,ExpressionUUID->"23d3c5c8-6fad-4133-b87f-dfa28df0b3a0"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 InterpretationBox[
  TagBox[
   ActionMenuBox["\<\"Kernel\"\>", {"\<\"Open/Close Group\"\>":>(SelectionMove[
      ParentCell[
       EvaluationCell[]], All, Cell]; FrontEndTokenExecute[
      EvaluationNotebook[], "OpenCloseGroup"]), "\<\"Open Directory\"\>":>
    DefinitionNotebookClient`FileTreeOpen[
     ParentCell[
      EvaluationCell[]]], "\<\"Un/Mark as Excluded\"\>":>
    DefinitionNotebookClient`FileTreeExclusionToggle[
     ParentCell[
      EvaluationCell[]]], "\<\"Copy Path to Clipboard\"\>":>
    DefinitionNotebookClient`FileTreeCopy[
     ParentCell[
      EvaluationCell[]]]},
    Appearance->None,
    BaseStyle->{"Text"}],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[0]]& ],
  FileNameJoin[{
    NotebookDirectory[], "Kernel"}],
  BoxID -> "FileTreePath",
  BaseStyle->{
   "Text"}]],ExpressionUUID->"e3ac228d-1736-42ea-91ca-84e65d3a7a73"]], \
"FileManagerDirectory",
 CellMargins->{{Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerKernelIconTemplate"]], Background -> None], 
    Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->1728906562,ExpressionUUID->"b596b1eb-2e43-434a-a328-4f67c5842386"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   TemplateBox[{"\"PatternErrors.wl\"", 
     FileNameJoin[{
       NotebookDirectory[], "Kernel", "PatternErrors.wl"}]},
    "FileManagerFileOpenerTemplate"],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[1]]& ],
  FileNameJoin[{
    NotebookDirectory[], "Kernel", "PatternErrors.wl"}],
  BoxID -> "FileTreePath",
  BaseStyle->{"Text"}]], "FileManagerFile",
 CellMargins->{{23 + Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 110},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerWLIconTemplate"]], Background -> None], 
    Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->1224184662,ExpressionUUID->"07915794-0800-43f2-86dc-f565aabf1012"]
}, Closed]],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   TemplateBox[{"\"LICENSE\"", 
     FileNameJoin[{
       NotebookDirectory[], "LICENSE"}]},
    "FileManagerFileOpenerTemplate"],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[0]]& ],
  FileNameJoin[{
    NotebookDirectory[], "LICENSE"}],
  BoxID -> "FileTreePath",
  BaseStyle->{"Text"}]], "FileManagerFile",
 CellMargins->{{Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerUnknownIconTemplate"]], Background -> None],
     Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->2004095012,ExpressionUUID->"723c24e7-39d6-4f44-bc2d-a41818aaae3d"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 InterpretationBox[
  TagBox[
   ActionMenuBox["\<\"Notes\"\>", {"\<\"Open/Close Group\"\>":>(
    SelectionMove[
      ParentCell[
       EvaluationCell[]], All, Cell]; FrontEndTokenExecute[
      EvaluationNotebook[], "OpenCloseGroup"]), "\<\"Open Directory\"\>":>
    DefinitionNotebookClient`FileTreeOpen[
     ParentCell[
      EvaluationCell[]]], "\<\"Un/Mark as Excluded\"\>":>
    DefinitionNotebookClient`FileTreeExclusionToggle[
     ParentCell[
      EvaluationCell[]]], "\<\"Copy Path to Clipboard\"\>":>
    DefinitionNotebookClient`FileTreeCopy[
     ParentCell[
      EvaluationCell[]]]},
    Appearance->None,
    BaseStyle->{"Text"}],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[0]]& ],
  FileNameJoin[{
    NotebookDirectory[], "Notes"}],
  BoxID -> "FileTreePath",
  BaseStyle->{
   "Text"}]],ExpressionUUID->"58e0bc6a-b0c2-4e15-b44c-170527638c4d"]], \
"FileManagerDirectory",
 CellMargins->{{Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerDirectoryIconTemplate"]], Background -> 
     None], Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->727820839,ExpressionUUID->"40cd7633-dbac-465a-bbfd-4f6577441b04"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   TemplateBox[{"\"patternFailure-1.nb\"", 
     FileNameJoin[{
       NotebookDirectory[], "Notes", "patternFailure-1.nb"}]},
    "FileManagerFileOpenerTemplate"],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[1]]& ],
  FileNameJoin[{
    NotebookDirectory[], "Notes", "patternFailure-1.nb"}],
  BoxID -> "FileTreePath",
  BaseStyle->{"Text"}]], "FileManagerFile",
 CellMargins->{{23 + Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 110},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerNBIconTemplate"]], Background -> None], 
    Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->1862804528,ExpressionUUID->"f27dc63a-39f5-4c11-9380-569a7cb6a984"]
}, Closed]],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   TemplateBox[{"\"PacletInfo.wl\"", 
     FileNameJoin[{
       NotebookDirectory[], "PacletInfo.wl"}]},
    "FileManagerFileOpenerTemplate"],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[0]]& ],
  FileNameJoin[{
    NotebookDirectory[], "PacletInfo.wl"}],
  BoxID -> "FileTreePath",
  BaseStyle->{"Text"}]], "FileManagerFile",
 CellMargins->{{Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerPacletInfoIconTemplate"]], Background -> 
     None], Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->541297442,ExpressionUUID->"e96e3c51-6aba-4209-b229-61ee63fcfcc1"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   TemplateBox[{"\"ResourceDefinition.nb\"", 
     FileNameJoin[{
       NotebookDirectory[], "ResourceDefinition.nb"}]},
    "FileManagerFileOpenerTemplate"],
   Annotation[#, 
    DefinitionNotebookClient`TemplateCells`PackagePrivate`fileDepth[0]]& ],
  FileNameJoin[{
    NotebookDirectory[], "ResourceDefinition.nb"}],
  BoxID -> "FileTreePath",
  BaseStyle->{"Text"}]], "FileManagerFile",
 CellMargins->{{Inherited, Inherited}, {Inherited, Inherited}},
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellFrameLabels->{{
    Cell[
     BoxData[
      TemplateBox[{}, "FileManagerNBIconTemplate"]], Background -> None], 
    Inherited}, {Inherited, Inherited}},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->1368138549,ExpressionUUID->"90e892f2-59a2-48a4-b4fb-90a65b6485f2"],

Cell["", "FileManagerBottomSpacer",
 CellGroupingRules->{"SectionGrouping", 100},
 TaggingRules->{},
 CellTags->{"FileManagerCell", "FileManager-PacletFiles"},
 CellID->1855274727,ExpressionUUID->"91bc3c18-37e4-44ea-aaa7-fb77d268f467"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Web Content",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"WebContent", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Provide content that you want to display on the main landing page \
for your paclet.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoWebContent"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "34108d98-a7ff-494a-9d37-8cb5758ff7b8"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "WebContent"},
 CellTags->{"TemplateSection", "Web Content", "WebContent"},
 CellID->184208365,ExpressionUUID->"0d6ea034-0dd2-4ccd-b92d-0ec6f1bb6a23"],

Cell[CellGroupData[{

Cell[TextData[{
 "Headline Image",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"HeroImage", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Provide an image that you want to display on the main landing page \
for your paclet. This will be displayed along side the basic description \
that's given below. The image can be given directly (i.e. pasted from the \
clipboard) or as code that generates the desired image. \n\nIf importing the \
image from a local file, use notebook-relative paths when possible (e.g. ", 
           Cell[
            BoxData[
             StyleBox[
              RowBox[{
                TagBox[
                 ButtonBox[
                  StyleBox[
                  "Import", "SymbolsRefLink", ShowStringCharacters -> True, 
                   FontFamily -> "Source Sans Pro"], BaseStyle -> Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/Import", 
                  ContentPadding -> False], 
                 MouseAppearanceTag["LinkHand"]], "[", 
                RowBox[{
                  TagBox[
                   ButtonBox[
                    StyleBox[
                    "FileNameJoin", "SymbolsRefLink", ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"], BaseStyle -> 
                    Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/FileNameJoin", 
                    ContentPadding -> False], 
                   MouseAppearanceTag["LinkHand"]], "[", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    TagBox[
                    ButtonBox[
                    StyleBox[
                    "NotebookDirectory", "SymbolsRefLink", 
                    ShowStringCharacters -> True, FontFamily -> 
                    "Source Sans Pro"], BaseStyle -> Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/NotebookDirectory", 
                    ContentPadding -> False], 
                    MouseAppearanceTag["LinkHand"]], "[", "]"}], ",", 
                    StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}], "]"}], 
              ShowStringCharacters -> True, FontFamily -> 
              "Source Sans Pro"]]], ") rather than absolute file names."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoHeroImage"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "4390296d-55d8-43db-aae4-1120184f2197"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "HeroImage"},
 CellTags->{"Headline Image", "HeroImage", "TemplateCellGroup"},
 CellID->509724307,ExpressionUUID->"9d3d528d-3fd8-4e3c-99f1-21e991d88a2a"],

Cell[BoxData[
 TagBox[
  GraphicsBox[
   {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[1]], RectangleBox[{0, 0}], 
    InsetBox[
     StyleBox[
      TagBox["\<\"Image Placeholder\"\>",
       Annotation[#, "PlaceholderImage"]& ],
      StripOnInput->False,
      FontFamily->"Source Sans Pro",
      FontSize->16], {0.5, 0.6}], InsetBox[
     StyleBox["\<\"Replace this with an image\\nthat you would like to \
display\\non the landing page for your paclet.\"\>",
      StripOnInput->False,
      TextAlignment->Center,
      FontFamily->"Source Sans Pro",
      FontSize->10,
      FontColor->GrayLevel[0.5]], {0.5, 0.4}]},
   ImageSize->250],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Input",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->445097320,ExpressionUUID->"92f5383a-7ba6-4e10-88de-381c1939b395"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Description",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"LongDescription", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a short paragraph explaining your paclet. This is the first \
text that users will see when visiting the main landing page of your paclet.",
          "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoLongDescription"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "1381021e-df98-4a52-95cd-2d215f49d787"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "LongDescription"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Basic Description", "LongDescription", "TemplateCellGroup"},
 CellID->433339604,ExpressionUUID->"6079cbbd-9065-4e8b-890d-266cb1538da9"],

Cell["A paragraph that describes your paclet in more detail.", "Text",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->441612482,ExpressionUUID->"57d7a87f-8e65-48c8-b1c0-f4674c2f705d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Details",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Details", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Details may include a long description of the resource's contents, \
history, methodology or other relevant information. Give references here if \
they are directly relevant to the resource. The details will appear above the \
examples on the webpage for the resource.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoDetails"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "41a7aa04-6782-4862-a06c-10eb88afd05f"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Details"},
 DefaultNewCellStyle->"Notes",
 CellTags->{"Details", "TemplateCellGroup"},
 CellID->484110581,ExpressionUUID->"c8da267d-6157-40b8-900d-faa3f8a73d02"],

Cell["Additional information about the paclet.", "Notes",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->889292814,ExpressionUUID->"136ef685-aa52-498a-9d57-5f26b20a7f80"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Main Guide Page",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"MainGuidePage", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Choose one of your documentation guide pages to feature as part of \
the main landing page for your paclet. This guide page should correspond to a \
general overview of your paclet.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoMainGuidePage"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "bd4c6346-6569-4081-a806-70565d1d0d96"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "MainGuidePage"},
 CellTags->{"Main Guide Page", "MainGuidePage", "TemplateCellGroup"},
 CellID->587602718,ExpressionUUID->"e2187505-16bd-46d8-b3a9-f46f7df3bb35"],

Cell[BoxData[
 TemplateBox[{},
  "MainGuideChooserTemplate"]], "MainGuideChooser",
 TaggingRules->{"Refreshing" -> False, "Relative" -> True},
 CellTags->"MainGuidePagePanel",
 CellID->614786987,ExpressionUUID->"2a7e4345-f878-4d82-96e4-f3f2e70a0032"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"ExampleNotebook", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Provide examples showing how to install, configure, and load your \
Paclet along with some basic usage. This section will be displayed on the \
main landing page for your Paclet when deployed to the cloud or published in \
the Wolfram Language Paclet Repository.\n\nThe usage examples should provide \
a succinct overview of what types of features users can expect from your \
paclet. Detailed examples should be reserved for the corresponding function, \
guide, or tutorial pages.\n\nThe default content appearing here shows the \
recommended structure for this section, but any of it can be removed or \
changed as desired. Use additional cells and cell styles as needed.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoExampleNotebook"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "906b5dde-4fa1-40fd-80f0-7c64aa36067a"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "ExampleNotebook"},
 CellTags->{"ExampleNotebook", "Examples", "TemplateCellGroup"},
 CellID->365974185,ExpressionUUID->"ddeb91a1-3208-43be-882e-bc1d815d4cb2"],

Cell[CellGroupData[{

Cell[TextData[{
 "Initialization for Examples",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"ExampleInitialization", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Put any initialization code that's needed for evaluating examples \
here.\n\nCells marked as excluded will not appear anywhere in the published \
paclet except for the definition notebook.\n\nCells can be toggled as \
excluded using ", 
           Cell[
            BoxData[
             StyleBox[
              RowBox[{"Tools", 
                RowBox[{" ", "\[FilledRightTriangle]", " "}], "Cells", 
                RowBox[{" ", "\[FilledRightTriangle]", " "}], 
                RowBox[{
                  RowBox[{"Mark", "/", "unmark"}], " ", "selected", " ", 
                  "cells", " ", "as", " ", "excluded"}]}], StripOnInput -> 
              False, ShowStringCharacters -> False, FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> "SemiBold", 
              FontColor -> GrayLevel[0.28627]]]], 
           " from the toolbar above."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoExampleInitialization"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "84c03cf2-9039-49b0-985a-c49f43df1dd3"]
}], "Subsection", "Excluded",
 Editable->False,
 Deletable->True,
 TaggingRules->{"TemplateGroupName" -> "ExampleInitialization"},
 CellTags->{
  "ExampleInitialization", "Initialization for Examples", "TemplateCellGroup"},
 CellLabel->"In[1]:=",
 CellID->468286435,ExpressionUUID->"9c5c4e69-5c69-444e-bb4c-691ce3fd977b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input", "Excluded",
 TaggingRules->{},
 InitializationCell->True,
 CellLabel->"In[1]:=",
 CellID->996717066,ExpressionUUID->"624f8bfa-b736-45cb-83ee-22f0841c45a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Needs", "[", "\"\<ChristopherWolfram`PatternErrors`\>\"", "]"}], 
  ";"}]], "Input", "Excluded",
 TaggingRules->{},
 InitializationCell->True,
 CellLabel->"In[2]:=",
 CellID->172764492,ExpressionUUID->"84994644-363c-47f8-9659-7b00412b8059"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic Examples", "Subsection",
 TaggingRules->{},
 CellID->462042388,ExpressionUUID->"3f6c7115-d88c-476f-ac24-9f4687e666c1"],

Cell["Show a few simple examples of common uses of the paclet:", "Text",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->319073343,ExpressionUUID->"5da20e7b-d5f8-47cc-89d9-af73bd156dc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchInformation", "[", 
   RowBox[{"2", ",", 
    RowBox[{"_Integer", "|", "_Real"}]}], "]"}], "[", "\"\<Failure\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8830726592114773`*^9, 3.883072675612159*^9}, {
  3.883734454164638*^9, 3.883734462107005*^9}},
 CellLabel->"In[13]:=",
 CellID->1520210400,ExpressionUUID->"c3cbe136-b018-4a35-bccb-28e30264cfd8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Success",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"_Integer", "|", "_Real"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["2", HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"_Integer", "|", "_Real"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["2", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4200", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Alternatives", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "HeldBranchPatterns" -> {
                    Hold[
                    Blank[Integer]], 
                    Hold[
                    Blank[Real]]}, "BranchIndex" -> 1|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Alternatives[
                    Blank[Integer], 
                    Blank[Real]]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], SelectWithContents -> True, 
                   Selectable -> False], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"Match\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Success["Match", <|"Pattern" -> HoldForm[
      Alternatives[
       Blank[Integer], 
       Blank[Real]]], "Expression" -> HoldForm[2], "Bindings" -> <||>, 
    "MatchBranch" -> IconizedObject[
      ChristopherWolfram`PatternErrors`MatchBranchObject[<|
       "Type" -> "Alternatives", 
        "Arguments" -> <|
         "Submatch" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[2], "HeldPattern" -> Hold[
               Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
             "BaseMatchedQ" -> True|>], "HeldBranchPatterns" -> {
            Hold[
             Blank[Integer]], 
            Hold[
             Blank[Real]]}, "BranchIndex" -> 1|>, "HeldExpression" -> Hold[2],
         "HeldPattern" -> Hold[
          Alternatives[
           Blank[Integer], 
           Blank[Real]]], "Bindings" -> <||>, "MatchedQ" -> True, 
        "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.883072663442363*^9, 3.883072675910748*^9}, 
   3.883072953379512*^9, {3.8830731043227577`*^9, 3.883073107828887*^9}, 
   3.8830732541404943`*^9, 3.8830733274850893`*^9, 3.883074303851577*^9, 
   3.88307456625871*^9, 3.883074701177734*^9, 3.8830748846840878`*^9, 
   3.883675021231595*^9, 3.8836772605773993`*^9, 3.883701867233865*^9, 
   3.883702346143993*^9, 3.8837030710143642`*^9, {3.8837344561313877`*^9, 
   3.883734462354529*^9}},
 CellLabel->"Out[13]=",
 CellID->790212960,ExpressionUUID->"b6708b1f-3acd-4758-b929-3be39d9fb16a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchInformation", "[", 
   RowBox[{
    RowBox[{"f", "[", "2", "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"_Integer", "|", "_Real"}], "]"}]}], "]"}], "[", 
  "\"\<Failure\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.883072564767952*^9, 3.883072581776504*^9}, 
   3.883734465650979*^9},
 CellLabel->"In[14]:=",
 CellID->454802333,ExpressionUUID->"109a2285-4120-4f48-88f0-070e0283b378"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Success",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"f", "[", 
                    RowBox[{"_Integer", "|", "_Real"}], "]"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"f", "[", "2", "]"}], HoldForm], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"f", "[", 
                    RowBox[{"_Integer", "|", "_Real"}], "]"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"f", "[", "2", "]"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["8688", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Alternatives", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "HeldBranchPatterns" -> {
                    Hold[
                    Blank[Integer]], 
                    Hold[
                    Blank[Real]]}, "BranchIndex" -> 1|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Alternatives[
                    Blank[Integer], 
                    Blank[Real]]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
                    "HeldExpression" -> Hold[
                    $CellContext`f[2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Alternatives[
                    Blank[Integer], 
                    Blank[Real]]]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], SelectWithContents -> True, 
                   Selectable -> False], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"Match\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Success["Match", <|"Pattern" -> HoldForm[
      $CellContext`f[
       Alternatives[
        Blank[Integer], 
        Blank[Real]]]], "Expression" -> HoldForm[
      $CellContext`f[2]], "Bindings" -> <||>, "MatchBranch" -> 
    IconizedObject[
      ChristopherWolfram`PatternErrors`MatchBranchObject[<|
       "Type" -> "Normal", 
        "Arguments" -> <|
         "HeadSubmatch" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], "ArgumentSubmatches" -> {
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Alternatives", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "HeldBranchPatterns" -> {
                  Hold[
                   Blank[Integer]], 
                  Hold[
                   Blank[Real]]}, "BranchIndex" -> 1|>, "HeldExpression" -> 
              Hold[2], "HeldPattern" -> Hold[
                Alternatives[
                 Blank[Integer], 
                 Blank[Real]]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
        "HeldExpression" -> Hold[
          $CellContext`f[2]], "HeldPattern" -> Hold[
          $CellContext`f[
           Alternatives[
            Blank[Integer], 
            Blank[Real]]]], "Bindings" -> <||>, "MatchedQ" -> True, 
        "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.883072567996463*^9, 3.8830725821467667`*^9}, 
   3.883072955810244*^9, {3.883073109520059*^9, 3.88307311057557*^9}, 
   3.883073255471807*^9, 3.883073328865241*^9, 3.8830747057644978`*^9, 
   3.8830748856916533`*^9, 3.883702349281474*^9, 3.883703072588862*^9, 
   3.883734465932967*^9},
 CellLabel->"Out[14]=",
 CellID->220027184,ExpressionUUID->"ee4e5063-efd2-446f-b2f5-84860f73384a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", 
     RowBox[{"g", "[", 
      RowBox[{"6", ",", "3"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", 
     RowBox[{"f", "[", 
      RowBox[{"___", ",", "3"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.883735067456813*^9, 3.883735116146592*^9}},
 CellLabel->"In[27]:=",
 CellID->1151791968,ExpressionUUID->"caa6ef36-0ead-4ba7-927b-84158e7f8f12"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{"\"MatchInformationObject[\"", 
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = 1}, 
      InterpretationBox[
       TagBox[
        PanelBox[
         GridBox[{{
            ItemBox[
             PopupMenuBox[
              Dynamic[Typeset`var$$], {1 -> TemplateBox[{
                  StyleBox[
                   TagBox["List", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["1", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["2", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                 "RowDefault"]}, DefaultMenuStyle -> "MenuViewLabel", Enabled -> 
              Automatic, MenuStyle -> {}], Alignment -> Left, StripOnInput -> 
             False]}, {
            ItemBox[
             StyleBox[
              PaneSelectorBox[{1 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\\\"___\\\", \\\",\\\", \
\\\"3\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"third\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\", \\\",\\\", RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"___\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[RowBox[{\\\"g\\\", \
\\\"[\\\", RowBox[{\\\"6\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["1", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["2", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\\\"___\\\", \\\",\\\", \
\\\"3\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"third\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\", \\\",\\\", RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"___\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[RowBox[{\\\"g\\\", \
\\\"[\\\", RowBox[{\\\"6\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["1", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["2", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["1", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["2", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected head matching \
\\!\\(\\*TagBox[\\\"\\\\\\\"HeldPattern\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\), but found \\!\\(\\*TagBox[\\\"\\\\\\\"HeldExpression\\\\\\\"\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected head matching \
\\!\\(\\*TagBox[\\\"\\\\\\\"HeldPattern\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\), but found \\!\\(\\*TagBox[\\\"\\\\\\\"HeldExpression\\\\\\\"\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"f\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"g\\\", Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["___", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> RGBColor[0.2, 
                    0.5, 1], BackFaceColor -> RGBColor[0.2, 0.5, 1], 
                    GraphicsColor -> RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["3", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> RGBColor[0.2, 
                    0.5, 1], BackFaceColor -> RGBColor[0.2, 0.5, 1], 
                    GraphicsColor -> RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected head matching \
\!\(\*TagBox[\"\\\"HeldPattern\\\"\", Function[Short[Slot[1], 5]]]\), but \
found \!\(\*TagBox[\"\\\"HeldExpression\\\"\", Function[Short[Slot[1], 5]]]\) \
instead.", 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankNullSequence[]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[3], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`g[6, 3]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`g[6, 3]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected an expression matching \!\(\*TagBox[RowBox[{\"f\
\", \"[\", RowBox[{\"___\", \",\", \"3\"}], \"]\"}], Function[Short[Slot[1], \
5]]]\) in the \!\(\*TagBox[\"\\\"third\\\"\", Function[Short[Slot[1], 5]]]\) \
argument of \!\(\*TagBox[RowBox[{\"{\", RowBox[{\"1\", \",\", \"2\", \",\", \
RowBox[{\"f\", \"[\", RowBox[{\"___\", \",\", \"3\"}], \"]\"}]}], \"}\"}], \
Function[Short[Slot[1], 5]]]\), but found \!\(\*TagBox[RowBox[{\"g\", \"[\", \
RowBox[{\"6\", \",\", \"3\"}], \"]\"}], Function[Short[Slot[1], 5]]]\) \
instead.", 
                    Row[{
                    Style[
                    HoldForm[List], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[1], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[2], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankNullSequence[]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[3], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`g[6, 3]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`g[6, 3]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 
                    $CellContext`g[6, 3]}], "HeldPattern" -> Hold[{1, 2, 
                    $CellContext`f[
                    BlankNullSequence[], 3]}], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]]}, 
               Dynamic[Typeset`var$$], Alignment -> {Left, Top}, ImageSize -> 
               All, TransitionDirection -> Horizontal, TransitionDuration -> 
               0.5, TransitionEffect -> Automatic], Deployed -> False, 
              StripOnInput -> False], Background -> GrayLevel[1], Frame -> 
             True, FrameStyle -> GrayLevel[0.8235294117647058], StripOnInput -> 
             False]}}, AutoDelete -> False, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
         BaseStyle -> {}, BaselinePosition -> Automatic, DefaultBaseStyle -> 
         "MenuView", FrameMargins -> 6, ImageMargins -> Automatic], Deploy, 
        DefaultBaseStyle -> "Deploy"], 
       MenuView[{Row[{
            Style[
             HoldForm[List], 
             RGBColor[0.2, 0.5, 1]], 
            Style["[", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[1], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[2], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Row[{
              Style[
               HoldForm[$CellContext`f], 
               RGBColor[1, 0.2, 0.15]], 
              Style["[", 
               RGBColor[0.2, 0.5, 1]], 
              Style[
               HoldForm[
                BlankNullSequence[]], 
               RGBColor[0.2, 0.5, 1]], 
              Style[", ", 
               RGBColor[0.2, 0.5, 1]], 
              Style[
               HoldForm[3], 
               RGBColor[0.2, 0.5, 1]], 
              Style["]", 
               RGBColor[0.2, 0.5, 1]]}], 
            Style["]", 
             RGBColor[0.2, 0.5, 1]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Normal", 
                  "Arguments" -> <|
                   "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`g], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`g[6, 3]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                  False, "BaseMatchedQ" -> True|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[{1, 2, 
               $CellContext`g[6, 3]}], "HeldPattern" -> Hold[{1, 2, 
               $CellContext`f[
                BlankNullSequence[], 3]}], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>]}]], DynamicModuleValues :> {}], 
     Setting[#, {0}]& ], "\"]\""},
   "RowDefault"],
  ChristopherWolfram`PatternErrors`MatchInformationObject[{
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>, 
           "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, "MatchedQ" -> 
            True, "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, "MatchedQ" -> 
            True, "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[$CellContext`g], "HeldPattern" -> Hold[$CellContext`f], 
                 "Bindings" -> <||>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                 False|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[6], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[3], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
              $CellContext`g[6, 3]], "HeldPattern" -> Hold[
              $CellContext`f[
               BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[{1, 2, 
         $CellContext`g[6, 3]}], "HeldPattern" -> Hold[{1, 2, 
         $CellContext`f[
          BlankNullSequence[], 3]}], "Bindings" -> <||>, "MatchedQ" -> False, 
      "BaseMatchedQ" -> True|>]}]]], "Output",
 CellChangeTimes->{{3.883735089903242*^9, 3.8837351167639437`*^9}},
 CellLabel->"Out[27]=",
 CellID->1883193030,ExpressionUUID->"d4797623-c236-42db-8f9e-c510e773440c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", 
     RowBox[{"f", "[", 
      RowBox[{"6", ",", "5", ",", "4"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", 
     RowBox[{"f", "[", 
      RowBox[{"___", ",", "3"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.883735133495009*^9, 3.8837351528519497`*^9}},
 CellLabel->"In[31]:=",
 CellID->432608712,ExpressionUUID->"e3036f0a-1fd3-43f5-a41a-9968645f662d"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{"\"MatchInformationObject[\"", 
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = 1}, 
      InterpretationBox[
       TagBox[
        PanelBox[
         GridBox[{{
            ItemBox[
             PopupMenuBox[
              Dynamic[Typeset`var$$], {1 -> TemplateBox[{
                  StyleBox[
                   TagBox["List", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["1", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["2", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                 "RowDefault"]}, DefaultMenuStyle -> "MenuViewLabel", Enabled -> 
              Automatic, MenuStyle -> {}], Alignment -> Left, StripOnInput -> 
             False]}, {
            ItemBox[
             StyleBox[
              PaneSelectorBox[{1 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\\\"___\\\", \\\",\\\", \
\\\"3\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"third\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\", \\\",\\\", RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"___\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \
\\\"[\\\", RowBox[{\\\"6\\\", \\\",\\\", \\\"5\\\", \\\",\\\", \\\"4\\\"}], \
\\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["1", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["2", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\\\"___\\\", \\\",\\\", \
\\\"3\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"third\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\", \\\",\\\", RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"___\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \
\\\"[\\\", RowBox[{\\\"6\\\", \\\",\\\", \\\"5\\\", \\\",\\\", \\\"4\\\"}], \
\\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["1", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["2", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["1", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["2", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"3\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"___\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"4\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"3\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"___\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"4\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["___", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["3", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["___", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[0.2, 0.5, 1], FrontFaceColor -> RGBColor[0.2, 
                    0.5, 1], BackFaceColor -> RGBColor[0.2, 0.5, 1], 
                    GraphicsColor -> RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"3\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"4\\\", Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["3", HoldForm], StripOnInput -> False, LineColor -> 
                    RGBColor[1, 0.2, 0.15], FrontFaceColor -> RGBColor[1, 
                    0.2, 0.15], BackFaceColor -> RGBColor[1, 0.2, 0.15], 
                    GraphicsColor -> RGBColor[1, 0.2, 0.15], FontColor -> 
                    RGBColor[1, 0.2, 0.15]]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}]}, 
                    False]], DynamicModuleValues :> Automatic], Setting[#, {
                    0}]& ]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected an expression matching \!\(\*TagBox[\"3\", \
Function[Short[Slot[1], 5]]]\) in the \!\(\*TagBox[\"\\\"second\\\"\", \
Function[Short[Slot[1], 5]]]\) argument of \!\(\*TagBox[RowBox[{\"f\", \"[\", \
RowBox[{\"___\", \",\", \"3\"}], \"]\"}], Function[Short[Slot[1], 5]]]\), but \
found \!\(\*TagBox[\"4\", Function[Short[Slot[1], 5]]]\) instead.", 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankNullSequence[]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[3], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}]}]}]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[6, 5, 4]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[6, 5, 4]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected an expression matching \!\(\*TagBox[RowBox[{\"f\
\", \"[\", RowBox[{\"___\", \",\", \"3\"}], \"]\"}], Function[Short[Slot[1], \
5]]]\) in the \!\(\*TagBox[\"\\\"third\\\"\", Function[Short[Slot[1], 5]]]\) \
argument of \!\(\*TagBox[RowBox[{\"{\", RowBox[{\"1\", \",\", \"2\", \",\", \
RowBox[{\"f\", \"[\", RowBox[{\"___\", \",\", \"3\"}], \"]\"}]}], \"}\"}], \
Function[Short[Slot[1], 5]]]\), but found \!\(\*TagBox[RowBox[{\"f\", \"[\", \
RowBox[{\"6\", \",\", \"5\", \",\", \"4\"}], \"]\"}], Function[Short[Slot[1], \
5]]]\) instead.", 
                    Row[{
                    Style[
                    HoldForm[List], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[1], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[2], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankNullSequence[]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[3], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[6, 5, 4]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[6, 5, 4]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 
                    $CellContext`f[6, 5, 4]}], "HeldPattern" -> Hold[{1, 2, 
                    $CellContext`f[
                    BlankNullSequence[], 3]}], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]]}, 
               Dynamic[Typeset`var$$], Alignment -> {Left, Top}, ImageSize -> 
               All, TransitionDirection -> Horizontal, TransitionDuration -> 
               0.5, TransitionEffect -> Automatic], Deployed -> False, 
              StripOnInput -> False], Background -> GrayLevel[1], Frame -> 
             True, FrameStyle -> GrayLevel[0.8235294117647058], StripOnInput -> 
             False]}}, AutoDelete -> False, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
         BaseStyle -> {}, BaselinePosition -> Automatic, DefaultBaseStyle -> 
         "MenuView", FrameMargins -> 6, ImageMargins -> Automatic], Deploy, 
        DefaultBaseStyle -> "Deploy"], 
       MenuView[{Row[{
            Style[
             HoldForm[List], 
             RGBColor[0.2, 0.5, 1]], 
            Style["[", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[1], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[2], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Row[{
              Style[
               HoldForm[$CellContext`f], 
               RGBColor[0.2, 0.5, 1]], 
              Style["[", 
               RGBColor[0.2, 0.5, 1]], 
              Style[
               HoldForm[
                BlankNullSequence[]], 
               RGBColor[0.2, 0.5, 1]], 
              Style[", ", 
               RGBColor[0.2, 0.5, 1]], 
              Style[
               HoldForm[3], 
               RGBColor[1, 0.2, 0.15]], 
              Style["]", 
               RGBColor[0.2, 0.5, 1]]}], 
            Style["]", 
             RGBColor[0.2, 0.5, 1]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, 
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, 
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Normal", 
                  "Arguments" -> <|
                   "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[6, 5, 4]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
                  False, "BaseMatchedQ" -> True|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[{1, 2, 
               $CellContext`f[6, 5, 4]}], "HeldPattern" -> Hold[{1, 2, 
               $CellContext`f[
                BlankNullSequence[], 3]}], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>]}]], DynamicModuleValues :> {}], 
     Setting[#, {0}]& ], "\"]\""},
   "RowDefault"],
  ChristopherWolfram`PatternErrors`MatchInformationObject[{
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>, 
           "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[1], "HeldPattern" -> Hold[1], "Bindings" -> <||>, "MatchedQ" -> 
            True, "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[2], "HeldPattern" -> Hold[2], "Bindings" -> <||>, "MatchedQ" -> 
            True, "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[6, 5], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[4], "HeldPattern" -> Hold[3], "Bindings" -> <||>, 
                  "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
              $CellContext`f[6, 5, 4]], "HeldPattern" -> Hold[
              $CellContext`f[
               BlankNullSequence[], 3]], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[{1, 2, 
         $CellContext`f[6, 5, 4]}], "HeldPattern" -> Hold[{1, 2, 
         $CellContext`f[
          BlankNullSequence[], 3]}], "Bindings" -> <||>, "MatchedQ" -> False, 
      "BaseMatchedQ" -> True|>]}]]], "Output",
 CellChangeTimes->{{3.88373513393223*^9, 3.883735154099769*^9}},
 CellLabel->"Out[31]=",
 CellID->171726934,ExpressionUUID->"4a16cbff-49aa-40b9-89af-298ffaabd3ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchInformation", "[", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"3", ",", "5", ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"x_", ",", "_", ",", 
      RowBox[{"{", 
       RowBox[{"x_", ",", "_"}], "}"}]}], "]"}]}], "]"}], "[", 
  "\"\<Branches\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.883735361163517*^9, 3.883735378020049*^9}},
 CellLabel->"In[35]:=",
 CellID->693284297,ExpressionUUID->"3bd9af06-ba64-459c-b6df-32bb9f9730c1"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   PanelBox[
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = False}, 
      InterpretationBox[
       StyleBox[
        PaneSelectorBox[{False->GridBox[{
           {
            OpenerBox[Dynamic[Typeset`var$$],
             Appearance->Automatic,
             AutoAction->False,
             ContinuousAction->False,
             Enabled->Automatic], 
            TagBox[GridBox[{
               {"\<\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"3\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"5\\\", \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"\>"},
               {
                TemplateBox[{
                  StyleBox[
                   TagBox["f", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\", \"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  StyleBox[
                   TagBox["_", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
                 "RowDefault"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Column"]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
         GridBox[{
           {
            OpenerBox[Dynamic[Typeset`var$$],
             Appearance->Automatic,
             AutoAction->False,
             ContinuousAction->False,
             Enabled->Automatic], 
            TagBox[GridBox[{
               {"\<\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"3\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"5\\\", \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"\>"},
               {
                TemplateBox[{
                  StyleBox[
                   TagBox["f", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\", \"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  StyleBox[
                   TagBox["_", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
                 "RowDefault"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Column"]},
           {"", 
            PaneBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{"\"Binding conflicts: \"", 
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", "3", "]"}], ",", 
                    RowBox[{"Hold", "[", "5", "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}]},
                  "RowDefault"]},
                {
                 TemplateBox[{"\"Head submatch: \"", 
                   InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]},
                  "RowDefault"]},
                {
                 TagBox[
                  DynamicModuleBox[{Typeset`var$$ = False}, 
                   InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], "\<\"Argument submatches\"\>"}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                    GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], "\<\"Argument submatches\"\>"},
                    {"", 
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
                    "RowDefault"]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
                    "RowDefault"]},
                    {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]]},
                    "RowDefault"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, Dynamic[Typeset`var$$],
                    Alignment->Automatic,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[":", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    Blank[]], 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}]}, False]],
                    DynamicModuleValues:>Automatic],
                    Setting[#, {0}]& ]],
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]},
                    {
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["_",
                    HoldForm],
                    StripOnInput->False,
                    LineColor->RGBColor[0.2, 0.5, 1],
                    FrontFaceColor->RGBColor[0.2, 0.5, 1],
                    BackFaceColor->RGBColor[0.2, 0.5, 1],
                    GraphicsColor->RGBColor[0.2, 0.5, 1],
                    FontColor->RGBColor[0.2, 0.5, 1]]],
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]]},
                    {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
                    "RowDefault"]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
                    "RowDefault"]},
                    {"", 
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]},
                    "RowDefault"]},
                    {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["List", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]},
                    "RowDefault"]},
                    {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], "\<\"Argument submatches\"\>"}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], "\<\"Argument submatches\"\>"},
                    {"", 
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
                    "RowDefault"]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{
                    Automatic}}},
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                    GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
                    "RowDefault"]},
                    {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["_", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]]},
                    "RowDefault"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{
                    Automatic}}},
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                    Typeset`var$$],
                    Alignment->Automatic,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[":", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    Blank[]], 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}]}, False]],
                    DynamicModuleValues:>Automatic],
                    Setting[#, {0}]& ]],
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]},
                    {
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["_",
                    HoldForm],
                    StripOnInput->False,
                    LineColor->RGBColor[0.2, 0.5, 1],
                    FrontFaceColor->RGBColor[0.2, 0.5, 1],
                    BackFaceColor->RGBColor[0.2, 0.5, 1],
                    GraphicsColor->RGBColor[0.2, 0.5, 1],
                    FontColor->RGBColor[0.2, 0.5, 1]]],
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}],
                    "Column"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, Dynamic[Typeset`var$$],
                    Alignment->Automatic,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}]}, False]],
                    DynamicModuleValues:>Automatic],
                    Setting[#, {0}]& ]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}],
                    "Column"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, Dynamic[Typeset`var$$],
                    Alignment->Automatic,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{
                    Row[{
                    Style[
                    HoldForm[List], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[":", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    Blank[]], 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    Blank[]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}]}]}]}, False]],
                    DynamicModuleValues:>Automatic],
                    Setting[#, {0}]& ]],
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
                    "HeldExpression" -> Hold[{5, 6}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    Blank[]], 
                    Blank[]}], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Column"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                    Typeset`var$$],
                    Alignment->Automatic,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
                    "HeldExpression" -> Hold[{5, 6}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    Blank[]], 
                    Blank[]}], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                   
                   DynamicModuleValues:>Automatic],
                  Setting[#, {0}]& ]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             ImageMargins->0]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
         Dynamic[Typeset`var$$],
         Alignment->Automatic,
         BaseStyle->{},
         BaselinePosition->Baseline,
         DefaultBaseStyle->"OpenerView",
         ImageMargins->0,
         ImageSize->Automatic],
        Deployed->False,
        StripOnInput->False],
       OpenerView[{
         Column[{
          "Encountered incompatible bindings for the pattern variable \
\!\(\*TagBox[\"x\", Function[Short[Slot[1], 5]]]\), including: \
\!\(\*TagBox[RowBox[{\"{\", RowBox[{RowBox[{\"Hold\", \"[\", \"3\", \"]\"}], \
\",\", RowBox[{\"Hold\", \"[\", \"5\", \"]\"}]}], \"}\"}], \
Function[Short[Slot[1], 5]]]\)", 
           Row[{
             Style[
              HoldForm[$CellContext`f], 
              RGBColor[0.2, 0.5, 1]], 
             Style["[", 
              RGBColor[1, 0.2, 0.15]], 
             Row[{
               Style[$CellContext`x, 
                RGBColor[0.2, 0.5, 1]], 
               Style[":", 
                RGBColor[0.2, 0.5, 1]], 
               Style[
                HoldForm[
                 Blank[]], 
                RGBColor[0.2, 0.5, 1]]}], 
             Style[", ", 
              RGBColor[1, 0.2, 0.15]], 
             Style[
              HoldForm[
               Blank[]], 
              RGBColor[0.2, 0.5, 1]], 
             Style[", ", 
              RGBColor[1, 0.2, 0.15]], 
             Row[{
               Style[
                HoldForm[List], 
                RGBColor[0.2, 0.5, 1]], 
               Style["[", 
                RGBColor[0.2, 0.5, 1]], 
               Row[{
                 Style[$CellContext`x, 
                  RGBColor[0.2, 0.5, 1]], 
                 Style[":", 
                  RGBColor[0.2, 0.5, 1]], 
                 Style[
                  HoldForm[
                   Blank[]], 
                  RGBColor[0.2, 0.5, 1]]}], 
               Style[", ", 
                RGBColor[0.2, 0.5, 1]], 
               Style[
                HoldForm[
                 Blank[]], 
                RGBColor[0.2, 0.5, 1]], 
               Style["]", 
                RGBColor[0.2, 0.5, 1]]}], 
             Style["]", 
              RGBColor[1, 0.2, 0.15]]}]}], 
         Column[{
           Row[{"Binding conflicts: ", <|$CellContext`x -> {
                Hold[3], 
                Hold[5]}|>}], 
           Row[{"Head submatch: ", 
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>]}], 
           OpenerView[{"Argument submatches", 
             Column[{
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[3], "HeldPattern" -> Hold[
                   Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[3]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[5], "HeldPattern" -> Hold[
                   Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                 "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[6], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
                 "HeldExpression" -> Hold[{5, 6}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    Blank[]], 
                    Blank[]}], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, False]],
      DynamicModuleValues:>{}],
     Setting[#, {0}]& ]],
   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
    "Type" -> "Normal", 
     "Arguments" -> <|
      "HeadSubmatch" -> 
       ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
          Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
          "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
       "ArgumentSubmatches" -> {
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Pattern", 
           "Arguments" -> <|
            "Submatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[3], "HeldPattern" -> Hold[
                  Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
             "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
           Hold[3], "HeldPattern" -> Hold[
             Pattern[$CellContext`x, 
              Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[3]|>, 
           "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[5], "HeldPattern" -> Hold[
             Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
           True|>], 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>, 
                "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
             "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[5], "HeldPattern" -> Hold[
                   Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[6], "HeldPattern" -> Hold[
                   Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                 "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
           "HeldExpression" -> Hold[{5, 6}], "HeldPattern" -> Hold[{
              Pattern[$CellContext`x, 
               Blank[]], 
              Blank[]}], "Bindings" -> <|$CellContext`x -> Hold[5]|>, 
           "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
       "BindingConflicts" -> <|$CellContext`x -> {
           Hold[3], 
           Hold[5]}|>|>, "HeldExpression" -> Hold[
       $CellContext`f[3, 5, {5, 6}]], "HeldPattern" -> Hold[
       $CellContext`f[
        Pattern[$CellContext`x, 
         Blank[]], 
        Blank[], {
         Pattern[$CellContext`x, 
          Blank[]], 
         Blank[]}]], "Bindings" -> <|$CellContext`x -> Hold[3]|>, "MatchedQ" -> 
     False, "BaseMatchedQ" -> False|>]], "}"}]], "Output",
 CellChangeTimes->{3.883735379274815*^9},
 CellLabel->"Out[35]=",
 CellID->549915234,ExpressionUUID->"b19b59ae-9c34-4cc6-8144-e44ecfe64c73"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchInformation", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"f", "[", 
       RowBox[{"6", ",", "5", ",", "4"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"g", "[", 
       RowBox[{"6", ",", "4"}], "]"}]}], "}"}]}], "]"}], "[", 
  "\"\<Branches\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.883735178096796*^9, 3.883735196525494*^9}},
 CellLabel->"In[34]:=",
 CellID->2086705152,ExpressionUUID->"9ecd7a55-b67a-409e-b2b0-7f350746b241"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.8837351817434263`*^9, 3.88373519684402*^9}},
 CellLabel->"Out[34]=",
 CellID->1350822853,ExpressionUUID->"d4af8d06-5570-42bc-a7ea-17f7bbc644fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchInformation", "[", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"_Integer", "|", "_Real"}], "]"}]}], "]"}], "[", 
  "\"\<Failure\>\"", "]"}]], "Input",
 CellChangeTimes->{3.8837345163917093`*^9},
 CellLabel->"In[15]:=",
 CellID->1656013425,ExpressionUUID->"f4529ef8-633c-4f07-8ab5-61b045528bd8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"_Integer\\\", \\\"|\\\", \\\"_Real\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"_Integer\\\", \\\"|\\\", \\\"_Real\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"x\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"_Integer\\\", \\\"|\\\", \\\"_Real\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"_Integer\\\", \\\"|\\\", \\\"_Real\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"x\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Editable -> False, SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"], 
                    ImageSizeCache -> {8.777109375, {0., 8.777109375}}], 
                    Appearance -> None, BaseStyle -> {}, 
                    ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox[
                    "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                    FontSize -> 35], ContentPadding -> False, 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
                    StripOnInput -> False], 
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"_Integer\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, AutoDelete -> False, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"], 
                    ImageSizeCache -> {8.777109375, {0., 8.777109375}}], 
                    Appearance -> None, BaseStyle -> {}, 
                    ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox[
                    "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                    FontSize -> 35], ContentPadding -> False, 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
                    StripOnInput -> False], 
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"_Integer\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Atomic\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1600", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], SelectWithContents -> True, 
                    Selectable -> False], HoldForm], "SummaryItem"]}]}}, 
                    AutoDelete -> False, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "AtomicMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected expression matching `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[$CellContext`x], 
                    HoldForm[
                    Blank[Integer]]}, "Type" -> "Atomic", "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Editable -> False, SelectWithContents -> 
                    True, Selectable -> False], "}"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                   HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["8432", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Alternatives", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "HeldBranchPatterns" -> {
                    Hold[
                    Blank[Integer]], 
                    Hold[
                    Blank[Real]]}, "BranchIndex" -> 1|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Alternatives[
                    Blank[Integer], 
                    Blank[Real]]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
                    "HeldExpression" -> Hold[
                    $CellContext`f[$CellContext`x]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Alternatives[
                    Blank[Integer], 
                    Blank[Real]]]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], SelectWithContents -> True, 
                    Selectable -> False], HoldForm], "SummaryItem"]}]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "ArgumentMatchFailure", <|
   "MessageTemplate" -> 
    "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
      HoldForm[
       Alternatives[
        Blank[Integer], 
        Blank[Real]]], "first", 
      HoldForm[
       $CellContext`f[
        Alternatives[
         Blank[Integer], 
         Blank[Real]]]], 
      HoldForm[$CellContext`x]}, "Type" -> "Normal", "HeadSubmatch" -> 
    Success["Match", <|
      "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
       HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
       IconizedObject[
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
         Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
      Failure[
      "AtomicMatchFailure", <|
       "MessageTemplate" -> 
        "Expected expression matching `2`, but found `1` instead.", 
        "MessageParameters" -> {
          HoldForm[$CellContext`x], 
          HoldForm[
           Blank[Integer]]}, "Type" -> "Atomic", "Bindings" -> <||>, 
        "MatchBranch" -> IconizedObject[
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[$CellContext`x], "HeldPattern" -> Hold[
              Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
            "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>]}, 
    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
      ChristopherWolfram`PatternErrors`MatchBranchObject[<|
       "Type" -> "Normal", 
        "Arguments" -> <|
         "HeadSubmatch" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], "ArgumentSubmatches" -> {
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Alternatives", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                   "BaseMatchedQ" -> False|>], "HeldBranchPatterns" -> {
                  Hold[
                   Blank[Integer]], 
                  Hold[
                   Blank[Real]]}, "BranchIndex" -> 1|>, "HeldExpression" -> 
              Hold[$CellContext`x], "HeldPattern" -> Hold[
                Alternatives[
                 Blank[Integer], 
                 Blank[Real]]], "Bindings" -> <||>, "MatchedQ" -> False, 
              "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
        "HeldExpression" -> Hold[
          $CellContext`f[$CellContext`x]], "HeldPattern" -> Hold[
          $CellContext`f[
           Alternatives[
            Blank[Integer], 
            Blank[Real]]]], "Bindings" -> <||>, "MatchedQ" -> False, 
        "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.883734516928528*^9},
 CellLabel->"Out[15]=",
 CellID->87671962,ExpressionUUID->"03b10629-a8ea-41b8-b8cb-3f5405bc9cff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "x"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"__Integer", ",", "__Symbol"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[25]:=",
 CellID->1901181748,ExpressionUUID->"2d76e66e-058d-4b16-b03d-8c0ef2fc5105"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{"\"MatchInformationObject[\"", 
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = 1}, 
      InterpretationBox[
       TagBox[
        PanelBox[
         GridBox[{{
            ItemBox[
             PopupMenuBox[
              Dynamic[Typeset`var$$], {1 -> TemplateBox[{
                  StyleBox[
                   TagBox["f", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Integer", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Symbol", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"]\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                 "RowDefault"], 2 -> TemplateBox[{
                  StyleBox[
                   TagBox["f", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Integer", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Symbol", HoldForm], 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  StyleBox["\"]\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                 "RowDefault"], 3 -> TemplateBox[{
                  StyleBox[
                   TagBox["f", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Integer", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Symbol", HoldForm], 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  StyleBox["\"]\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                 "RowDefault"], 4 -> TemplateBox[{
                  StyleBox[
                   TagBox["f", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Integer", HoldForm], 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                  StyleBox[
                   TagBox["__Symbol", HoldForm], 
                   RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                  StyleBox["\"]\"", 
                   RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                 "RowDefault"]}, DefaultMenuStyle -> "MenuViewLabel", Enabled -> 
              Automatic, MenuStyle -> {}], Alignment -> Left, StripOnInput -> 
             False]}, {
            ItemBox[
             StyleBox[
              PaneSelectorBox[{1 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["__Integer", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["__Symbol", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Integer]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Symbol]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]], 2 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["__Integer", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["__Symbol", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[1, 0.2, 0.15], FrontFaceColor -> 
                    RGBColor[1, 0.2, 0.15], BackFaceColor -> 
                    RGBColor[1, 0.2, 0.15], GraphicsColor -> 
                    RGBColor[1, 0.2, 0.15], FontColor -> RGBColor[
                    1, 0.2, 0.15]]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected an expression matching \
\!\(\*TagBox[\"__Symbol\", Function[Short[Slot[1], 5]]]\) in the \
\!\(\*TagBox[\"\\\"second\\\"\", Function[Short[Slot[1], 5]]]\) argument of \
\!\(\*TagBox[RowBox[{\"f\", \"[\", RowBox[{\"__Integer\", \",\", \
\"__Symbol\"}], \"]\"}], Function[Short[Slot[1], 5]]]\), but found \
\!\(\*TagBox[RowBox[{\"HoldForm\", \"[\", RowBox[{\"2\", \",\", \"x\"}], \
\"]\"}], Function[Short[Slot[1], 5]]]\) instead.", 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Integer]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Symbol]], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]], 3 -> 
                InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["__Integer", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["__Symbol", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[1, 0.2, 0.15], FrontFaceColor -> 
                    RGBColor[1, 0.2, 0.15], BackFaceColor -> 
                    RGBColor[1, 0.2, 0.15], GraphicsColor -> 
                    RGBColor[1, 0.2, 0.15], FontColor -> RGBColor[
                    1, 0.2, 0.15]]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Column[{
                    "Expected an expression matching \
\!\(\*TagBox[\"__Symbol\", Function[Short[Slot[1], 5]]]\) in the \
\!\(\*TagBox[\"\\\"second\\\"\", Function[Short[Slot[1], 5]]]\) argument of \
\!\(\*TagBox[RowBox[{\"f\", \"[\", RowBox[{\"__Integer\", \",\", \
\"__Symbol\"}], \"]\"}], Function[Short[Slot[1], 5]]]\), but found \
\!\(\*TagBox[RowBox[{\"HoldForm\", \"[\", RowBox[{\"4\", \",\", \"2\", \",\", \
\"x\"}], \"]\"}], Function[Short[Slot[1], 5]]]\) instead.", 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Integer]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Symbol]], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]], 4 -> 
                InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Integer", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__Symbol", HoldForm], 
                    RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
                    StyleBox["\"]\"", 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["f", HoldForm], 
                    RGBColor[0.2, 0.5, 1], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["__Integer", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[0.2, 0.5, 1], FrontFaceColor -> 
                    RGBColor[0.2, 0.5, 1], BackFaceColor -> 
                    RGBColor[0.2, 0.5, 1], GraphicsColor -> 
                    RGBColor[0.2, 0.5, 1], FontColor -> 
                    RGBColor[0.2, 0.5, 1]]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["__Symbol", HoldForm], StripOnInput -> False, 
                    LineColor -> RGBColor[1, 0.2, 0.15], FrontFaceColor -> 
                    RGBColor[1, 0.2, 0.15], BackFaceColor -> 
                    RGBColor[1, 0.2, 0.15], GraphicsColor -> 
                    RGBColor[1, 0.2, 0.15], FontColor -> RGBColor[
                    1, 0.2, 0.15]]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected an expression matching \
\!\(\*TagBox[\"__Symbol\", Function[Short[Slot[1], 5]]]\) in the \
\!\(\*TagBox[\"\\\"second\\\"\", Function[Short[Slot[1], 5]]]\) argument of \
\!\(\*TagBox[RowBox[{\"f\", \"[\", RowBox[{\"__Integer\", \",\", \
\"__Symbol\"}], \"]\"}], Function[Short[Slot[1], 5]]]\), but found \
\!\(\*TagBox[RowBox[{\"HoldForm\", \"[\", RowBox[{\"3\", \",\", \"4\", \",\", \
\"2\", \",\", \"x\"}], \"]\"}], Function[Short[Slot[1], 5]]]\) instead.", 
                    Row[{
                    Style[
                    HoldForm[$CellContext`f], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style["[", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Integer]], 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[", ", 
                    RGBColor[0.2, 0.5, 1]], 
                    Style[
                    HoldForm[
                    BlankSequence[Symbol]], 
                    RGBColor[1, 0.2, 0.15]], 
                    Style["]", 
                    RGBColor[0.2, 0.5, 1]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>]]}, 
               Dynamic[Typeset`var$$], Alignment -> {Left, Top}, ImageSize -> 
               All, TransitionDirection -> Horizontal, TransitionDuration -> 
               0.5, TransitionEffect -> Automatic], Deployed -> False, 
              StripOnInput -> False], Background -> GrayLevel[1], Frame -> 
             True, FrameStyle -> GrayLevel[0.8235294117647058], StripOnInput -> 
             False]}}, AutoDelete -> False, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
         BaseStyle -> {}, BaselinePosition -> Automatic, DefaultBaseStyle -> 
         "MenuView", FrameMargins -> 6, ImageMargins -> Automatic], Deploy, 
        DefaultBaseStyle -> "Deploy"], 
       MenuView[{Row[{
            Style[
             HoldForm[$CellContext`f], 
             RGBColor[0.2, 0.5, 1]], 
            Style["[", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Integer]], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Symbol]], 
             RGBColor[0.2, 0.5, 1]], 
            Style["]", 
             RGBColor[0.2, 0.5, 1]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[$CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
              $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> 
            Hold[
              $CellContext`f[
               BlankSequence[Integer], 
               BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
            True, "BaseMatchedQ" -> True|>], Row[{
            Style[
             HoldForm[$CellContext`f], 
             RGBColor[0.2, 0.5, 1]], 
            Style["[", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Integer]], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Symbol]], 
             RGBColor[1, 0.2, 0.15]], 
            Style["]", 
             RGBColor[0.2, 0.5, 1]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                  False, "BaseMatchedQ" -> False|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
              $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> 
            Hold[
              $CellContext`f[
               BlankSequence[Integer], 
               BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>], Row[{
            Style[
             HoldForm[$CellContext`f], 
             RGBColor[0.2, 0.5, 1]], 
            Style["[", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Integer]], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Symbol]], 
             RGBColor[1, 0.2, 0.15]], 
            Style["]", 
             RGBColor[0.2, 0.5, 1]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                  False, "BaseMatchedQ" -> False|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
              $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> 
            Hold[
              $CellContext`f[
               BlankSequence[Integer], 
               BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>], Row[{
            Style[
             HoldForm[$CellContext`f], 
             RGBColor[0.2, 0.5, 1]], 
            Style["[", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Integer]], 
             RGBColor[0.2, 0.5, 1]], 
            Style[", ", 
             RGBColor[0.2, 0.5, 1]], 
            Style[
             HoldForm[
              BlankSequence[Symbol]], 
             RGBColor[1, 0.2, 0.15]], 
            Style["]", 
             RGBColor[0.2, 0.5, 1]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], 
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                  False, "BaseMatchedQ" -> False|>]}, 
              "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
              $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> 
            Hold[
              $CellContext`f[
               BlankSequence[Integer], 
               BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> True|>]}]], DynamicModuleValues :> {}], 
     Setting[#, {0}]& ], "\"]\""},
   "RowDefault"],
  ChristopherWolfram`PatternErrors`MatchInformationObject[{
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[1], "HeldPattern" -> Hold[
              BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> True,
             "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
              BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> False,
             "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[
        $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
        $CellContext`f[
         BlankSequence[Integer], 
         BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> False, 
      "BaseMatchedQ" -> True|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[1, 3], "HeldPattern" -> Hold[
              BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> True,
             "BaseMatchedQ" -> True|>], 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
              BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> False,
             "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[
        $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
        $CellContext`f[
         BlankSequence[Integer], 
         BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> False, 
      "BaseMatchedQ" -> True|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[1, 3, 4], "HeldPattern" -> Hold[
              BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> True,
             "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[2, $CellContext`x], "HeldPattern" -> Hold[
              BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> False,
             "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[
        $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
        $CellContext`f[
         BlankSequence[Integer], 
         BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> False, 
      "BaseMatchedQ" -> True|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
              BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> True,
             "BaseMatchedQ" -> True|>], 
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[$CellContext`x], "HeldPattern" -> Hold[
              BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> True, 
            "BaseMatchedQ" -> True|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[
        $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
        $CellContext`f[
         BlankSequence[Integer], 
         BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> True, 
      "BaseMatchedQ" -> True|>]}]]], "Output",
 CellChangeTimes->{{3.8837349178352833`*^9, 3.8837349250722313`*^9}},
 CellLabel->"Out[25]=",
 CellID->1707012244,ExpressionUUID->"5421c98c-69f7-4a81-8d1b-f8eafe5532b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<Failure\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "x"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"__Integer", ",", "__Symbol"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.883734561366705*^9, 3.883734615563052*^9}},
 CellLabel->"In[21]:=",
 CellID->64984688,ExpressionUUID->"9d918dea-22fa-438f-aa24-3efad0572184"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["__Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["__Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1616", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankSequence[Integer]], "Expression" -> HoldForm[1], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\
\\\", \\\"4\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Atomic\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1680", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "AtomicMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected expression matching `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[3, 4, 2, $CellContext`x], 
                    HoldForm[
                    BlankSequence[Symbol]]}, "Type" -> "Atomic", 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["7616", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
        HoldForm[
         BlankSequence[Symbol]], "second", 
        HoldForm[
         $CellContext`f[
          BlankSequence[Integer], 
          BlankSequence[Symbol]]], 
        HoldForm[3, 4, 2, $CellContext`x]}, "Type" -> "Normal", 
      "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            BlankSequence[Integer]], "Expression" -> HoldForm[1], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[1], "HeldPattern" -> Hold[
                BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Failure[
        "AtomicMatchFailure", <|
         "MessageTemplate" -> 
          "Expected expression matching `2`, but found `1` instead.", 
          "MessageParameters" -> {
            HoldForm[3, 4, 2, $CellContext`x], 
            HoldForm[
             BlankSequence[Symbol]]}, "Type" -> "Atomic", "Bindings" -> <||>, 
          "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <||>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[1], "HeldPattern" -> Hold[
                  BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[3, 4, 2, $CellContext`x], "HeldPattern" -> Hold[
                  BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}, 
            "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
            $CellContext`f[
             BlankSequence[Integer], 
             BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> False,
           "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["__Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "3"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["__Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "3"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1632", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankSequence[Integer]], "Expression" -> HoldForm[1, 3], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Atomic\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1648", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "AtomicMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected expression matching `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[4, 2, $CellContext`x], 
                    HoldForm[
                    BlankSequence[Symbol]]}, "Type" -> "Atomic", 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["7616", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
        HoldForm[
         BlankSequence[Symbol]], "second", 
        HoldForm[
         $CellContext`f[
          BlankSequence[Integer], 
          BlankSequence[Symbol]]], 
        HoldForm[4, 2, $CellContext`x]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            BlankSequence[Integer]], "Expression" -> HoldForm[1, 3], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[1, 3], "HeldPattern" -> Hold[
                BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Failure[
        "AtomicMatchFailure", <|
         "MessageTemplate" -> 
          "Expected expression matching `2`, but found `1` instead.", 
          "MessageParameters" -> {
            HoldForm[4, 2, $CellContext`x], 
            HoldForm[
             BlankSequence[Symbol]]}, "Type" -> "Atomic", "Bindings" -> <||>, 
          "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <||>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[1, 3], "HeldPattern" -> Hold[
                  BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[4, 2, $CellContext`x], "HeldPattern" -> Hold[
                  BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}, 
            "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
            $CellContext`f[
             BlankSequence[Integer], 
             BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> False,
           "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"second\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"__Integer\\\", \\\",\\\", \\\"__Symbol\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["__Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "3", ",", "4"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["__Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "3", ",", "4"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1680", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankSequence[Integer]], "Expression" -> 
                    HoldForm[1, 3, 4], "Bindings" -> <||>, "MatchBranch" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"__Symbol\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"x\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"AtomicMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Atomic\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1616", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "AtomicMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected expression matching `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[2, $CellContext`x], 
                    HoldForm[
                    BlankSequence[Symbol]]}, "Type" -> "Atomic", 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["7616", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
        HoldForm[
         BlankSequence[Symbol]], "second", 
        HoldForm[
         $CellContext`f[
          BlankSequence[Integer], 
          BlankSequence[Symbol]]], 
        HoldForm[2, $CellContext`x]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            BlankSequence[Integer]], "Expression" -> HoldForm[1, 3, 4], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[1, 3, 4], "HeldPattern" -> Hold[
                BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Failure[
        "AtomicMatchFailure", <|
         "MessageTemplate" -> 
          "Expected expression matching `2`, but found `1` instead.", 
          "MessageParameters" -> {
            HoldForm[2, $CellContext`x], 
            HoldForm[
             BlankSequence[Symbol]]}, "Type" -> "Atomic", "Bindings" -> <||>, 
          "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <||>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[1, 3, 4], "HeldPattern" -> Hold[
                  BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[2, $CellContext`x], "HeldPattern" -> Hold[
                  BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}, 
            "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
            $CellContext`f[
             BlankSequence[Integer], 
             BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> False,
           "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Success",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"__Integer", ",", "__Symbol"}], "]"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "x"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"__Integer", ",", "__Symbol"}], "]"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "x"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["7616", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                    BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 3, 4, 2, $CellContext`x]], 
                    "HeldPattern" -> Hold[
                    $CellContext`f[
                    BlankSequence[Integer], 
                    BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["\"Match\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Success["Match", <|"Pattern" -> HoldForm[
        $CellContext`f[
         BlankSequence[Integer], 
         BlankSequence[Symbol]]], "Expression" -> HoldForm[
        $CellContext`f[1, 3, 4, 2, $CellContext`x]], "Bindings" -> <||>, 
      "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[1, 3, 4, 2], "HeldPattern" -> Hold[
                  BlankSequence[Integer]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[$CellContext`x], "HeldPattern" -> Hold[
                  BlankSequence[Symbol]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 3, 4, 2, $CellContext`x]], "HeldPattern" -> Hold[
            $CellContext`f[
             BlankSequence[Integer], 
             BlankSequence[Symbol]]], "Bindings" -> <||>, "MatchedQ" -> True, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883734544002801*^9, {3.883734576385076*^9, 3.883734615930235*^9}},
 CellLabel->"Out[21]=",
 CellID->472106515,ExpressionUUID->"e17f7b11-1336-4b18-9575-cca777d20bb6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", 
   RowBox[{"x_Integer", "?", "Positive"}], "]"}], ":=", 
  RowBox[{"Fibonacci", "[", "x", "]"}]}]], "Input",
 CellChangeTimes->{{3.883674364624936*^9, 3.8836743647357273`*^9}, {
  3.883675024488122*^9, 3.883675120803627*^9}},
 CellLabel->"In[5]:=",
 CellID->1481212237,ExpressionUUID->"d48e3803-13d5-4822-8ada-0f70d28e4cdb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "x_Real", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.88370255423983*^9, 3.883702558415174*^9}},
 CellLabel->"In[6]:=",
 CellID->1714719628,ExpressionUUID->"b1c657aa-dc70-4d38-b71c-6484f7c49fb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", 
   RowBox[{"img_Image", "?", "ImageQ"}], "]"}], ":=", 
  RowBox[{"ColorNegate", "[", "img", "]"}]}]], "Input",
 CellChangeTimes->{{3.8837360818797703`*^9, 3.883736089838895*^9}, {
  3.883736123136738*^9, 3.883736123576335*^9}},
 CellLabel->"In[41]:=",
 CellID->913311481,ExpressionUUID->"72e3c562-f0eb-4137-b090-aa6eb852953d"],

Cell[BoxData[
 RowBox[{"SetFallthrough", "[", "fib", "]"}]], "Input",
 CellChangeTimes->{{3.883675123412716*^9, 3.883675127691935*^9}},
 CellLabel->"In[7]:=",
 CellID->2049440610,ExpressionUUID->"7a5f030c-acdb-4c8b-a0e6-473b78145c34"],

Cell[BoxData[
 RowBox[{"??", "fib"}]], "Input",
 CellChangeTimes->{{3.883736633731999*^9, 3.883736641229533*^9}},
 CellLabel->"In[55]:=",
 CellID->2083491191,ExpressionUUID->"a779d4e7-35f9-4413-85b1-99530067ccce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.883675130052266*^9, 3.8836751308836946`*^9}},
 CellLabel->"In[37]:=",
 CellID->596242910,ExpressionUUID->"add368fe-c167-41f4-a4ec-7daaee54235f"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.883675131185833*^9, 3.883675226311089*^9, 3.883675285922845*^9, {
   3.883675869200121*^9, 3.8836758702894382`*^9}, 3.8837024754782352`*^9, 
   3.883702538977951*^9, 3.883703075973074*^9, 3.883734675728547*^9, 
   3.883736095102025*^9},
 CellLabel->"Out[37]=",
 CellID->58445011,ExpressionUUID->"8f433fb9-cc5e-4cf1-8676-fc73600ca172"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", 
  RowBox[{"RandomImage", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8837361012308617`*^9, 3.8837361303848667`*^9}},
 CellLabel->"In[42]:=",
 CellID->123429699,ExpressionUUID->"798804b7-feb1-4216-94c4-3822d461df35"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
X5CsmiHkwEaTHUPolRqPGvESs7CA+r9HI9FrGA1zX0J6TJv25W/w3aMTVQo6
0lgpmM2rptL0exeW3wjDgXAt+nefwszpbjzjMoqlU/twevlVqEYrU21hFPxC
tdlStER0XGdGNf1F8DwbyLQgLyZaGeP3fBeMzTFlcuE6OOzxZv/O4zncRMLv
lirwitiGfu986T53NaxWjmX8kTNWiiaLWXBtOqNcK6DlYoCSrY+QIOvOlHXy
530zmNEXI5juJufznXekdc769LnjJepVq2HvtBtpDRNRuE8FvXPdmdUhHjYB
r1BVp8+i0e40aglmyLi72BWdi+IuO0Xn1n1o6zmc9oM8qS/v843ejdjabSzH
L17C7+Oeipaj50RO26vC9U57XFzWhuMWRfHxnBYU7LsoVu2W99XFLch8ckgU
zB3CnB09WJP8DGcPLWGYN1hyvRtqN+kz6uMIvn+xgCWa3fBTpsV42x7UG/JT
+lfWhpn2e6Xre+yG9VoFRvsbsvCpGauGqKDKi8iY/QZqWa1QSZzBCE9P7m6j
wbxL1yH5fBl1z+7CIUsLPrFF+NB+NlsG2ArPnZ7026TA4o7KLPzhRQetKcxy
asuYey9QtSacPg/3IzPsGZpTfRG635Jh+wsh2VIn1XkzH0umRtI5XonqpRG8
ucCOJV1N+X32AtT+CUPFBi3K3hiJ8q2PhMZDG5Se+QSVGRbst3sP/DUP4vGp
Trw6NQOFVVfQ70QT4ky344P8rsV3/wgboxLY98rAwYltOd0jF/erZ1NydrOQ
1YSLrKIBiO8lR7TSdZD8myJ+r+7FkrGdWJxcIbzCDVmT0I3PnocxY1Qfpo3v
jsK19tA768Him7352K4704UijRYVQF/vAepcIxm2sh1HKQ9hdU0cow2SROVr
TdrIM7Xkg2Dm1LtiXqMNdx03oYdsEr37kmppzpQEf4dxV21mO52G4QEnRvzs
iuMV7hy9wI1By7Og83EikweeEiv2X0dOu2uo9zAVU7ZHc8PXCZQdKUVsbTAU
OmSiVVOVNoNlWBamxfpuddKGBBvGjZTP2+aRbGmnLZy+bRQto5NEU1h/fGos
gWn9VXw9/R6LcoMZP1dNTJ/pQMWz2lDT2CZOh8ZQVduAZndkvLkrjLOvz6PP
7kjuOTWEZk4FWJ9vwljbGSi46snOa4rRvCYXCsc0ueKenDMyzkNdswqFRf6w
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
ig8ia/F08T9j1wzf
    "], {{0, 150.}, {150., 0}}, {0., 1.},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{150., 150.},
  PlotRange->{{0, 150.}, {0, 150.}}]], "Output",
 CellChangeTimes->{{3.883736109153805*^9, 3.883736126932664*^9}},
 CellLabel->"Out[42]=",
 CellID->1226938196,ExpressionUUID->"04f17354-91d2-444f-946d-c3ffcdb3cb7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", 
  RowBox[{"Image", "[", 
   RowBox[{"Range", "[", "1000", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.883736132423526*^9, 3.883736171827217*^9}, {
  3.8837362899251633`*^9, 3.8837362911267147`*^9}},
 CellLabel->"In[50]:=",
 CellID->330157863,ExpressionUUID->"6f4094de-4b8c-4d52-8896-714ba731dad7"],

Cell[BoxData[
 TemplateBox[{
  "Image", "imgarray", 
   "\"The specified argument \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \\\",\\\", \
\\\"5\\\", \\\",\\\", \\\"6\\\", \\\",\\\", \\\"7\\\", \\\",\\\", \\\"8\\\", \
\\\",\\\", \\\"9\\\", \\\",\\\", \\\"10\\\", \\\",\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"990\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}]\\) should be an array of rank 2 or 3 with machine-sized \
numbers.\"", 2, 50, 7, 21878164700138243489, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.883736134215684*^9, 3.883736172332901*^9}, {
  3.8837362853800507`*^9, 3.8837362919883947`*^9}},
 CellLabel->"During evaluation of In[50]:=",
 CellID->1571790191,ExpressionUUID->"c4e238b1-6782-4986-a75b-631975691bc3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"img_Image\\\", \\\"?\\\", \\\"ImageQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \
RowBox[{\\\"img_Image\\\", \\\"?\\\", \\\"ImageQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"Image\\\", \\\"[\\\", RowBox[{\\\"{\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \
\\\",\\\", \\\"5\\\", \\\",\\\", \\\"6\\\", \\\",\\\", \\\"7\\\", \\\",\\\", \
\\\"8\\\", \\\",\\\", \\\"9\\\", \\\",\\\", \\\"10\\\", \\\",\\\", RowBox[{\\\
\"\[LeftSkeleton]\\\", \\\"990\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"img_Image\\\", \\\"?\\\", \\\"ImageQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \
RowBox[{\\\"img_Image\\\", \\\"?\\\", \\\"ImageQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"Image\\\", \\\"[\\\", RowBox[{\\\"{\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \
\\\",\\\", \\\"5\\\", \\\",\\\", \\\"6\\\", \\\",\\\", \\\"7\\\", \\\",\\\", \
\\\"8\\\", \\\",\\\", \\\"9\\\", \\\",\\\", \\\"10\\\", \\\",\\\", RowBox[{\\\
\"\[LeftSkeleton]\\\", \\\"990\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`fib], "Expression" -> 
                    HoldForm[$CellContext`fib], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Editable -> False, SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"ImageQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"Image\\\", \\\"[\\\", RowBox[{\\\"{\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \
\\\",\\\", \\\"5\\\", \\\",\\\", \\\"6\\\", \\\",\\\", \\\"7\\\", \\\",\\\", \
\\\"8\\\", \\\",\\\", \\\"9\\\", \\\",\\\", \\\"10\\\", \\\",\\\", RowBox[{\\\
\"\[LeftSkeleton]\\\", \\\"990\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"ImageQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"Image\\\", \\\"[\\\", RowBox[{\\\"{\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \
\\\",\\\", \\\"5\\\", \\\",\\\", \\\"6\\\", \\\",\\\", \\\"7\\\", \\\",\\\", \
\\\"8\\\", \\\",\\\", \\\"9\\\", \\\",\\\", \\\"10\\\", \\\",\\\", RowBox[{\\\
\"\[LeftSkeleton]\\\", \\\"990\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"PatternTest\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"TestResults\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", "False", "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["img_Image", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"Image", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", 
                    "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", 
                    ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", 
                    ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", 
                    ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", 
                    ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", 
                    ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", 
                    ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", 
                    ",", "42", ",", "43", ",", "44", ",", "45", ",", "46", 
                    ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", 
                    ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", 
                    ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", 
                    ",", "62", ",", "63", ",", "64", ",", "65", ",", "66", 
                    ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", 
                    ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", 
                    ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", 
                    ",", "82", ",", "83", ",", "84", ",", "85", ",", "86", 
                    ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", 
                    ",", "92", ",", "93", ",", "94", ",", "95", ",", "96", 
                    ",", "97", ",", "98", ",", "99", ",", "100", ",", "101", 
                    ",", "102", ",", "103", ",", "104", ",", "105", ",", 
                    "106", ",", "107", ",", "108", ",", "109", ",", "110", 
                    ",", "111", ",", "112", ",", "113", ",", "114", ",", 
                    "115", ",", "116", ",", "117", ",", "118", ",", "119", 
                    ",", "120", ",", "121", ",", "122", ",", "123", ",", 
                    "124", ",", "125", ",", "126", ",", "127", ",", "128", 
                    ",", "129", ",", "130", ",", "131", ",", "132", ",", 
                    "133", ",", "134", ",", "135", ",", "136", ",", "137", 
                    ",", "138", ",", "139", ",", "140", ",", "141", ",", 
                    "142", ",", "143", ",", "144", ",", "145", ",", "146", 
                    ",", "147", ",", "148", ",", "149", ",", "150", ",", 
                    "151", ",", "152", ",", "153", ",", "154", ",", "155", 
                    ",", "156", ",", "157", ",", "158", ",", "159", ",", 
                    "160", ",", "161", ",", "162", ",", "163", ",", "164", 
                    ",", "165", ",", "166", ",", "167", ",", "168", ",", 
                    "169", ",", "170", ",", "171", ",", "172", ",", "173", 
                    ",", "174", ",", "175", ",", "176", ",", "177", ",", 
                    "178", ",", "179", ",", "180", ",", "181", ",", "182", 
                    ",", "183", ",", "184", ",", "185", ",", "186", ",", 
                    "187", ",", "188", ",", "189", ",", "190", ",", "191", 
                    ",", "192", ",", "193", ",", "194", ",", "195", ",", 
                    "196", ",", "197", ",", "198", ",", "199", ",", "200", 
                    ",", "201", ",", "202", ",", "203", ",", "204", ",", 
                    "205", ",", "206", ",", "207", ",", "208", ",", "209", 
                    ",", "210", ",", "211", ",", "212", ",", "213", ",", 
                    "214", ",", "215", ",", "216", ",", "217", ",", "218", 
                    ",", "219", ",", "220", ",", "221", ",", "222", ",", 
                    "223", ",", "224", ",", "225", ",", "226", ",", "227", 
                    ",", "228", ",", "229", ",", "230", ",", "231", ",", 
                    "232", ",", "233", ",", "234", ",", "235", ",", "236", 
                    ",", "237", ",", "238", ",", "239", ",", "240", ",", 
                    "241", ",", "242", ",", "243", ",", "244", ",", "245", 
                    ",", "246", ",", "247", ",", "248", ",", "249", ",", 
                    "250", ",", "251", ",", "252", ",", "253", ",", "254", 
                    ",", "255", ",", "256", ",", "257", ",", "258", ",", 
                    "259", ",", "260", ",", "261", ",", "262", ",", "263", 
                    ",", "264", ",", "265", ",", "266", ",", "267", ",", 
                    "268", ",", "269", ",", "270", ",", "271", ",", "272", 
                    ",", "273", ",", "274", ",", "275", ",", "276", ",", 
                    "277", ",", "278", ",", "279", ",", "280", ",", "281", 
                    ",", "282", ",", "283", ",", "284", ",", "285", ",", 
                    "286", ",", "287", ",", "288", ",", "289", ",", "290", 
                    ",", "291", ",", "292", ",", "293", ",", "294", ",", 
                    "295", ",", "296", ",", "297", ",", "298", ",", "299", 
                    ",", "300", ",", "301", ",", "302", ",", "303", ",", 
                    "304", ",", "305", ",", "306", ",", "307", ",", "308", 
                    ",", "309", ",", "310", ",", "311", ",", "312", ",", 
                    "313", ",", "314", ",", "315", ",", "316", ",", "317", 
                    ",", "318", ",", "319", ",", "320", ",", "321", ",", 
                    "322", ",", "323", ",", "324", ",", "325", ",", "326", 
                    ",", "327", ",", "328", ",", "329", ",", "330", ",", 
                    "331", ",", "332", ",", "333", ",", "334", ",", "335", 
                    ",", "336", ",", "337", ",", "338", ",", "339", ",", 
                    "340", ",", "341", ",", "342", ",", "343", ",", "344", 
                    ",", "345", ",", "346", ",", "347", ",", "348", ",", 
                    "349", ",", "350", ",", "351", ",", "352", ",", "353", 
                    ",", "354", ",", "355", ",", "356", ",", "357", ",", 
                    "358", ",", "359", ",", "360", ",", "361", ",", "362", 
                    ",", "363", ",", "364", ",", "365", ",", "366", ",", 
                    "367", ",", "368", ",", "369", ",", "370", ",", "371", 
                    ",", "372", ",", "373", ",", "374", ",", "375", ",", 
                    "376", ",", "377", ",", "378", ",", "379", ",", "380", 
                    ",", "381", ",", "382", ",", "383", ",", "384", ",", 
                    "385", ",", "386", ",", "387", ",", "388", ",", "389", 
                    ",", "390", ",", "391", ",", "392", ",", "393", ",", 
                    "394", ",", "395", ",", "396", ",", "397", ",", "398", 
                    ",", "399", ",", "400", ",", "401", ",", "402", ",", 
                    "403", ",", "404", ",", "405", ",", "406", ",", "407", 
                    ",", "408", ",", "409", ",", "410", ",", "411", ",", 
                    "412", ",", "413", ",", "414", ",", "415", ",", "416", 
                    ",", "417", ",", "418", ",", "419", ",", "420", ",", 
                    "421", ",", "422", ",", "423", ",", "424", ",", "425", 
                    ",", "426", ",", "427", ",", "428", ",", "429", ",", 
                    "430", ",", "431", ",", "432", ",", "433", ",", "434", 
                    ",", "435", ",", "436", ",", "437", ",", "438", ",", 
                    "439", ",", "440", ",", "441", ",", "442", ",", "443", 
                    ",", "444", ",", "445", ",", "446", ",", "447", ",", 
                    "448", ",", "449", ",", "450", ",", "451", ",", "452", 
                    ",", "453", ",", "454", ",", "455", ",", "456", ",", 
                    "457", ",", "458", ",", "459", ",", "460", ",", "461", 
                    ",", "462", ",", "463", ",", "464", ",", "465", ",", 
                    "466", ",", "467", ",", "468", ",", "469", ",", "470", 
                    ",", "471", ",", "472", ",", "473", ",", "474", ",", 
                    "475", ",", "476", ",", "477", ",", "478", ",", "479", 
                    ",", "480", ",", "481", ",", "482", ",", "483", ",", 
                    "484", ",", "485", ",", "486", ",", "487", ",", "488", 
                    ",", "489", ",", "490", ",", "491", ",", "492", ",", 
                    "493", ",", "494", ",", "495", ",", "496", ",", "497", 
                    ",", "498", ",", "499", ",", "500", ",", "501", ",", 
                    "502", ",", "503", ",", "504", ",", "505", ",", "506", 
                    ",", "507", ",", "508", ",", "509", ",", "510", ",", 
                    "511", ",", "512", ",", "513", ",", "514", ",", "515", 
                    ",", "516", ",", "517", ",", "518", ",", "519", ",", 
                    "520", ",", "521", ",", "522", ",", "523", ",", "524", 
                    ",", "525", ",", "526", ",", "527", ",", "528", ",", 
                    "529", ",", "530", ",", "531", ",", "532", ",", "533", 
                    ",", "534", ",", "535", ",", "536", ",", "537", ",", 
                    "538", ",", "539", ",", "540", ",", "541", ",", "542", 
                    ",", "543", ",", "544", ",", "545", ",", "546", ",", 
                    "547", ",", "548", ",", "549", ",", "550", ",", "551", 
                    ",", "552", ",", "553", ",", "554", ",", "555", ",", 
                    "556", ",", "557", ",", "558", ",", "559", ",", "560", 
                    ",", "561", ",", "562", ",", "563", ",", "564", ",", 
                    "565", ",", "566", ",", "567", ",", "568", ",", "569", 
                    ",", "570", ",", "571", ",", "572", ",", "573", ",", 
                    "574", ",", "575", ",", "576", ",", "577", ",", "578", 
                    ",", "579", ",", "580", ",", "581", ",", "582", ",", 
                    "583", ",", "584", ",", "585", ",", "586", ",", "587", 
                    ",", "588", ",", "589", ",", "590", ",", "591", ",", 
                    "592", ",", "593", ",", "594", ",", "595", ",", "596", 
                    ",", "597", ",", "598", ",", "599", ",", "600", ",", 
                    "601", ",", "602", ",", "603", ",", "604", ",", "605", 
                    ",", "606", ",", "607", ",", "608", ",", "609", ",", 
                    "610", ",", "611", ",", "612", ",", "613", ",", "614", 
                    ",", "615", ",", "616", ",", "617", ",", "618", ",", 
                    "619", ",", "620", ",", "621", ",", "622", ",", "623", 
                    ",", "624", ",", "625", ",", "626", ",", "627", ",", 
                    "628", ",", "629", ",", "630", ",", "631", ",", "632", 
                    ",", "633", ",", "634", ",", "635", ",", "636", ",", 
                    "637", ",", "638", ",", "639", ",", "640", ",", "641", 
                    ",", "642", ",", "643", ",", "644", ",", "645", ",", 
                    "646", ",", "647", ",", "648", ",", "649", ",", "650", 
                    ",", "651", ",", "652", ",", "653", ",", "654", ",", 
                    "655", ",", "656", ",", "657", ",", "658", ",", "659", 
                    ",", "660", ",", "661", ",", "662", ",", "663", ",", 
                    "664", ",", "665", ",", "666", ",", "667", ",", "668", 
                    ",", "669", ",", "670", ",", "671", ",", "672", ",", 
                    "673", ",", "674", ",", "675", ",", "676", ",", "677", 
                    ",", "678", ",", "679", ",", "680", ",", "681", ",", 
                    "682", ",", "683", ",", "684", ",", "685", ",", "686", 
                    ",", "687", ",", "688", ",", "689", ",", "690", ",", 
                    "691", ",", "692", ",", "693", ",", "694", ",", "695", 
                    ",", "696", ",", "697", ",", "698", ",", "699", ",", 
                    "700", ",", "701", ",", "702", ",", "703", ",", "704", 
                    ",", "705", ",", "706", ",", "707", ",", "708", ",", 
                    "709", ",", "710", ",", "711", ",", "712", ",", "713", 
                    ",", "714", ",", "715", ",", "716", ",", "717", ",", 
                    "718", ",", "719", ",", "720", ",", "721", ",", "722", 
                    ",", "723", ",", "724", ",", "725", ",", "726", ",", 
                    "727", ",", "728", ",", "729", ",", "730", ",", "731", 
                    ",", "732", ",", "733", ",", "734", ",", "735", ",", 
                    "736", ",", "737", ",", "738", ",", "739", ",", "740", 
                    ",", "741", ",", "742", ",", "743", ",", "744", ",", 
                    "745", ",", "746", ",", "747", ",", "748", ",", "749", 
                    ",", "750", ",", "751", ",", "752", ",", "753", ",", 
                    "754", ",", "755", ",", "756", ",", "757", ",", "758", 
                    ",", "759", ",", "760", ",", "761", ",", "762", ",", 
                    "763", ",", "764", ",", "765", ",", "766", ",", "767", 
                    ",", "768", ",", "769", ",", "770", ",", "771", ",", 
                    "772", ",", "773", ",", "774", ",", "775", ",", "776", 
                    ",", "777", ",", "778", ",", "779", ",", "780", ",", 
                    "781", ",", "782", ",", "783", ",", "784", ",", "785", 
                    ",", "786", ",", "787", ",", "788", ",", "789", ",", 
                    "790", ",", "791", ",", "792", ",", "793", ",", "794", 
                    ",", "795", ",", "796", ",", "797", ",", "798", ",", 
                    "799", ",", "800", ",", "801", ",", "802", ",", "803", 
                    ",", "804", ",", "805", ",", "806", ",", "807", ",", 
                    "808", ",", "809", ",", "810", ",", "811", ",", "812", 
                    ",", "813", ",", "814", ",", "815", ",", "816", ",", 
                    "817", ",", "818", ",", "819", ",", "820", ",", "821", 
                    ",", "822", ",", "823", ",", "824", ",", "825", ",", 
                    "826", ",", "827", ",", "828", ",", "829", ",", "830", 
                    ",", "831", ",", "832", ",", "833", ",", "834", ",", 
                    "835", ",", "836", ",", "837", ",", "838", ",", "839", 
                    ",", "840", ",", "841", ",", "842", ",", "843", ",", 
                    "844", ",", "845", ",", "846", ",", "847", ",", "848", 
                    ",", "849", ",", "850", ",", "851", ",", "852", ",", 
                    "853", ",", "854", ",", "855", ",", "856", ",", "857", 
                    ",", "858", ",", "859", ",", "860", ",", "861", ",", 
                    "862", ",", "863", ",", "864", ",", "865", ",", "866", 
                    ",", "867", ",", "868", ",", "869", ",", "870", ",", 
                    "871", ",", "872", ",", "873", ",", "874", ",", "875", 
                    ",", "876", ",", "877", ",", "878", ",", "879", ",", 
                    "880", ",", "881", ",", "882", ",", "883", ",", "884", 
                    ",", "885", ",", "886", ",", "887", ",", "888", ",", 
                    "889", ",", "890", ",", "891", ",", "892", ",", "893", 
                    ",", "894", ",", "895", ",", "896", ",", "897", ",", 
                    "898", ",", "899", ",", "900", ",", "901", ",", "902", 
                    ",", "903", ",", "904", ",", "905", ",", "906", ",", 
                    "907", ",", "908", ",", "909", ",", "910", ",", "911", 
                    ",", "912", ",", "913", ",", "914", ",", "915", ",", 
                    "916", ",", "917", ",", "918", ",", "919", ",", "920", 
                    ",", "921", ",", "922", ",", "923", ",", "924", ",", 
                    "925", ",", "926", ",", "927", ",", "928", ",", "929", 
                    ",", "930", ",", "931", ",", "932", ",", "933", ",", 
                    "934", ",", "935", ",", "936", ",", "937", ",", "938", 
                    ",", "939", ",", "940", ",", "941", ",", "942", ",", 
                    "943", ",", "944", ",", "945", ",", "946", ",", "947", 
                    ",", "948", ",", "949", ",", "950", ",", "951", ",", 
                    "952", ",", "953", ",", "954", ",", "955", ",", "956", 
                    ",", "957", ",", "958", ",", "959", ",", "960", ",", 
                    "961", ",", "962", ",", "963", ",", "964", ",", "965", 
                    ",", "966", ",", "967", ",", "968", ",", "969", ",", 
                    "970", ",", "971", ",", "972", ",", "973", ",", "974", 
                    ",", "975", ",", "976", ",", "977", ",", "978", ",", 
                    "979", ",", "980", ",", "981", ",", "982", ",", "983", 
                    ",", "984", ",", "985", ",", "986", ",", "987", ",", 
                    "988", ",", "989", ",", "990", ",", "991", ",", "992", 
                    ",", "993", ",", "994", ",", "995", ",", "996", ",", 
                    "997", ",", "998", ",", "999", ",", "1000"}], "}"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["img_Image", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"Image", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", 
                    "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", 
                    ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", 
                    ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", 
                    ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", 
                    ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", 
                    ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", 
                    ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", 
                    ",", "42", ",", "43", ",", "44", ",", "45", ",", "46", 
                    ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", 
                    ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", 
                    ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", 
                    ",", "62", ",", "63", ",", "64", ",", "65", ",", "66", 
                    ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", 
                    ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", 
                    ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", 
                    ",", "82", ",", "83", ",", "84", ",", "85", ",", "86", 
                    ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", 
                    ",", "92", ",", "93", ",", "94", ",", "95", ",", "96", 
                    ",", "97", ",", "98", ",", "99", ",", "100", ",", "101", 
                    ",", "102", ",", "103", ",", "104", ",", "105", ",", 
                    "106", ",", "107", ",", "108", ",", "109", ",", "110", 
                    ",", "111", ",", "112", ",", "113", ",", "114", ",", 
                    "115", ",", "116", ",", "117", ",", "118", ",", "119", 
                    ",", "120", ",", "121", ",", "122", ",", "123", ",", 
                    "124", ",", "125", ",", "126", ",", "127", ",", "128", 
                    ",", "129", ",", "130", ",", "131", ",", "132", ",", 
                    "133", ",", "134", ",", "135", ",", "136", ",", "137", 
                    ",", "138", ",", "139", ",", "140", ",", "141", ",", 
                    "142", ",", "143", ",", "144", ",", "145", ",", "146", 
                    ",", "147", ",", "148", ",", "149", ",", "150", ",", 
                    "151", ",", "152", ",", "153", ",", "154", ",", "155", 
                    ",", "156", ",", "157", ",", "158", ",", "159", ",", 
                    "160", ",", "161", ",", "162", ",", "163", ",", "164", 
                    ",", "165", ",", "166", ",", "167", ",", "168", ",", 
                    "169", ",", "170", ",", "171", ",", "172", ",", "173", 
                    ",", "174", ",", "175", ",", "176", ",", "177", ",", 
                    "178", ",", "179", ",", "180", ",", "181", ",", "182", 
                    ",", "183", ",", "184", ",", "185", ",", "186", ",", 
                    "187", ",", "188", ",", "189", ",", "190", ",", "191", 
                    ",", "192", ",", "193", ",", "194", ",", "195", ",", 
                    "196", ",", "197", ",", "198", ",", "199", ",", "200", 
                    ",", "201", ",", "202", ",", "203", ",", "204", ",", 
                    "205", ",", "206", ",", "207", ",", "208", ",", "209", 
                    ",", "210", ",", "211", ",", "212", ",", "213", ",", 
                    "214", ",", "215", ",", "216", ",", "217", ",", "218", 
                    ",", "219", ",", "220", ",", "221", ",", "222", ",", 
                    "223", ",", "224", ",", "225", ",", "226", ",", "227", 
                    ",", "228", ",", "229", ",", "230", ",", "231", ",", 
                    "232", ",", "233", ",", "234", ",", "235", ",", "236", 
                    ",", "237", ",", "238", ",", "239", ",", "240", ",", 
                    "241", ",", "242", ",", "243", ",", "244", ",", "245", 
                    ",", "246", ",", "247", ",", "248", ",", "249", ",", 
                    "250", ",", "251", ",", "252", ",", "253", ",", "254", 
                    ",", "255", ",", "256", ",", "257", ",", "258", ",", 
                    "259", ",", "260", ",", "261", ",", "262", ",", "263", 
                    ",", "264", ",", "265", ",", "266", ",", "267", ",", 
                    "268", ",", "269", ",", "270", ",", "271", ",", "272", 
                    ",", "273", ",", "274", ",", "275", ",", "276", ",", 
                    "277", ",", "278", ",", "279", ",", "280", ",", "281", 
                    ",", "282", ",", "283", ",", "284", ",", "285", ",", 
                    "286", ",", "287", ",", "288", ",", "289", ",", "290", 
                    ",", "291", ",", "292", ",", "293", ",", "294", ",", 
                    "295", ",", "296", ",", "297", ",", "298", ",", "299", 
                    ",", "300", ",", "301", ",", "302", ",", "303", ",", 
                    "304", ",", "305", ",", "306", ",", "307", ",", "308", 
                    ",", "309", ",", "310", ",", "311", ",", "312", ",", 
                    "313", ",", "314", ",", "315", ",", "316", ",", "317", 
                    ",", "318", ",", "319", ",", "320", ",", "321", ",", 
                    "322", ",", "323", ",", "324", ",", "325", ",", "326", 
                    ",", "327", ",", "328", ",", "329", ",", "330", ",", 
                    "331", ",", "332", ",", "333", ",", "334", ",", "335", 
                    ",", "336", ",", "337", ",", "338", ",", "339", ",", 
                    "340", ",", "341", ",", "342", ",", "343", ",", "344", 
                    ",", "345", ",", "346", ",", "347", ",", "348", ",", 
                    "349", ",", "350", ",", "351", ",", "352", ",", "353", 
                    ",", "354", ",", "355", ",", "356", ",", "357", ",", 
                    "358", ",", "359", ",", "360", ",", "361", ",", "362", 
                    ",", "363", ",", "364", ",", "365", ",", "366", ",", 
                    "367", ",", "368", ",", "369", ",", "370", ",", "371", 
                    ",", "372", ",", "373", ",", "374", ",", "375", ",", 
                    "376", ",", "377", ",", "378", ",", "379", ",", "380", 
                    ",", "381", ",", "382", ",", "383", ",", "384", ",", 
                    "385", ",", "386", ",", "387", ",", "388", ",", "389", 
                    ",", "390", ",", "391", ",", "392", ",", "393", ",", 
                    "394", ",", "395", ",", "396", ",", "397", ",", "398", 
                    ",", "399", ",", "400", ",", "401", ",", "402", ",", 
                    "403", ",", "404", ",", "405", ",", "406", ",", "407", 
                    ",", "408", ",", "409", ",", "410", ",", "411", ",", 
                    "412", ",", "413", ",", "414", ",", "415", ",", "416", 
                    ",", "417", ",", "418", ",", "419", ",", "420", ",", 
                    "421", ",", "422", ",", "423", ",", "424", ",", "425", 
                    ",", "426", ",", "427", ",", "428", ",", "429", ",", 
                    "430", ",", "431", ",", "432", ",", "433", ",", "434", 
                    ",", "435", ",", "436", ",", "437", ",", "438", ",", 
                    "439", ",", "440", ",", "441", ",", "442", ",", "443", 
                    ",", "444", ",", "445", ",", "446", ",", "447", ",", 
                    "448", ",", "449", ",", "450", ",", "451", ",", "452", 
                    ",", "453", ",", "454", ",", "455", ",", "456", ",", 
                    "457", ",", "458", ",", "459", ",", "460", ",", "461", 
                    ",", "462", ",", "463", ",", "464", ",", "465", ",", 
                    "466", ",", "467", ",", "468", ",", "469", ",", "470", 
                    ",", "471", ",", "472", ",", "473", ",", "474", ",", 
                    "475", ",", "476", ",", "477", ",", "478", ",", "479", 
                    ",", "480", ",", "481", ",", "482", ",", "483", ",", 
                    "484", ",", "485", ",", "486", ",", "487", ",", "488", 
                    ",", "489", ",", "490", ",", "491", ",", "492", ",", 
                    "493", ",", "494", ",", "495", ",", "496", ",", "497", 
                    ",", "498", ",", "499", ",", "500", ",", "501", ",", 
                    "502", ",", "503", ",", "504", ",", "505", ",", "506", 
                    ",", "507", ",", "508", ",", "509", ",", "510", ",", 
                    "511", ",", "512", ",", "513", ",", "514", ",", "515", 
                    ",", "516", ",", "517", ",", "518", ",", "519", ",", 
                    "520", ",", "521", ",", "522", ",", "523", ",", "524", 
                    ",", "525", ",", "526", ",", "527", ",", "528", ",", 
                    "529", ",", "530", ",", "531", ",", "532", ",", "533", 
                    ",", "534", ",", "535", ",", "536", ",", "537", ",", 
                    "538", ",", "539", ",", "540", ",", "541", ",", "542", 
                    ",", "543", ",", "544", ",", "545", ",", "546", ",", 
                    "547", ",", "548", ",", "549", ",", "550", ",", "551", 
                    ",", "552", ",", "553", ",", "554", ",", "555", ",", 
                    "556", ",", "557", ",", "558", ",", "559", ",", "560", 
                    ",", "561", ",", "562", ",", "563", ",", "564", ",", 
                    "565", ",", "566", ",", "567", ",", "568", ",", "569", 
                    ",", "570", ",", "571", ",", "572", ",", "573", ",", 
                    "574", ",", "575", ",", "576", ",", "577", ",", "578", 
                    ",", "579", ",", "580", ",", "581", ",", "582", ",", 
                    "583", ",", "584", ",", "585", ",", "586", ",", "587", 
                    ",", "588", ",", "589", ",", "590", ",", "591", ",", 
                    "592", ",", "593", ",", "594", ",", "595", ",", "596", 
                    ",", "597", ",", "598", ",", "599", ",", "600", ",", 
                    "601", ",", "602", ",", "603", ",", "604", ",", "605", 
                    ",", "606", ",", "607", ",", "608", ",", "609", ",", 
                    "610", ",", "611", ",", "612", ",", "613", ",", "614", 
                    ",", "615", ",", "616", ",", "617", ",", "618", ",", 
                    "619", ",", "620", ",", "621", ",", "622", ",", "623", 
                    ",", "624", ",", "625", ",", "626", ",", "627", ",", 
                    "628", ",", "629", ",", "630", ",", "631", ",", "632", 
                    ",", "633", ",", "634", ",", "635", ",", "636", ",", 
                    "637", ",", "638", ",", "639", ",", "640", ",", "641", 
                    ",", "642", ",", "643", ",", "644", ",", "645", ",", 
                    "646", ",", "647", ",", "648", ",", "649", ",", "650", 
                    ",", "651", ",", "652", ",", "653", ",", "654", ",", 
                    "655", ",", "656", ",", "657", ",", "658", ",", "659", 
                    ",", "660", ",", "661", ",", "662", ",", "663", ",", 
                    "664", ",", "665", ",", "666", ",", "667", ",", "668", 
                    ",", "669", ",", "670", ",", "671", ",", "672", ",", 
                    "673", ",", "674", ",", "675", ",", "676", ",", "677", 
                    ",", "678", ",", "679", ",", "680", ",", "681", ",", 
                    "682", ",", "683", ",", "684", ",", "685", ",", "686", 
                    ",", "687", ",", "688", ",", "689", ",", "690", ",", 
                    "691", ",", "692", ",", "693", ",", "694", ",", "695", 
                    ",", "696", ",", "697", ",", "698", ",", "699", ",", 
                    "700", ",", "701", ",", "702", ",", "703", ",", "704", 
                    ",", "705", ",", "706", ",", "707", ",", "708", ",", 
                    "709", ",", "710", ",", "711", ",", "712", ",", "713", 
                    ",", "714", ",", "715", ",", "716", ",", "717", ",", 
                    "718", ",", "719", ",", "720", ",", "721", ",", "722", 
                    ",", "723", ",", "724", ",", "725", ",", "726", ",", 
                    "727", ",", "728", ",", "729", ",", "730", ",", "731", 
                    ",", "732", ",", "733", ",", "734", ",", "735", ",", 
                    "736", ",", "737", ",", "738", ",", "739", ",", "740", 
                    ",", "741", ",", "742", ",", "743", ",", "744", ",", 
                    "745", ",", "746", ",", "747", ",", "748", ",", "749", 
                    ",", "750", ",", "751", ",", "752", ",", "753", ",", 
                    "754", ",", "755", ",", "756", ",", "757", ",", "758", 
                    ",", "759", ",", "760", ",", "761", ",", "762", ",", 
                    "763", ",", "764", ",", "765", ",", "766", ",", "767", 
                    ",", "768", ",", "769", ",", "770", ",", "771", ",", 
                    "772", ",", "773", ",", "774", ",", "775", ",", "776", 
                    ",", "777", ",", "778", ",", "779", ",", "780", ",", 
                    "781", ",", "782", ",", "783", ",", "784", ",", "785", 
                    ",", "786", ",", "787", ",", "788", ",", "789", ",", 
                    "790", ",", "791", ",", "792", ",", "793", ",", "794", 
                    ",", "795", ",", "796", ",", "797", ",", "798", ",", 
                    "799", ",", "800", ",", "801", ",", "802", ",", "803", 
                    ",", "804", ",", "805", ",", "806", ",", "807", ",", 
                    "808", ",", "809", ",", "810", ",", "811", ",", "812", 
                    ",", "813", ",", "814", ",", "815", ",", "816", ",", 
                    "817", ",", "818", ",", "819", ",", "820", ",", "821", 
                    ",", "822", ",", "823", ",", "824", ",", "825", ",", 
                    "826", ",", "827", ",", "828", ",", "829", ",", "830", 
                    ",", "831", ",", "832", ",", "833", ",", "834", ",", 
                    "835", ",", "836", ",", "837", ",", "838", ",", "839", 
                    ",", "840", ",", "841", ",", "842", ",", "843", ",", 
                    "844", ",", "845", ",", "846", ",", "847", ",", "848", 
                    ",", "849", ",", "850", ",", "851", ",", "852", ",", 
                    "853", ",", "854", ",", "855", ",", "856", ",", "857", 
                    ",", "858", ",", "859", ",", "860", ",", "861", ",", 
                    "862", ",", "863", ",", "864", ",", "865", ",", "866", 
                    ",", "867", ",", "868", ",", "869", ",", "870", ",", 
                    "871", ",", "872", ",", "873", ",", "874", ",", "875", 
                    ",", "876", ",", "877", ",", "878", ",", "879", ",", 
                    "880", ",", "881", ",", "882", ",", "883", ",", "884", 
                    ",", "885", ",", "886", ",", "887", ",", "888", ",", 
                    "889", ",", "890", ",", "891", ",", "892", ",", "893", 
                    ",", "894", ",", "895", ",", "896", ",", "897", ",", 
                    "898", ",", "899", ",", "900", ",", "901", ",", "902", 
                    ",", "903", ",", "904", ",", "905", ",", "906", ",", 
                    "907", ",", "908", ",", "909", ",", "910", ",", "911", 
                    ",", "912", ",", "913", ",", "914", ",", "915", ",", 
                    "916", ",", "917", ",", "918", ",", "919", ",", "920", 
                    ",", "921", ",", "922", ",", "923", ",", "924", ",", 
                    "925", ",", "926", ",", "927", ",", "928", ",", "929", 
                    ",", "930", ",", "931", ",", "932", ",", "933", ",", 
                    "934", ",", "935", ",", "936", ",", "937", ",", "938", 
                    ",", "939", ",", "940", ",", "941", ",", "942", ",", 
                    "943", ",", "944", ",", "945", ",", "946", ",", "947", 
                    ",", "948", ",", "949", ",", "950", ",", "951", ",", 
                    "952", ",", "953", ",", "954", ",", "955", ",", "956", 
                    ",", "957", ",", "958", ",", "959", ",", "960", ",", 
                    "961", ",", "962", ",", "963", ",", "964", ",", "965", 
                    ",", "966", ",", "967", ",", "968", ",", "969", ",", 
                    "970", ",", "971", ",", "972", ",", "973", ",", "974", 
                    ",", "975", ",", "976", ",", "977", ",", "978", ",", 
                    "979", ",", "980", ",", "981", ",", "982", ",", "983", 
                    ",", "984", ",", "985", ",", "986", ",", "987", ",", 
                    "988", ",", "989", ",", "990", ",", "991", ",", "992", 
                    ",", "993", ",", "994", ",", "995", ",", "996", ",", 
                    "997", ",", "998", ",", "999", ",", "1000"}], "}"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"img", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"Image", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", 
                    "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", 
                    ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", 
                    ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", 
                    ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", 
                    ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", 
                    ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", 
                    ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", 
                    ",", "42", ",", "43", ",", "44", ",", "45", ",", "46", 
                    ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", 
                    ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", 
                    ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", 
                    ",", "62", ",", "63", ",", "64", ",", "65", ",", "66", 
                    ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", 
                    ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", 
                    ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", 
                    ",", "82", ",", "83", ",", "84", ",", "85", ",", "86", 
                    ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", 
                    ",", "92", ",", "93", ",", "94", ",", "95", ",", "96", 
                    ",", "97", ",", "98", ",", "99", ",", "100", ",", "101", 
                    ",", "102", ",", "103", ",", "104", ",", "105", ",", 
                    "106", ",", "107", ",", "108", ",", "109", ",", "110", 
                    ",", "111", ",", "112", ",", "113", ",", "114", ",", 
                    "115", ",", "116", ",", "117", ",", "118", ",", "119", 
                    ",", "120", ",", "121", ",", "122", ",", "123", ",", 
                    "124", ",", "125", ",", "126", ",", "127", ",", "128", 
                    ",", "129", ",", "130", ",", "131", ",", "132", ",", 
                    "133", ",", "134", ",", "135", ",", "136", ",", "137", 
                    ",", "138", ",", "139", ",", "140", ",", "141", ",", 
                    "142", ",", "143", ",", "144", ",", "145", ",", "146", 
                    ",", "147", ",", "148", ",", "149", ",", "150", ",", 
                    "151", ",", "152", ",", "153", ",", "154", ",", "155", 
                    ",", "156", ",", "157", ",", "158", ",", "159", ",", 
                    "160", ",", "161", ",", "162", ",", "163", ",", "164", 
                    ",", "165", ",", "166", ",", "167", ",", "168", ",", 
                    "169", ",", "170", ",", "171", ",", "172", ",", "173", 
                    ",", "174", ",", "175", ",", "176", ",", "177", ",", 
                    "178", ",", "179", ",", "180", ",", "181", ",", "182", 
                    ",", "183", ",", "184", ",", "185", ",", "186", ",", 
                    "187", ",", "188", ",", "189", ",", "190", ",", "191", 
                    ",", "192", ",", "193", ",", "194", ",", "195", ",", 
                    "196", ",", "197", ",", "198", ",", "199", ",", "200", 
                    ",", "201", ",", "202", ",", "203", ",", "204", ",", 
                    "205", ",", "206", ",", "207", ",", "208", ",", "209", 
                    ",", "210", ",", "211", ",", "212", ",", "213", ",", 
                    "214", ",", "215", ",", "216", ",", "217", ",", "218", 
                    ",", "219", ",", "220", ",", "221", ",", "222", ",", 
                    "223", ",", "224", ",", "225", ",", "226", ",", "227", 
                    ",", "228", ",", "229", ",", "230", ",", "231", ",", 
                    "232", ",", "233", ",", "234", ",", "235", ",", "236", 
                    ",", "237", ",", "238", ",", "239", ",", "240", ",", 
                    "241", ",", "242", ",", "243", ",", "244", ",", "245", 
                    ",", "246", ",", "247", ",", "248", ",", "249", ",", 
                    "250", ",", "251", ",", "252", ",", "253", ",", "254", 
                    ",", "255", ",", "256", ",", "257", ",", "258", ",", 
                    "259", ",", "260", ",", "261", ",", "262", ",", "263", 
                    ",", "264", ",", "265", ",", "266", ",", "267", ",", 
                    "268", ",", "269", ",", "270", ",", "271", ",", "272", 
                    ",", "273", ",", "274", ",", "275", ",", "276", ",", 
                    "277", ",", "278", ",", "279", ",", "280", ",", "281", 
                    ",", "282", ",", "283", ",", "284", ",", "285", ",", 
                    "286", ",", "287", ",", "288", ",", "289", ",", "290", 
                    ",", "291", ",", "292", ",", "293", ",", "294", ",", 
                    "295", ",", "296", ",", "297", ",", "298", ",", "299", 
                    ",", "300", ",", "301", ",", "302", ",", "303", ",", 
                    "304", ",", "305", ",", "306", ",", "307", ",", "308", 
                    ",", "309", ",", "310", ",", "311", ",", "312", ",", 
                    "313", ",", "314", ",", "315", ",", "316", ",", "317", 
                    ",", "318", ",", "319", ",", "320", ",", "321", ",", 
                    "322", ",", "323", ",", "324", ",", "325", ",", "326", 
                    ",", "327", ",", "328", ",", "329", ",", "330", ",", 
                    "331", ",", "332", ",", "333", ",", "334", ",", "335", 
                    ",", "336", ",", "337", ",", "338", ",", "339", ",", 
                    "340", ",", "341", ",", "342", ",", "343", ",", "344", 
                    ",", "345", ",", "346", ",", "347", ",", "348", ",", 
                    "349", ",", "350", ",", "351", ",", "352", ",", "353", 
                    ",", "354", ",", "355", ",", "356", ",", "357", ",", 
                    "358", ",", "359", ",", "360", ",", "361", ",", "362", 
                    ",", "363", ",", "364", ",", "365", ",", "366", ",", 
                    "367", ",", "368", ",", "369", ",", "370", ",", "371", 
                    ",", "372", ",", "373", ",", "374", ",", "375", ",", 
                    "376", ",", "377", ",", "378", ",", "379", ",", "380", 
                    ",", "381", ",", "382", ",", "383", ",", "384", ",", 
                    "385", ",", "386", ",", "387", ",", "388", ",", "389", 
                    ",", "390", ",", "391", ",", "392", ",", "393", ",", 
                    "394", ",", "395", ",", "396", ",", "397", ",", "398", 
                    ",", "399", ",", "400", ",", "401", ",", "402", ",", 
                    "403", ",", "404", ",", "405", ",", "406", ",", "407", 
                    ",", "408", ",", "409", ",", "410", ",", "411", ",", 
                    "412", ",", "413", ",", "414", ",", "415", ",", "416", 
                    ",", "417", ",", "418", ",", "419", ",", "420", ",", 
                    "421", ",", "422", ",", "423", ",", "424", ",", "425", 
                    ",", "426", ",", "427", ",", "428", ",", "429", ",", 
                    "430", ",", "431", ",", "432", ",", "433", ",", "434", 
                    ",", "435", ",", "436", ",", "437", ",", "438", ",", 
                    "439", ",", "440", ",", "441", ",", "442", ",", "443", 
                    ",", "444", ",", "445", ",", "446", ",", "447", ",", 
                    "448", ",", "449", ",", "450", ",", "451", ",", "452", 
                    ",", "453", ",", "454", ",", "455", ",", "456", ",", 
                    "457", ",", "458", ",", "459", ",", "460", ",", "461", 
                    ",", "462", ",", "463", ",", "464", ",", "465", ",", 
                    "466", ",", "467", ",", "468", ",", "469", ",", "470", 
                    ",", "471", ",", "472", ",", "473", ",", "474", ",", 
                    "475", ",", "476", ",", "477", ",", "478", ",", "479", 
                    ",", "480", ",", "481", ",", "482", ",", "483", ",", 
                    "484", ",", "485", ",", "486", ",", "487", ",", "488", 
                    ",", "489", ",", "490", ",", "491", ",", "492", ",", 
                    "493", ",", "494", ",", "495", ",", "496", ",", "497", 
                    ",", "498", ",", "499", ",", "500", ",", "501", ",", 
                    "502", ",", "503", ",", "504", ",", "505", ",", "506", 
                    ",", "507", ",", "508", ",", "509", ",", "510", ",", 
                    "511", ",", "512", ",", "513", ",", "514", ",", "515", 
                    ",", "516", ",", "517", ",", "518", ",", "519", ",", 
                    "520", ",", "521", ",", "522", ",", "523", ",", "524", 
                    ",", "525", ",", "526", ",", "527", ",", "528", ",", 
                    "529", ",", "530", ",", "531", ",", "532", ",", "533", 
                    ",", "534", ",", "535", ",", "536", ",", "537", ",", 
                    "538", ",", "539", ",", "540", ",", "541", ",", "542", 
                    ",", "543", ",", "544", ",", "545", ",", "546", ",", 
                    "547", ",", "548", ",", "549", ",", "550", ",", "551", 
                    ",", "552", ",", "553", ",", "554", ",", "555", ",", 
                    "556", ",", "557", ",", "558", ",", "559", ",", "560", 
                    ",", "561", ",", "562", ",", "563", ",", "564", ",", 
                    "565", ",", "566", ",", "567", ",", "568", ",", "569", 
                    ",", "570", ",", "571", ",", "572", ",", "573", ",", 
                    "574", ",", "575", ",", "576", ",", "577", ",", "578", 
                    ",", "579", ",", "580", ",", "581", ",", "582", ",", 
                    "583", ",", "584", ",", "585", ",", "586", ",", "587", 
                    ",", "588", ",", "589", ",", "590", ",", "591", ",", 
                    "592", ",", "593", ",", "594", ",", "595", ",", "596", 
                    ",", "597", ",", "598", ",", "599", ",", "600", ",", 
                    "601", ",", "602", ",", "603", ",", "604", ",", "605", 
                    ",", "606", ",", "607", ",", "608", ",", "609", ",", 
                    "610", ",", "611", ",", "612", ",", "613", ",", "614", 
                    ",", "615", ",", "616", ",", "617", ",", "618", ",", 
                    "619", ",", "620", ",", "621", ",", "622", ",", "623", 
                    ",", "624", ",", "625", ",", "626", ",", "627", ",", 
                    "628", ",", "629", ",", "630", ",", "631", ",", "632", 
                    ",", "633", ",", "634", ",", "635", ",", "636", ",", 
                    "637", ",", "638", ",", "639", ",", "640", ",", "641", 
                    ",", "642", ",", "643", ",", "644", ",", "645", ",", 
                    "646", ",", "647", ",", "648", ",", "649", ",", "650", 
                    ",", "651", ",", "652", ",", "653", ",", "654", ",", 
                    "655", ",", "656", ",", "657", ",", "658", ",", "659", 
                    ",", "660", ",", "661", ",", "662", ",", "663", ",", 
                    "664", ",", "665", ",", "666", ",", "667", ",", "668", 
                    ",", "669", ",", "670", ",", "671", ",", "672", ",", 
                    "673", ",", "674", ",", "675", ",", "676", ",", "677", 
                    ",", "678", ",", "679", ",", "680", ",", "681", ",", 
                    "682", ",", "683", ",", "684", ",", "685", ",", "686", 
                    ",", "687", ",", "688", ",", "689", ",", "690", ",", 
                    "691", ",", "692", ",", "693", ",", "694", ",", "695", 
                    ",", "696", ",", "697", ",", "698", ",", "699", ",", 
                    "700", ",", "701", ",", "702", ",", "703", ",", "704", 
                    ",", "705", ",", "706", ",", "707", ",", "708", ",", 
                    "709", ",", "710", ",", "711", ",", "712", ",", "713", 
                    ",", "714", ",", "715", ",", "716", ",", "717", ",", 
                    "718", ",", "719", ",", "720", ",", "721", ",", "722", 
                    ",", "723", ",", "724", ",", "725", ",", "726", ",", 
                    "727", ",", "728", ",", "729", ",", "730", ",", "731", 
                    ",", "732", ",", "733", ",", "734", ",", "735", ",", 
                    "736", ",", "737", ",", "738", ",", "739", ",", "740", 
                    ",", "741", ",", "742", ",", "743", ",", "744", ",", 
                    "745", ",", "746", ",", "747", ",", "748", ",", "749", 
                    ",", "750", ",", "751", ",", "752", ",", "753", ",", 
                    "754", ",", "755", ",", "756", ",", "757", ",", "758", 
                    ",", "759", ",", "760", ",", "761", ",", "762", ",", 
                    "763", ",", "764", ",", "765", ",", "766", ",", "767", 
                    ",", "768", ",", "769", ",", "770", ",", "771", ",", 
                    "772", ",", "773", ",", "774", ",", "775", ",", "776", 
                    ",", "777", ",", "778", ",", "779", ",", "780", ",", 
                    "781", ",", "782", ",", "783", ",", "784", ",", "785", 
                    ",", "786", ",", "787", ",", "788", ",", "789", ",", 
                    "790", ",", "791", ",", "792", ",", "793", ",", "794", 
                    ",", "795", ",", "796", ",", "797", ",", "798", ",", 
                    "799", ",", "800", ",", "801", ",", "802", ",", "803", 
                    ",", "804", ",", "805", ",", "806", ",", "807", ",", 
                    "808", ",", "809", ",", "810", ",", "811", ",", "812", 
                    ",", "813", ",", "814", ",", "815", ",", "816", ",", 
                    "817", ",", "818", ",", "819", ",", "820", ",", "821", 
                    ",", "822", ",", "823", ",", "824", ",", "825", ",", 
                    "826", ",", "827", ",", "828", ",", "829", ",", "830", 
                    ",", "831", ",", "832", ",", "833", ",", "834", ",", 
                    "835", ",", "836", ",", "837", ",", "838", ",", "839", 
                    ",", "840", ",", "841", ",", "842", ",", "843", ",", 
                    "844", ",", "845", ",", "846", ",", "847", ",", "848", 
                    ",", "849", ",", "850", ",", "851", ",", "852", ",", 
                    "853", ",", "854", ",", "855", ",", "856", ",", "857", 
                    ",", "858", ",", "859", ",", "860", ",", "861", ",", 
                    "862", ",", "863", ",", "864", ",", "865", ",", "866", 
                    ",", "867", ",", "868", ",", "869", ",", "870", ",", 
                    "871", ",", "872", ",", "873", ",", "874", ",", "875", 
                    ",", "876", ",", "877", ",", "878", ",", "879", ",", 
                    "880", ",", "881", ",", "882", ",", "883", ",", "884", 
                    ",", "885", ",", "886", ",", "887", ",", "888", ",", 
                    "889", ",", "890", ",", "891", ",", "892", ",", "893", 
                    ",", "894", ",", "895", ",", "896", ",", "897", ",", 
                    "898", ",", "899", ",", "900", ",", "901", ",", "902", 
                    ",", "903", ",", "904", ",", "905", ",", "906", ",", 
                    "907", ",", "908", ",", "909", ",", "910", ",", "911", 
                    ",", "912", ",", "913", ",", "914", ",", "915", ",", 
                    "916", ",", "917", ",", "918", ",", "919", ",", "920", 
                    ",", "921", ",", "922", ",", "923", ",", "924", ",", 
                    "925", ",", "926", ",", "927", ",", "928", ",", "929", 
                    ",", "930", ",", "931", ",", "932", ",", "933", ",", 
                    "934", ",", "935", ",", "936", ",", "937", ",", "938", 
                    ",", "939", ",", "940", ",", "941", ",", "942", ",", 
                    "943", ",", "944", ",", "945", ",", "946", ",", "947", 
                    ",", "948", ",", "949", ",", "950", ",", "951", ",", 
                    "952", ",", "953", ",", "954", ",", "955", ",", "956", 
                    ",", "957", ",", "958", ",", "959", ",", "960", ",", 
                    "961", ",", "962", ",", "963", ",", "964", ",", "965", 
                    ",", "966", ",", "967", ",", "968", ",", "969", ",", 
                    "970", ",", "971", ",", "972", ",", "973", ",", "974", 
                    ",", "975", ",", "976", ",", "977", ",", "978", ",", 
                    "979", ",", "980", ",", "981", ",", "982", ",", "983", 
                    ",", "984", ",", "985", ",", "986", ",", "987", ",", 
                    "988", ",", "989", ",", "990", ",", "991", ",", "992", 
                    ",", "993", ",", "994", ",", "995", ",", "996", ",", 
                    "997", ",", "998", ",", "999", ",", "1000"}], "}"}], 
                    "]"}], "]"}]}], "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["32016", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Expression" -> HoldForm[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    Automatic, Method -> Automatic]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"img", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"Image", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", 
                    "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", 
                    ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", 
                    ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", 
                    ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", 
                    ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", 
                    ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", 
                    ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", 
                    ",", "42", ",", "43", ",", "44", ",", "45", ",", "46", 
                    ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", 
                    ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", 
                    ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", 
                    ",", "62", ",", "63", ",", "64", ",", "65", ",", "66", 
                    ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", 
                    ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", 
                    ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", 
                    ",", "82", ",", "83", ",", "84", ",", "85", ",", "86", 
                    ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", 
                    ",", "92", ",", "93", ",", "94", ",", "95", ",", "96", 
                    ",", "97", ",", "98", ",", "99", ",", "100", ",", "101", 
                    ",", "102", ",", "103", ",", "104", ",", "105", ",", 
                    "106", ",", "107", ",", "108", ",", "109", ",", "110", 
                    ",", "111", ",", "112", ",", "113", ",", "114", ",", 
                    "115", ",", "116", ",", "117", ",", "118", ",", "119", 
                    ",", "120", ",", "121", ",", "122", ",", "123", ",", 
                    "124", ",", "125", ",", "126", ",", "127", ",", "128", 
                    ",", "129", ",", "130", ",", "131", ",", "132", ",", 
                    "133", ",", "134", ",", "135", ",", "136", ",", "137", 
                    ",", "138", ",", "139", ",", "140", ",", "141", ",", 
                    "142", ",", "143", ",", "144", ",", "145", ",", "146", 
                    ",", "147", ",", "148", ",", "149", ",", "150", ",", 
                    "151", ",", "152", ",", "153", ",", "154", ",", "155", 
                    ",", "156", ",", "157", ",", "158", ",", "159", ",", 
                    "160", ",", "161", ",", "162", ",", "163", ",", "164", 
                    ",", "165", ",", "166", ",", "167", ",", "168", ",", 
                    "169", ",", "170", ",", "171", ",", "172", ",", "173", 
                    ",", "174", ",", "175", ",", "176", ",", "177", ",", 
                    "178", ",", "179", ",", "180", ",", "181", ",", "182", 
                    ",", "183", ",", "184", ",", "185", ",", "186", ",", 
                    "187", ",", "188", ",", "189", ",", "190", ",", "191", 
                    ",", "192", ",", "193", ",", "194", ",", "195", ",", 
                    "196", ",", "197", ",", "198", ",", "199", ",", "200", 
                    ",", "201", ",", "202", ",", "203", ",", "204", ",", 
                    "205", ",", "206", ",", "207", ",", "208", ",", "209", 
                    ",", "210", ",", "211", ",", "212", ",", "213", ",", 
                    "214", ",", "215", ",", "216", ",", "217", ",", "218", 
                    ",", "219", ",", "220", ",", "221", ",", "222", ",", 
                    "223", ",", "224", ",", "225", ",", "226", ",", "227", 
                    ",", "228", ",", "229", ",", "230", ",", "231", ",", 
                    "232", ",", "233", ",", "234", ",", "235", ",", "236", 
                    ",", "237", ",", "238", ",", "239", ",", "240", ",", 
                    "241", ",", "242", ",", "243", ",", "244", ",", "245", 
                    ",", "246", ",", "247", ",", "248", ",", "249", ",", 
                    "250", ",", "251", ",", "252", ",", "253", ",", "254", 
                    ",", "255", ",", "256", ",", "257", ",", "258", ",", 
                    "259", ",", "260", ",", "261", ",", "262", ",", "263", 
                    ",", "264", ",", "265", ",", "266", ",", "267", ",", 
                    "268", ",", "269", ",", "270", ",", "271", ",", "272", 
                    ",", "273", ",", "274", ",", "275", ",", "276", ",", 
                    "277", ",", "278", ",", "279", ",", "280", ",", "281", 
                    ",", "282", ",", "283", ",", "284", ",", "285", ",", 
                    "286", ",", "287", ",", "288", ",", "289", ",", "290", 
                    ",", "291", ",", "292", ",", "293", ",", "294", ",", 
                    "295", ",", "296", ",", "297", ",", "298", ",", "299", 
                    ",", "300", ",", "301", ",", "302", ",", "303", ",", 
                    "304", ",", "305", ",", "306", ",", "307", ",", "308", 
                    ",", "309", ",", "310", ",", "311", ",", "312", ",", 
                    "313", ",", "314", ",", "315", ",", "316", ",", "317", 
                    ",", "318", ",", "319", ",", "320", ",", "321", ",", 
                    "322", ",", "323", ",", "324", ",", "325", ",", "326", 
                    ",", "327", ",", "328", ",", "329", ",", "330", ",", 
                    "331", ",", "332", ",", "333", ",", "334", ",", "335", 
                    ",", "336", ",", "337", ",", "338", ",", "339", ",", 
                    "340", ",", "341", ",", "342", ",", "343", ",", "344", 
                    ",", "345", ",", "346", ",", "347", ",", "348", ",", 
                    "349", ",", "350", ",", "351", ",", "352", ",", "353", 
                    ",", "354", ",", "355", ",", "356", ",", "357", ",", 
                    "358", ",", "359", ",", "360", ",", "361", ",", "362", 
                    ",", "363", ",", "364", ",", "365", ",", "366", ",", 
                    "367", ",", "368", ",", "369", ",", "370", ",", "371", 
                    ",", "372", ",", "373", ",", "374", ",", "375", ",", 
                    "376", ",", "377", ",", "378", ",", "379", ",", "380", 
                    ",", "381", ",", "382", ",", "383", ",", "384", ",", 
                    "385", ",", "386", ",", "387", ",", "388", ",", "389", 
                    ",", "390", ",", "391", ",", "392", ",", "393", ",", 
                    "394", ",", "395", ",", "396", ",", "397", ",", "398", 
                    ",", "399", ",", "400", ",", "401", ",", "402", ",", 
                    "403", ",", "404", ",", "405", ",", "406", ",", "407", 
                    ",", "408", ",", "409", ",", "410", ",", "411", ",", 
                    "412", ",", "413", ",", "414", ",", "415", ",", "416", 
                    ",", "417", ",", "418", ",", "419", ",", "420", ",", 
                    "421", ",", "422", ",", "423", ",", "424", ",", "425", 
                    ",", "426", ",", "427", ",", "428", ",", "429", ",", 
                    "430", ",", "431", ",", "432", ",", "433", ",", "434", 
                    ",", "435", ",", "436", ",", "437", ",", "438", ",", 
                    "439", ",", "440", ",", "441", ",", "442", ",", "443", 
                    ",", "444", ",", "445", ",", "446", ",", "447", ",", 
                    "448", ",", "449", ",", "450", ",", "451", ",", "452", 
                    ",", "453", ",", "454", ",", "455", ",", "456", ",", 
                    "457", ",", "458", ",", "459", ",", "460", ",", "461", 
                    ",", "462", ",", "463", ",", "464", ",", "465", ",", 
                    "466", ",", "467", ",", "468", ",", "469", ",", "470", 
                    ",", "471", ",", "472", ",", "473", ",", "474", ",", 
                    "475", ",", "476", ",", "477", ",", "478", ",", "479", 
                    ",", "480", ",", "481", ",", "482", ",", "483", ",", 
                    "484", ",", "485", ",", "486", ",", "487", ",", "488", 
                    ",", "489", ",", "490", ",", "491", ",", "492", ",", 
                    "493", ",", "494", ",", "495", ",", "496", ",", "497", 
                    ",", "498", ",", "499", ",", "500", ",", "501", ",", 
                    "502", ",", "503", ",", "504", ",", "505", ",", "506", 
                    ",", "507", ",", "508", ",", "509", ",", "510", ",", 
                    "511", ",", "512", ",", "513", ",", "514", ",", "515", 
                    ",", "516", ",", "517", ",", "518", ",", "519", ",", 
                    "520", ",", "521", ",", "522", ",", "523", ",", "524", 
                    ",", "525", ",", "526", ",", "527", ",", "528", ",", 
                    "529", ",", "530", ",", "531", ",", "532", ",", "533", 
                    ",", "534", ",", "535", ",", "536", ",", "537", ",", 
                    "538", ",", "539", ",", "540", ",", "541", ",", "542", 
                    ",", "543", ",", "544", ",", "545", ",", "546", ",", 
                    "547", ",", "548", ",", "549", ",", "550", ",", "551", 
                    ",", "552", ",", "553", ",", "554", ",", "555", ",", 
                    "556", ",", "557", ",", "558", ",", "559", ",", "560", 
                    ",", "561", ",", "562", ",", "563", ",", "564", ",", 
                    "565", ",", "566", ",", "567", ",", "568", ",", "569", 
                    ",", "570", ",", "571", ",", "572", ",", "573", ",", 
                    "574", ",", "575", ",", "576", ",", "577", ",", "578", 
                    ",", "579", ",", "580", ",", "581", ",", "582", ",", 
                    "583", ",", "584", ",", "585", ",", "586", ",", "587", 
                    ",", "588", ",", "589", ",", "590", ",", "591", ",", 
                    "592", ",", "593", ",", "594", ",", "595", ",", "596", 
                    ",", "597", ",", "598", ",", "599", ",", "600", ",", 
                    "601", ",", "602", ",", "603", ",", "604", ",", "605", 
                    ",", "606", ",", "607", ",", "608", ",", "609", ",", 
                    "610", ",", "611", ",", "612", ",", "613", ",", "614", 
                    ",", "615", ",", "616", ",", "617", ",", "618", ",", 
                    "619", ",", "620", ",", "621", ",", "622", ",", "623", 
                    ",", "624", ",", "625", ",", "626", ",", "627", ",", 
                    "628", ",", "629", ",", "630", ",", "631", ",", "632", 
                    ",", "633", ",", "634", ",", "635", ",", "636", ",", 
                    "637", ",", "638", ",", "639", ",", "640", ",", "641", 
                    ",", "642", ",", "643", ",", "644", ",", "645", ",", 
                    "646", ",", "647", ",", "648", ",", "649", ",", "650", 
                    ",", "651", ",", "652", ",", "653", ",", "654", ",", 
                    "655", ",", "656", ",", "657", ",", "658", ",", "659", 
                    ",", "660", ",", "661", ",", "662", ",", "663", ",", 
                    "664", ",", "665", ",", "666", ",", "667", ",", "668", 
                    ",", "669", ",", "670", ",", "671", ",", "672", ",", 
                    "673", ",", "674", ",", "675", ",", "676", ",", "677", 
                    ",", "678", ",", "679", ",", "680", ",", "681", ",", 
                    "682", ",", "683", ",", "684", ",", "685", ",", "686", 
                    ",", "687", ",", "688", ",", "689", ",", "690", ",", 
                    "691", ",", "692", ",", "693", ",", "694", ",", "695", 
                    ",", "696", ",", "697", ",", "698", ",", "699", ",", 
                    "700", ",", "701", ",", "702", ",", "703", ",", "704", 
                    ",", "705", ",", "706", ",", "707", ",", "708", ",", 
                    "709", ",", "710", ",", "711", ",", "712", ",", "713", 
                    ",", "714", ",", "715", ",", "716", ",", "717", ",", 
                    "718", ",", "719", ",", "720", ",", "721", ",", "722", 
                    ",", "723", ",", "724", ",", "725", ",", "726", ",", 
                    "727", ",", "728", ",", "729", ",", "730", ",", "731", 
                    ",", "732", ",", "733", ",", "734", ",", "735", ",", 
                    "736", ",", "737", ",", "738", ",", "739", ",", "740", 
                    ",", "741", ",", "742", ",", "743", ",", "744", ",", 
                    "745", ",", "746", ",", "747", ",", "748", ",", "749", 
                    ",", "750", ",", "751", ",", "752", ",", "753", ",", 
                    "754", ",", "755", ",", "756", ",", "757", ",", "758", 
                    ",", "759", ",", "760", ",", "761", ",", "762", ",", 
                    "763", ",", "764", ",", "765", ",", "766", ",", "767", 
                    ",", "768", ",", "769", ",", "770", ",", "771", ",", 
                    "772", ",", "773", ",", "774", ",", "775", ",", "776", 
                    ",", "777", ",", "778", ",", "779", ",", "780", ",", 
                    "781", ",", "782", ",", "783", ",", "784", ",", "785", 
                    ",", "786", ",", "787", ",", "788", ",", "789", ",", 
                    "790", ",", "791", ",", "792", ",", "793", ",", "794", 
                    ",", "795", ",", "796", ",", "797", ",", "798", ",", 
                    "799", ",", "800", ",", "801", ",", "802", ",", "803", 
                    ",", "804", ",", "805", ",", "806", ",", "807", ",", 
                    "808", ",", "809", ",", "810", ",", "811", ",", "812", 
                    ",", "813", ",", "814", ",", "815", ",", "816", ",", 
                    "817", ",", "818", ",", "819", ",", "820", ",", "821", 
                    ",", "822", ",", "823", ",", "824", ",", "825", ",", 
                    "826", ",", "827", ",", "828", ",", "829", ",", "830", 
                    ",", "831", ",", "832", ",", "833", ",", "834", ",", 
                    "835", ",", "836", ",", "837", ",", "838", ",", "839", 
                    ",", "840", ",", "841", ",", "842", ",", "843", ",", 
                    "844", ",", "845", ",", "846", ",", "847", ",", "848", 
                    ",", "849", ",", "850", ",", "851", ",", "852", ",", 
                    "853", ",", "854", ",", "855", ",", "856", ",", "857", 
                    ",", "858", ",", "859", ",", "860", ",", "861", ",", 
                    "862", ",", "863", ",", "864", ",", "865", ",", "866", 
                    ",", "867", ",", "868", ",", "869", ",", "870", ",", 
                    "871", ",", "872", ",", "873", ",", "874", ",", "875", 
                    ",", "876", ",", "877", ",", "878", ",", "879", ",", 
                    "880", ",", "881", ",", "882", ",", "883", ",", "884", 
                    ",", "885", ",", "886", ",", "887", ",", "888", ",", 
                    "889", ",", "890", ",", "891", ",", "892", ",", "893", 
                    ",", "894", ",", "895", ",", "896", ",", "897", ",", 
                    "898", ",", "899", ",", "900", ",", "901", ",", "902", 
                    ",", "903", ",", "904", ",", "905", ",", "906", ",", 
                    "907", ",", "908", ",", "909", ",", "910", ",", "911", 
                    ",", "912", ",", "913", ",", "914", ",", "915", ",", 
                    "916", ",", "917", ",", "918", ",", "919", ",", "920", 
                    ",", "921", ",", "922", ",", "923", ",", "924", ",", 
                    "925", ",", "926", ",", "927", ",", "928", ",", "929", 
                    ",", "930", ",", "931", ",", "932", ",", "933", ",", 
                    "934", ",", "935", ",", "936", ",", "937", ",", "938", 
                    ",", "939", ",", "940", ",", "941", ",", "942", ",", 
                    "943", ",", "944", ",", "945", ",", "946", ",", "947", 
                    ",", "948", ",", "949", ",", "950", ",", "951", ",", 
                    "952", ",", "953", ",", "954", ",", "955", ",", "956", 
                    ",", "957", ",", "958", ",", "959", ",", "960", ",", 
                    "961", ",", "962", ",", "963", ",", "964", ",", "965", 
                    ",", "966", ",", "967", ",", "968", ",", "969", ",", 
                    "970", ",", "971", ",", "972", ",", "973", ",", "974", 
                    ",", "975", ",", "976", ",", "977", ",", "978", ",", 
                    "979", ",", "980", ",", "981", ",", "982", ",", "983", 
                    ",", "984", ",", "985", ",", "986", ",", "987", ",", 
                    "988", ",", "989", ",", "990", ",", "991", ",", "992", 
                    ",", "993", ",", "994", ",", "995", ",", "996", ",", 
                    "997", ",", "998", ",", "999", ",", "1000"}], "}"}], 
                    "]"}], "]"}]}], "\[RightAssociation]"}], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["55624", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
                    "HeldExpression" -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[Image]], ImageQ]], 
                    "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "PatternTestMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected an expression satisfying `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], ImageQ}, "Type" -> "PatternTest", 
                    "TestResults" -> {False}, "Submatch" -> 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Expression" -> HoldForm[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    Automatic, Method -> Automatic]|>], 
                    "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
                    "HeldExpression" -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[Image]], ImageQ]], 
                    "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    Automatic, Method -> Automatic]|>], Editable -> False, 
                    SelectWithContents -> True, Selectable -> False], "}"}], 
                   HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{"img", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"Image", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", 
                    "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", 
                    ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", 
                    ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", 
                    ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", 
                    ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", 
                    ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", 
                    ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", 
                    ",", "42", ",", "43", ",", "44", ",", "45", ",", "46", 
                    ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", 
                    ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", 
                    ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", 
                    ",", "62", ",", "63", ",", "64", ",", "65", ",", "66", 
                    ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", 
                    ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", 
                    ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", 
                    ",", "82", ",", "83", ",", "84", ",", "85", ",", "86", 
                    ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", 
                    ",", "92", ",", "93", ",", "94", ",", "95", ",", "96", 
                    ",", "97", ",", "98", ",", "99", ",", "100", ",", "101", 
                    ",", "102", ",", "103", ",", "104", ",", "105", ",", 
                    "106", ",", "107", ",", "108", ",", "109", ",", "110", 
                    ",", "111", ",", "112", ",", "113", ",", "114", ",", 
                    "115", ",", "116", ",", "117", ",", "118", ",", "119", 
                    ",", "120", ",", "121", ",", "122", ",", "123", ",", 
                    "124", ",", "125", ",", "126", ",", "127", ",", "128", 
                    ",", "129", ",", "130", ",", "131", ",", "132", ",", 
                    "133", ",", "134", ",", "135", ",", "136", ",", "137", 
                    ",", "138", ",", "139", ",", "140", ",", "141", ",", 
                    "142", ",", "143", ",", "144", ",", "145", ",", "146", 
                    ",", "147", ",", "148", ",", "149", ",", "150", ",", 
                    "151", ",", "152", ",", "153", ",", "154", ",", "155", 
                    ",", "156", ",", "157", ",", "158", ",", "159", ",", 
                    "160", ",", "161", ",", "162", ",", "163", ",", "164", 
                    ",", "165", ",", "166", ",", "167", ",", "168", ",", 
                    "169", ",", "170", ",", "171", ",", "172", ",", "173", 
                    ",", "174", ",", "175", ",", "176", ",", "177", ",", 
                    "178", ",", "179", ",", "180", ",", "181", ",", "182", 
                    ",", "183", ",", "184", ",", "185", ",", "186", ",", 
                    "187", ",", "188", ",", "189", ",", "190", ",", "191", 
                    ",", "192", ",", "193", ",", "194", ",", "195", ",", 
                    "196", ",", "197", ",", "198", ",", "199", ",", "200", 
                    ",", "201", ",", "202", ",", "203", ",", "204", ",", 
                    "205", ",", "206", ",", "207", ",", "208", ",", "209", 
                    ",", "210", ",", "211", ",", "212", ",", "213", ",", 
                    "214", ",", "215", ",", "216", ",", "217", ",", "218", 
                    ",", "219", ",", "220", ",", "221", ",", "222", ",", 
                    "223", ",", "224", ",", "225", ",", "226", ",", "227", 
                    ",", "228", ",", "229", ",", "230", ",", "231", ",", 
                    "232", ",", "233", ",", "234", ",", "235", ",", "236", 
                    ",", "237", ",", "238", ",", "239", ",", "240", ",", 
                    "241", ",", "242", ",", "243", ",", "244", ",", "245", 
                    ",", "246", ",", "247", ",", "248", ",", "249", ",", 
                    "250", ",", "251", ",", "252", ",", "253", ",", "254", 
                    ",", "255", ",", "256", ",", "257", ",", "258", ",", 
                    "259", ",", "260", ",", "261", ",", "262", ",", "263", 
                    ",", "264", ",", "265", ",", "266", ",", "267", ",", 
                    "268", ",", "269", ",", "270", ",", "271", ",", "272", 
                    ",", "273", ",", "274", ",", "275", ",", "276", ",", 
                    "277", ",", "278", ",", "279", ",", "280", ",", "281", 
                    ",", "282", ",", "283", ",", "284", ",", "285", ",", 
                    "286", ",", "287", ",", "288", ",", "289", ",", "290", 
                    ",", "291", ",", "292", ",", "293", ",", "294", ",", 
                    "295", ",", "296", ",", "297", ",", "298", ",", "299", 
                    ",", "300", ",", "301", ",", "302", ",", "303", ",", 
                    "304", ",", "305", ",", "306", ",", "307", ",", "308", 
                    ",", "309", ",", "310", ",", "311", ",", "312", ",", 
                    "313", ",", "314", ",", "315", ",", "316", ",", "317", 
                    ",", "318", ",", "319", ",", "320", ",", "321", ",", 
                    "322", ",", "323", ",", "324", ",", "325", ",", "326", 
                    ",", "327", ",", "328", ",", "329", ",", "330", ",", 
                    "331", ",", "332", ",", "333", ",", "334", ",", "335", 
                    ",", "336", ",", "337", ",", "338", ",", "339", ",", 
                    "340", ",", "341", ",", "342", ",", "343", ",", "344", 
                    ",", "345", ",", "346", ",", "347", ",", "348", ",", 
                    "349", ",", "350", ",", "351", ",", "352", ",", "353", 
                    ",", "354", ",", "355", ",", "356", ",", "357", ",", 
                    "358", ",", "359", ",", "360", ",", "361", ",", "362", 
                    ",", "363", ",", "364", ",", "365", ",", "366", ",", 
                    "367", ",", "368", ",", "369", ",", "370", ",", "371", 
                    ",", "372", ",", "373", ",", "374", ",", "375", ",", 
                    "376", ",", "377", ",", "378", ",", "379", ",", "380", 
                    ",", "381", ",", "382", ",", "383", ",", "384", ",", 
                    "385", ",", "386", ",", "387", ",", "388", ",", "389", 
                    ",", "390", ",", "391", ",", "392", ",", "393", ",", 
                    "394", ",", "395", ",", "396", ",", "397", ",", "398", 
                    ",", "399", ",", "400", ",", "401", ",", "402", ",", 
                    "403", ",", "404", ",", "405", ",", "406", ",", "407", 
                    ",", "408", ",", "409", ",", "410", ",", "411", ",", 
                    "412", ",", "413", ",", "414", ",", "415", ",", "416", 
                    ",", "417", ",", "418", ",", "419", ",", "420", ",", 
                    "421", ",", "422", ",", "423", ",", "424", ",", "425", 
                    ",", "426", ",", "427", ",", "428", ",", "429", ",", 
                    "430", ",", "431", ",", "432", ",", "433", ",", "434", 
                    ",", "435", ",", "436", ",", "437", ",", "438", ",", 
                    "439", ",", "440", ",", "441", ",", "442", ",", "443", 
                    ",", "444", ",", "445", ",", "446", ",", "447", ",", 
                    "448", ",", "449", ",", "450", ",", "451", ",", "452", 
                    ",", "453", ",", "454", ",", "455", ",", "456", ",", 
                    "457", ",", "458", ",", "459", ",", "460", ",", "461", 
                    ",", "462", ",", "463", ",", "464", ",", "465", ",", 
                    "466", ",", "467", ",", "468", ",", "469", ",", "470", 
                    ",", "471", ",", "472", ",", "473", ",", "474", ",", 
                    "475", ",", "476", ",", "477", ",", "478", ",", "479", 
                    ",", "480", ",", "481", ",", "482", ",", "483", ",", 
                    "484", ",", "485", ",", "486", ",", "487", ",", "488", 
                    ",", "489", ",", "490", ",", "491", ",", "492", ",", 
                    "493", ",", "494", ",", "495", ",", "496", ",", "497", 
                    ",", "498", ",", "499", ",", "500", ",", "501", ",", 
                    "502", ",", "503", ",", "504", ",", "505", ",", "506", 
                    ",", "507", ",", "508", ",", "509", ",", "510", ",", 
                    "511", ",", "512", ",", "513", ",", "514", ",", "515", 
                    ",", "516", ",", "517", ",", "518", ",", "519", ",", 
                    "520", ",", "521", ",", "522", ",", "523", ",", "524", 
                    ",", "525", ",", "526", ",", "527", ",", "528", ",", 
                    "529", ",", "530", ",", "531", ",", "532", ",", "533", 
                    ",", "534", ",", "535", ",", "536", ",", "537", ",", 
                    "538", ",", "539", ",", "540", ",", "541", ",", "542", 
                    ",", "543", ",", "544", ",", "545", ",", "546", ",", 
                    "547", ",", "548", ",", "549", ",", "550", ",", "551", 
                    ",", "552", ",", "553", ",", "554", ",", "555", ",", 
                    "556", ",", "557", ",", "558", ",", "559", ",", "560", 
                    ",", "561", ",", "562", ",", "563", ",", "564", ",", 
                    "565", ",", "566", ",", "567", ",", "568", ",", "569", 
                    ",", "570", ",", "571", ",", "572", ",", "573", ",", 
                    "574", ",", "575", ",", "576", ",", "577", ",", "578", 
                    ",", "579", ",", "580", ",", "581", ",", "582", ",", 
                    "583", ",", "584", ",", "585", ",", "586", ",", "587", 
                    ",", "588", ",", "589", ",", "590", ",", "591", ",", 
                    "592", ",", "593", ",", "594", ",", "595", ",", "596", 
                    ",", "597", ",", "598", ",", "599", ",", "600", ",", 
                    "601", ",", "602", ",", "603", ",", "604", ",", "605", 
                    ",", "606", ",", "607", ",", "608", ",", "609", ",", 
                    "610", ",", "611", ",", "612", ",", "613", ",", "614", 
                    ",", "615", ",", "616", ",", "617", ",", "618", ",", 
                    "619", ",", "620", ",", "621", ",", "622", ",", "623", 
                    ",", "624", ",", "625", ",", "626", ",", "627", ",", 
                    "628", ",", "629", ",", "630", ",", "631", ",", "632", 
                    ",", "633", ",", "634", ",", "635", ",", "636", ",", 
                    "637", ",", "638", ",", "639", ",", "640", ",", "641", 
                    ",", "642", ",", "643", ",", "644", ",", "645", ",", 
                    "646", ",", "647", ",", "648", ",", "649", ",", "650", 
                    ",", "651", ",", "652", ",", "653", ",", "654", ",", 
                    "655", ",", "656", ",", "657", ",", "658", ",", "659", 
                    ",", "660", ",", "661", ",", "662", ",", "663", ",", 
                    "664", ",", "665", ",", "666", ",", "667", ",", "668", 
                    ",", "669", ",", "670", ",", "671", ",", "672", ",", 
                    "673", ",", "674", ",", "675", ",", "676", ",", "677", 
                    ",", "678", ",", "679", ",", "680", ",", "681", ",", 
                    "682", ",", "683", ",", "684", ",", "685", ",", "686", 
                    ",", "687", ",", "688", ",", "689", ",", "690", ",", 
                    "691", ",", "692", ",", "693", ",", "694", ",", "695", 
                    ",", "696", ",", "697", ",", "698", ",", "699", ",", 
                    "700", ",", "701", ",", "702", ",", "703", ",", "704", 
                    ",", "705", ",", "706", ",", "707", ",", "708", ",", 
                    "709", ",", "710", ",", "711", ",", "712", ",", "713", 
                    ",", "714", ",", "715", ",", "716", ",", "717", ",", 
                    "718", ",", "719", ",", "720", ",", "721", ",", "722", 
                    ",", "723", ",", "724", ",", "725", ",", "726", ",", 
                    "727", ",", "728", ",", "729", ",", "730", ",", "731", 
                    ",", "732", ",", "733", ",", "734", ",", "735", ",", 
                    "736", ",", "737", ",", "738", ",", "739", ",", "740", 
                    ",", "741", ",", "742", ",", "743", ",", "744", ",", 
                    "745", ",", "746", ",", "747", ",", "748", ",", "749", 
                    ",", "750", ",", "751", ",", "752", ",", "753", ",", 
                    "754", ",", "755", ",", "756", ",", "757", ",", "758", 
                    ",", "759", ",", "760", ",", "761", ",", "762", ",", 
                    "763", ",", "764", ",", "765", ",", "766", ",", "767", 
                    ",", "768", ",", "769", ",", "770", ",", "771", ",", 
                    "772", ",", "773", ",", "774", ",", "775", ",", "776", 
                    ",", "777", ",", "778", ",", "779", ",", "780", ",", 
                    "781", ",", "782", ",", "783", ",", "784", ",", "785", 
                    ",", "786", ",", "787", ",", "788", ",", "789", ",", 
                    "790", ",", "791", ",", "792", ",", "793", ",", "794", 
                    ",", "795", ",", "796", ",", "797", ",", "798", ",", 
                    "799", ",", "800", ",", "801", ",", "802", ",", "803", 
                    ",", "804", ",", "805", ",", "806", ",", "807", ",", 
                    "808", ",", "809", ",", "810", ",", "811", ",", "812", 
                    ",", "813", ",", "814", ",", "815", ",", "816", ",", 
                    "817", ",", "818", ",", "819", ",", "820", ",", "821", 
                    ",", "822", ",", "823", ",", "824", ",", "825", ",", 
                    "826", ",", "827", ",", "828", ",", "829", ",", "830", 
                    ",", "831", ",", "832", ",", "833", ",", "834", ",", 
                    "835", ",", "836", ",", "837", ",", "838", ",", "839", 
                    ",", "840", ",", "841", ",", "842", ",", "843", ",", 
                    "844", ",", "845", ",", "846", ",", "847", ",", "848", 
                    ",", "849", ",", "850", ",", "851", ",", "852", ",", 
                    "853", ",", "854", ",", "855", ",", "856", ",", "857", 
                    ",", "858", ",", "859", ",", "860", ",", "861", ",", 
                    "862", ",", "863", ",", "864", ",", "865", ",", "866", 
                    ",", "867", ",", "868", ",", "869", ",", "870", ",", 
                    "871", ",", "872", ",", "873", ",", "874", ",", "875", 
                    ",", "876", ",", "877", ",", "878", ",", "879", ",", 
                    "880", ",", "881", ",", "882", ",", "883", ",", "884", 
                    ",", "885", ",", "886", ",", "887", ",", "888", ",", 
                    "889", ",", "890", ",", "891", ",", "892", ",", "893", 
                    ",", "894", ",", "895", ",", "896", ",", "897", ",", 
                    "898", ",", "899", ",", "900", ",", "901", ",", "902", 
                    ",", "903", ",", "904", ",", "905", ",", "906", ",", 
                    "907", ",", "908", ",", "909", ",", "910", ",", "911", 
                    ",", "912", ",", "913", ",", "914", ",", "915", ",", 
                    "916", ",", "917", ",", "918", ",", "919", ",", "920", 
                    ",", "921", ",", "922", ",", "923", ",", "924", ",", 
                    "925", ",", "926", ",", "927", ",", "928", ",", "929", 
                    ",", "930", ",", "931", ",", "932", ",", "933", ",", 
                    "934", ",", "935", ",", "936", ",", "937", ",", "938", 
                    ",", "939", ",", "940", ",", "941", ",", "942", ",", 
                    "943", ",", "944", ",", "945", ",", "946", ",", "947", 
                    ",", "948", ",", "949", ",", "950", ",", "951", ",", 
                    "952", ",", "953", ",", "954", ",", "955", ",", "956", 
                    ",", "957", ",", "958", ",", "959", ",", "960", ",", 
                    "961", ",", "962", ",", "963", ",", "964", ",", "965", 
                    ",", "966", ",", "967", ",", "968", ",", "969", ",", 
                    "970", ",", "971", ",", "972", ",", "973", ",", "974", 
                    ",", "975", ",", "976", ",", "977", ",", "978", ",", 
                    "979", ",", "980", ",", "981", ",", "982", ",", "983", 
                    ",", "984", ",", "985", ",", "986", ",", "987", ",", 
                    "988", ",", "989", ",", "990", ",", "991", ",", "992", 
                    ",", "993", ",", "994", ",", "995", ",", "996", ",", 
                    "997", ",", "998", ",", "999", ",", "1000"}], "}"}], 
                    "]"}], "]"}]}], "\[RightAssociation]"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["80848", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
                    "HeldExpression" -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[Image]], ImageQ]], 
                    "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`fib[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]], "HeldPattern" -> Hold[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[Image]], ImageQ]]], 
                    "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                   HoldForm], "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "ArgumentMatchFailure", <|
   "MessageTemplate" -> 
    "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
      HoldForm[
       PatternTest[
        Pattern[$CellContext`img, 
         Blank[Image]], ImageQ]], "first", 
      HoldForm[
       $CellContext`fib[
        PatternTest[
         Pattern[$CellContext`img, 
          Blank[Image]], ImageQ]]], 
      HoldForm[
       Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
        "]]]}, "Type" -> "Normal", "HeadSubmatch" -> 
    Success["Match", <|
      "Pattern" -> HoldForm[$CellContext`fib], "Expression" -> 
       HoldForm[$CellContext`fib], "Bindings" -> <||>, "MatchBranch" -> 
       IconizedObject[
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`fib], "HeldPattern" -> Hold[$CellContext`fib], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
         Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
      Failure[
      "PatternTestMatchFailure", <|
       "MessageTemplate" -> 
        "Expected an expression satisfying `2`, but found `1` instead.", 
        "MessageParameters" -> {
          HoldForm[
           Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
            "]]], ImageQ}, "Type" -> "PatternTest", "TestResults" -> {False}, 
        "Submatch" -> Success["Match", <|"Pattern" -> HoldForm[
             Pattern[$CellContext`img, 
              Blank[Image]]], "Expression" -> HoldForm[
             Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
              "]]], "Bindings" -> <|$CellContext`img -> Hold[
               Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                "]]]|>, "MatchBranch" -> IconizedObject[
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Pattern", 
               "Arguments" -> <|
                "Submatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                 "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
               Hold[
                 Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                  "]]], "HeldPattern" -> Hold[
                 Pattern[$CellContext`img, 
                  Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                   Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
             Automatic, Method -> Automatic]|>], 
        "Bindings" -> <|$CellContext`img -> Hold[
            Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
             "]]]|>, "MatchBranch" -> IconizedObject[
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "PatternTest", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                 Hold[
                   Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                   Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
            "HeldExpression" -> Hold[
              Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
               "]]], "HeldPattern" -> Hold[
              PatternTest[
               Pattern[$CellContext`img, 
                Blank[Image]], ImageQ]], 
            "Bindings" -> <|$CellContext`img -> Hold[
                Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                 "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
          Automatic, Method -> Automatic]|>]}, 
    "Bindings" -> <|$CellContext`img -> Hold[
        Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
         "]]]|>, "MatchBranch" -> IconizedObject[
      ChristopherWolfram`PatternErrors`MatchBranchObject[<|
       "Type" -> "Normal", 
        "Arguments" -> <|
         "HeadSubmatch" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`fib], "HeldPattern" -> Hold[$CellContext`fib], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], "ArgumentSubmatches" -> {
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "PatternTest", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Blank[Image]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                   Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[Image]]], "Bindings" -> <|$CellContext`img -> Hold[
                    Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                    "]]]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
              "HeldExpression" -> Hold[
                Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                 "]]], "HeldPattern" -> Hold[
                PatternTest[
                 Pattern[$CellContext`img, 
                  Blank[Image]], ImageQ]], 
              "Bindings" -> <|$CellContext`img -> Hold[
                  Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
                   "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
          "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
          $CellContext`fib[
           Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
            "]]]], "HeldPattern" -> Hold[
          $CellContext`fib[
           PatternTest[
            Pattern[$CellContext`img, 
             Blank[Image]], ImageQ]]], 
        "Bindings" -> <|$CellContext`img -> Hold[
            Image[CompressedData["
1:eJwl12O3GIYSBdAb27Zt27Zt27Zt27Zt27bdxk7bvJ31Puw18wfOIFHjDpXb
BwoICHgZJCDgTw2MNiAowQhOCEISitCEISzhCE8EIhKJyEQhKtGITgxiEovY
xCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zk
IS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tSh
LvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv
/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7z
mM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vY
zwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1ucovb3OEu97jP
Ax7yiMc84SnPeM4LXvKK17zhL/7mLe94zwc+8onPfOEr3/jOD37yi3/4l//4
zZ/wByIwQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKT
gIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOA
ghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CG
NKIxTWhKM5rTgpa0ojVtaEs7/gzvDnSkE53pQle60Z0e9KQXvelDX/rRnwEM
ZBCDGcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxk
EYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQ
hznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGP
ecJTnvGcF7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/iz8Q
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUp
QlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlC
U5rRnBa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1/8zVve8Z4PfOQTn/nCV77xnR/85Bf/8C//8Zs/R38gAhOEoAQj
OCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5
KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozgl
KEkpSlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1o
SSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJ
KEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkq
VrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlO
c4aznOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L4L8/z//
H/1t8H0=
             "]]]|>, "MatchedQ" -> False, "BaseMatchedQ" -> True|>], 
      Automatic, Method -> Automatic]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8837362869678593`*^9, 3.8837362920212097`*^9}},
 CellLabel->"Out[50]=",
 CellID->2111690148,ExpressionUUID->"00b7f858-42e9-47c2-99ca-0b44b9f63fcc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.883702542607958*^9, 3.883702544646863*^9}},
 CellLabel->"In[43]:=",
 CellID->1722098797,ExpressionUUID->"42310e5d-890f-42ff-9445-4cec1f805bb8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"img_\\\", \\\"?\\\", \\\"ImageQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \
RowBox[{\\\"img_\\\", \\\"?\\\", \\\"ImageQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"x\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"img_\\\", \\\"?\\\", \\\"ImageQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \
RowBox[{\\\"img_\\\", \\\"?\\\", \\\"ImageQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"x\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`fib], "Expression" -> 
                    HoldForm[$CellContext`fib], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"ImageQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"ImageQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"PatternTest\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"TestResults\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", "False", "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["img_", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["img_", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"img", "\[Rule]", 
                    RowBox[{"Hold", "[", "x", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3904", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], SelectWithContents -> True, 
                    Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`img, 
                    Blank[]]], "Expression" -> HoldForm[$CellContext`x], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"img", "\[Rule]", 
                    RowBox[{"Hold", "[", "x", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["6536", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {False}, 
                    "TestFunction" -> ImageQ|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[]], ImageQ]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], SelectWithContents -> True, 
                    Selectable -> False], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "PatternTestMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected an expression satisfying `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[$CellContext`x], ImageQ}, "Type" -> 
                    "PatternTest", "TestResults" -> {False}, "Submatch" -> 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`img, 
                    Blank[]]], "Expression" -> HoldForm[$CellContext`x], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {False}, 
                    "TestFunction" -> ImageQ|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[]], ImageQ]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "}"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{"img", "\[Rule]", 
                    RowBox[{"Hold", "[", "x", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["11184", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {False}, 
                    "TestFunction" -> ImageQ|>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[]], ImageQ]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>,
                     "HeldExpression" -> Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`img, 
                    Blank[]], ImageQ]]], 
                    "Bindings" -> <|$CellContext`img -> 
                    Hold[$CellContext`x]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], SelectWithContents -> True, 
                    Selectable -> False], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "ArgumentMatchFailure", <|
   "MessageTemplate" -> 
    "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
      HoldForm[
       PatternTest[
        Pattern[$CellContext`img, 
         Blank[]], ImageQ]], "first", 
      HoldForm[
       $CellContext`fib[
        PatternTest[
         Pattern[$CellContext`img, 
          Blank[]], ImageQ]]], 
      HoldForm[$CellContext`x]}, "Type" -> "Normal", "HeadSubmatch" -> 
    Success["Match", <|
      "Pattern" -> HoldForm[$CellContext`fib], "Expression" -> 
       HoldForm[$CellContext`fib], "Bindings" -> <||>, "MatchBranch" -> 
       IconizedObject[
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`fib], "HeldPattern" -> Hold[$CellContext`fib], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
         Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
      Failure[
      "PatternTestMatchFailure", <|
       "MessageTemplate" -> 
        "Expected an expression satisfying `2`, but found `1` instead.", 
        "MessageParameters" -> {
          HoldForm[$CellContext`x], ImageQ}, "Type" -> "PatternTest", 
        "TestResults" -> {False}, "Submatch" -> 
        Success["Match", <|"Pattern" -> HoldForm[
             Pattern[$CellContext`img, 
              Blank[]]], "Expression" -> HoldForm[$CellContext`x], 
           "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
           "MatchBranch" -> IconizedObject[
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Pattern", 
               "Arguments" -> <|
                "Submatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                 "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
               Hold[$CellContext`x], "HeldPattern" -> Hold[
                 Pattern[$CellContext`img, 
                  Blank[]]], 
               "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
               "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
             Method -> Automatic]|>], 
        "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
        "MatchBranch" -> IconizedObject[
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "PatternTest", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                 Hold[$CellContext`x], "HeldPattern" -> Hold[
                   Pattern[$CellContext`img, 
                    Blank[]]], 
                 "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
            "HeldExpression" -> Hold[$CellContext`x], "HeldPattern" -> Hold[
              PatternTest[
               Pattern[$CellContext`img, 
                Blank[]], ImageQ]], 
            "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
            "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Automatic, 
          Method -> Automatic]|>]}, 
    "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, "MatchBranch" -> 
    IconizedObject[
      ChristopherWolfram`PatternErrors`MatchBranchObject[<|
       "Type" -> "Normal", 
        "Arguments" -> <|
         "HeadSubmatch" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`fib], "HeldPattern" -> Hold[$CellContext`fib], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], "ArgumentSubmatches" -> {
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "PatternTest", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`img|>, "HeldExpression" -> 
                   Hold[$CellContext`x], "HeldPattern" -> Hold[
                    Pattern[$CellContext`img, 
                    Blank[]]], 
                   "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>,
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                "TestResults" -> {False}, "TestFunction" -> ImageQ|>, 
              "HeldExpression" -> Hold[$CellContext`x], "HeldPattern" -> 
              Hold[
                PatternTest[
                 Pattern[$CellContext`img, 
                  Blank[]], ImageQ]], 
              "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
              "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}, 
          "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
          $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
          $CellContext`fib[
           PatternTest[
            Pattern[$CellContext`img, 
             Blank[]], ImageQ]]], 
        "Bindings" -> <|$CellContext`img -> Hold[$CellContext`x]|>, 
        "MatchedQ" -> False, "BaseMatchedQ" -> True|>], Automatic, Method -> 
      Automatic]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.883702545205187*^9, 3.8837025933727217`*^9}, 
   3.883703076933239*^9, 3.8837346768338203`*^9, 3.8837360957653427`*^9, 
   3.88373612788892*^9},
 CellLabel->"Out[43]=",
 CellID->651447671,ExpressionUUID->"5d72c80c-ebf7-4713-898f-1cf5650fae46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", 
  RowBox[{"-", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8837030836042643`*^9, 3.883703086666377*^9}},
 CellLabel->"In[39]:=",
 CellID->114133737,ExpressionUUID->"68106f31-6921-4b67-85b2-21670e97764d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"x_Integer\\\", \\\"?\\\", \\\"Positive\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \
RowBox[{\\\"x_Integer\\\", \\\"?\\\", \\\"Positive\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[RowBox[{\\\"-\\\", \
\\\"1\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"x_Integer\\\", \\\"?\\\", \\\"Positive\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \
RowBox[{\\\"x_Integer\\\", \\\"?\\\", \\\"Positive\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[RowBox[{\\\"-\\\", \
\\\"1\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["fib", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`fib], "Expression" -> 
                    HoldForm[$CellContext`fib], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"Positive\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"-\\\", \\\"1\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"Positive\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"-\\\", \\\"1\\\"}], Function[Short[Slot[1], \
5]]]\\) instead.\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"PatternTest\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"TestResults\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", "False", "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x_Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x_Integer", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"-", "1"}], "]"}]}], "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4080", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Expression" -> HoldForm[-1], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"-", "1"}], "]"}]}], "\[RightAssociation]"}], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["6824", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "TestResults" -> {False},
                     "TestFunction" -> Positive|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "PatternTestMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected an expression satisfying `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[-1], Positive}, "Type" -> "PatternTest", 
                    "TestResults" -> {False}, "Submatch" -> 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Expression" -> HoldForm[-1], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "TestResults" -> {False},
                     "TestFunction" -> Positive|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "}"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"-", "1"}], "]"}]}], "\[RightAssociation]"}], 
                   HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["11728", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`fib], "HeldPattern" -> 
                    Hold[$CellContext`fib], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "TestResults" -> {False},
                     "TestFunction" -> Positive|>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`fib[-1]], "HeldPattern" -> Hold[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "ArgumentMatchFailure", <|
   "MessageTemplate" -> 
    "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
      HoldForm[
       PatternTest[
        Pattern[$CellContext`x, 
         Blank[Integer]], Positive]], "first", 
      HoldForm[
       $CellContext`fib[
        PatternTest[
         Pattern[$CellContext`x, 
          Blank[Integer]], Positive]]], 
      HoldForm[-1]}, "Type" -> "Normal", "HeadSubmatch" -> 
    Success["Match", <|
      "Pattern" -> HoldForm[$CellContext`fib], "Expression" -> 
       HoldForm[$CellContext`fib], "Bindings" -> <||>, "MatchBranch" -> 
       IconizedObject[
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[$CellContext`fib], "HeldPattern" -> Hold[$CellContext`fib], 
           "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
         Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
      Failure[
      "PatternTestMatchFailure", <|
       "MessageTemplate" -> 
        "Expected an expression satisfying `2`, but found `1` instead.", 
        "MessageParameters" -> {
          HoldForm[-1], Positive}, "Type" -> "PatternTest", 
        "TestResults" -> {False}, "Submatch" -> 
        Success["Match", <|"Pattern" -> HoldForm[
             Pattern[$CellContext`x, 
              Blank[Integer]]], "Expression" -> HoldForm[-1], 
           "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchBranch" -> 
           IconizedObject[
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Pattern", 
               "Arguments" -> <|
                "Submatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                 "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
               Hold[-1], "HeldPattern" -> Hold[
                 Pattern[$CellContext`x, 
                  Blank[Integer]]], 
               "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
               True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
             Automatic]|>], "Bindings" -> <|$CellContext`x -> Hold[-1]|>, 
        "MatchBranch" -> IconizedObject[
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "PatternTest", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[-1], "HeldPattern" -> Hold[
                   Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                 "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], "TestResults" -> {False}, 
              "TestFunction" -> Positive|>, "HeldExpression" -> Hold[-1], 
            "HeldPattern" -> Hold[
              PatternTest[
               Pattern[$CellContext`x, 
                Blank[Integer]], Positive]], 
            "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> False,
             "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>]}, 
    "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchBranch" -> 
    IconizedObject[
      ChristopherWolfram`PatternErrors`MatchBranchObject[<|
       "Type" -> "Normal", 
        "Arguments" -> <|
         "HeadSubmatch" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`fib], "HeldPattern" -> Hold[$CellContext`fib], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], "ArgumentSubmatches" -> {
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "PatternTest", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[-1], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[-1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], "TestResults" -> {False}, 
                "TestFunction" -> Positive|>, "HeldExpression" -> Hold[-1], 
              "HeldPattern" -> Hold[
                PatternTest[
                 Pattern[$CellContext`x, 
                  Blank[Integer]], Positive]], 
              "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>]}, 
          "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
          $CellContext`fib[-1]], "HeldPattern" -> Hold[
          $CellContext`fib[
           PatternTest[
            Pattern[$CellContext`x, 
             Blank[Integer]], Positive]]], 
        "Bindings" -> <|$CellContext`x -> Hold[-1]|>, "MatchedQ" -> False, 
        "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.88370308701589*^9, 3.8837346780288486`*^9, 
  3.883736098344357*^9},
 CellLabel->"Out[39]=",
 CellID->255434383,ExpressionUUID->"12074463-a39a-4276-9766-80cc4c102739"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib2", "[", 
   RowBox[{"x_Integer", "?", "Positive"}], "]"}], ":=", 
  RowBox[{"Fibonacci", "[", "x", "]"}]}]], "Input",
 CellChangeTimes->{{3.883676916899835*^9, 3.883676925781436*^9}},
 CellLabel->"In[6]:=",
 CellID->225753828,ExpressionUUID->"a1966b27-59dc-484d-b28c-601351f7a47e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"fib", "[", "x", "]"}], "]"}], ",", 
   RowBox[{
   "ChristopherWolfram`PatternErrors`SetFallthrough`Private`\
downValuesPattern", "[", "fib2", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.883675921857801*^9, 3.883675924361689*^9}, {
   3.883676927416294*^9, 3.88367693755917*^9}, 3.8836772777799587`*^9},
 CellLabel->"In[23]:=",
 CellID->1679799269,ExpressionUUID->"edb4842a-423e-49b3-a345-5f72f7422834"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{"\"MatchInformationObject[\"", 
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = 1}, 
      InterpretationBox[
       TagBox[
        PanelBox[
         GridBox[{{
            ItemBox[
             PopupMenuBox[
              Dynamic[Typeset`var$$], {1 -> TemplateBox[{
                  StyleBox[
                   TagBox["fib2", HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"?\"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["Positive", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                 "RowDefault"]}, DefaultMenuStyle -> "MenuViewLabel", Enabled -> 
              Automatic, MenuStyle -> {}], Alignment -> Left, StripOnInput -> 
             False]}, {
            ItemBox[
             StyleBox[
              PaneSelectorBox[{1 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected head matching \
\\!\\(\\*TagBox[\\\"\\\\\\\"HeldPattern\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\), but found \\!\\(\\*TagBox[\\\"\\\\\\\"HeldExpression\\\\\\\"\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["fib2", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"?\"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["Positive", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    GridBox[{{
                    "\"Expected head matching \
\\!\\(\\*TagBox[\\\"\\\\\\\"HeldPattern\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\), but found \\!\\(\\*TagBox[\\\"\\\\\\\"HeldExpression\\\\\\\"\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox[
                    TagBox["fib2", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"?\"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["Positive", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"fib2\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"Hold\\\", Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["fib2", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[Hold], "HeldPattern" -> Hold[$CellContext`fib2], 
                    "Bindings" -> <||>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]]}, "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"Positive\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \\\"x\\\", \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"?\"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["Positive", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"Positive\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \\\"x\\\", \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"?\"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox["Positive", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Test results: \"", 
                    RowBox[{"{", 
                    RowBox[{"Positive", "[", 
                    RowBox[{"HeldMatchInformation", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"fib", "[", "x", "]"}], "]"}], ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"fib", "[", 
                    RowBox[{"x_Integer", "?", "Positive"}], "]"}], "]"}]}], 
                    "]"}], "]"}], "}"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TagBox[
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"_Integer\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \\\"x\\\", \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TagBox[
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"_Integer\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \\\"x\\\", \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Expected expression matching \
\\!\\(\\*TagBox[\\\"_Integer\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"fib\\\", \\\"[\\\", \\\"x\\\", \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) instead.\""}, {
                    StyleBox[
                    TagBox["_Integer", HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]]}, "RowDefault"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected expression matching \!\(\*TagBox[\"_Integer\", \
Function[Short[Slot[1], 5]]]\), but found \!\(\*TagBox[RowBox[{\"fib\", \
\"[\", \"x\", \"]\"}], Function[Short[Slot[1], 5]]]\) instead.", 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    HoldForm[
                    Blank[Integer]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected an expression satisfying \
\!\(\*TagBox[\"Positive\", Function[Short[Slot[1], 5]]]\), but found \
\!\(\*TagBox[RowBox[{\"fib\", \"[\", \"x\", \"]\"}], Function[Short[Slot[1], \
5]]]\) instead.", 
                    Row[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    HoldForm[
                    Blank[Integer]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}], 
                    Style["?", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[Positive, 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Test results: ", {
                    Positive[
                    ChristopherWolfram`PatternErrors`HeldMatchInformation[
                    Hold[
                    $CellContext`fib[$CellContext`x]], 
                    HoldPattern[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {
                    Positive[
                    ChristopherWolfram`PatternErrors`HeldMatchInformation[
                    Hold[
                    $CellContext`fib[$CellContext`x]], 
                    HoldPattern[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}, "TestFunction" -> 
                    Positive|>, "HeldExpression" -> Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]]}}, DefaultBaseStyle -> 
                    "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {
                    Positive[
                    ChristopherWolfram`PatternErrors`HeldMatchInformation[
                    Hold[
                    $CellContext`fib[$CellContext`x]], 
                    HoldPattern[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}, "TestFunction" -> 
                    Positive|>, "HeldExpression" -> Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Expected head matching \
\!\(\*TagBox[\"\\\"HeldPattern\\\"\", Function[Short[Slot[1], 5]]]\), but \
found \!\(\*TagBox[\"\\\"HeldExpression\\\"\", Function[Short[Slot[1], 5]]]\) \
instead.", 
                    Row[{
                    Style[
                    HoldForm[$CellContext`fib2], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    HoldForm[
                    Blank[Integer]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}], 
                    Style["?", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[Positive, 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[Hold], "HeldPattern" -> Hold[$CellContext`fib2], 
                    "Bindings" -> <||>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {
                    Positive[
                    ChristopherWolfram`PatternErrors`HeldMatchInformation[
                    Hold[
                    $CellContext`fib[$CellContext`x]], 
                    HoldPattern[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}, "TestFunction" -> 
                    Positive|>, "HeldExpression" -> Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]}]}]}]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[Hold], "HeldPattern" -> Hold[$CellContext`fib2], 
                    "Bindings" -> <||>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {
                    Positive[
                    ChristopherWolfram`PatternErrors`HeldMatchInformation[
                    Hold[
                    $CellContext`fib[$CellContext`x]], 
                    HoldPattern[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}, "TestFunction" -> 
                    Positive|>, "HeldExpression" -> Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                    "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>,
                     "HeldExpression" -> Hold[
                    Hold[
                    $CellContext`fib[$CellContext`x]]], "HeldPattern" -> 
                    Hold[
                    $CellContext`fib2[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>]]}, 
               Dynamic[Typeset`var$$], Alignment -> {Left, Top}, ImageSize -> 
               All, TransitionDirection -> Horizontal, TransitionDuration -> 
               0.5, TransitionEffect -> Automatic], Deployed -> False, 
              StripOnInput -> False], Background -> GrayLevel[1], Frame -> 
             True, FrameStyle -> GrayLevel[0.8235294117647058], StripOnInput -> 
             False]}}, AutoDelete -> False, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
         BaseStyle -> {}, BaselinePosition -> Automatic, DefaultBaseStyle -> 
         "MenuView", FrameMargins -> 6, ImageMargins -> Automatic], Deploy, 
        DefaultBaseStyle -> "Deploy"], 
       MenuView[{Row[{
            Style[
             HoldForm[$CellContext`fib2], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style["[", 
             RGBColor[{
               Rational[92, 255], 
               Rational[152, 255], 
               Rational[97, 255]}]], 
            Row[{
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 HoldForm[
                  Blank[Integer]], 
                 RGBColor[{
                   Rational[43, 85], 
                   Rational[43, 255], 
                   Rational[38, 255]}]]}], 
              Style["?", 
               RGBColor[{
                 Rational[43, 85], 
                 Rational[43, 255], 
                 Rational[38, 255]}]], 
              Style[Positive, 
               RGBColor[{
                 Rational[43, 85], 
                 Rational[43, 255], 
                 Rational[38, 255]}]]}], 
            Style["]", 
             RGBColor[{
               Rational[92, 255], 
               Rational[152, 255], 
               Rational[97, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Normal", 
            "Arguments" -> <|
             "HeadSubmatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[Hold], "HeldPattern" -> Hold[$CellContext`fib2], 
                 "Bindings" -> <||>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                 False|>], "ArgumentSubmatches" -> {
                
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "PatternTest", 
                  "Arguments" -> <|
                   "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], "TestResults" -> {
                    Positive[
                    ChristopherWolfram`PatternErrors`HeldMatchInformation[
                    Hold[
                    $CellContext`fib[$CellContext`x]], 
                    HoldPattern[
                    $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}, "TestFunction" -> 
                    Positive|>, "HeldExpression" -> Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]], 
                  "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                  "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>, 
            "HeldExpression" -> Hold[
              Hold[
               $CellContext`fib[$CellContext`x]]], "HeldPattern" -> Hold[
              $CellContext`fib2[
               PatternTest[
                Pattern[$CellContext`x, 
                 Blank[Integer]], Positive]]], 
            "Bindings" -> <|$CellContext`x -> Hold[
                $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
            "BaseMatchedQ" -> True|>]}]], DynamicModuleValues :> {}], 
     Setting[#, {0}]& ], "\"]\""},
   "RowDefault"],
  ChristopherWolfram`PatternErrors`MatchInformationObject[{
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Normal", 
      "Arguments" -> <|
       "HeadSubmatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
           Hold[Hold], "HeldPattern" -> Hold[$CellContext`fib2], 
           "Bindings" -> <||>, "MatchedQ" -> False, "BaseMatchedQ" -> 
           False|>], "ArgumentSubmatches" -> {
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "PatternTest", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[
                    $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                    Blank[Integer]], "Bindings" -> <||>, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[
                   $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
                   Pattern[$CellContext`x, 
                    Blank[Integer]]], "Bindings" -> <|$CellContext`x -> Hold[
                    $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
                 "BaseMatchedQ" -> True|>], "TestResults" -> {
                Positive[
                 ChristopherWolfram`PatternErrors`HeldMatchInformation[
                  Hold[
                   $CellContext`fib[$CellContext`x]], 
                  HoldPattern[
                   $CellContext`fib[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[Integer]], Positive]]]]]}, "TestFunction" -> 
              Positive|>, "HeldExpression" -> Hold[
              $CellContext`fib[$CellContext`x]], "HeldPattern" -> Hold[
              PatternTest[
               Pattern[$CellContext`x, 
                Blank[Integer]], Positive]], 
            "Bindings" -> <|$CellContext`x -> Hold[
                $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
            "BaseMatchedQ" -> False|>]}, "BindingConflicts" -> <||>|>, 
      "HeldExpression" -> Hold[
        Hold[
         $CellContext`fib[$CellContext`x]]], "HeldPattern" -> Hold[
        $CellContext`fib2[
         PatternTest[
          Pattern[$CellContext`x, 
           Blank[Integer]], Positive]]], 
      "Bindings" -> <|$CellContext`x -> Hold[
          $CellContext`fib[$CellContext`x]]|>, "MatchedQ" -> False, 
      "BaseMatchedQ" -> True|>]}]]], "Output",
 CellChangeTimes->{
  3.883676937923527*^9, 3.8836770642778807`*^9, {3.883677266093522*^9, 
   3.883677278125299*^9}, 3.8837024793387203`*^9},
 CellLabel->"Out[23]=",
 CellID->2143405440,ExpressionUUID->"75724db5-df71-4c74-b325-26f465698425"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.8836751319565687`*^9, 3.883675133027907*^9}},
 CellLabel->"In[24]:=",
 CellID->1275622945,ExpressionUUID->"c926e4ef-be52-4bcd-a4d4-13211e159b2c"],

Cell[BoxData[
 RowBox[{"HeldMatchInformation", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"fib", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"HoldPattern", "[", 
    RowBox[{"fib", "[", 
     RowBox[{"x_Integer", "?", "Positive"}], "]"}], "]"}]}], "]"}]], "Output",
 
 CellChangeTimes->{3.8836751335396*^9, 3.883675871817648*^9, 
  3.883702482983852*^9},
 CellLabel->"Out[24]=",
 CellID->359274847,ExpressionUUID->"763e0f6d-0b90-487d-80f7-0ee3c08f643d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<StyledPattern\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "2", ",", "True", ",", "4"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__Integer", ",", "y___"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.88238078425666*^9, 3.882380811074664*^9}, {
  3.882380968792877*^9, 3.8823809784976597`*^9}, {3.8823816529054403`*^9, 
  3.8823816726900787`*^9}, {3.882466997369945*^9, 3.882467001657627*^9}},
 CellLabel->"In[3]:=",
 CellID->1730586326,ExpressionUUID->"ba1560f5-2f0a-47cd-a61c-3eda91f26a03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     StyleBox["f", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["___", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["___", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[{
          Rational[43, 85], 
          Rational[43, 255], 
          Rational[38, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["___", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[{
          Rational[43, 85], 
          Rational[43, 255], 
          Rational[38, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["___", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False]},
    "RowDefault"]}], "}"}]], "Output",
 CellChangeTimes->{{3.882381659108192*^9, 3.8823816729695*^9}, 
   3.882382195118762*^9, 3.882453961742537*^9, 3.882454161578895*^9, 
   3.882466988377981*^9},
 CellLabel->"Out[3]=",
 CellID->1653376530,ExpressionUUID->"146133e7-795e-4813-91a3-adacd49dd63c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{
   RowBox[{"ReplaceAll", "[", 
    RowBox[{
     RowBox[{"Hold", "[", "cond", "]"}], ",", 
     RowBox[{"<|", 
      RowBox[{"x", "->", 
       RowBox[{"Hold", "[", "1", "]"}]}], "|>"}]}], "]"}], "[", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.882455595765383*^9, 3.88245560354049*^9}},
 CellID->516040539,ExpressionUUID->"1eac65cc-a1f3-4caa-80e6-4ea0b893efdc"],

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x__", ",", "y__"}], "}"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "x", "]"}], "===", 
     RowBox[{"Length", "[", "y", "]"}]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.882457136197625*^9, 3.882457137932823*^9}, {
  3.882457273826853*^9, 3.882457274418676*^9}},
 CellLabel->"In[5]:=",
 CellID->210685438,ExpressionUUID->"51a6dcc3-21ba-430a-87a3-c4796e5d0558"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<StyledPattern\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
      RowBox[{
       RowBox[{"Length", "[", "x", "]"}], "===", 
       RowBox[{"Length", "[", "y", "]"}]}]}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8824554716720667`*^9, 3.882455510657228*^9}, {
  3.882457286395447*^9, 3.882457290195219*^9}},
 CellLabel->"In[7]:=",
 CellID->1694421071,ExpressionUUID->"cebf09e4-d6b7-4529-8828-8d8c76edd3a2"],

Cell[BoxData[
 TemplateBox[{
  "Length", "argx", 
   "\"\\!\\(\\*RowBox[{\\\"Length\\\"}]\\) called with \\!\\(\\*RowBox[{\\\"4\
\\\"}]\\) arguments; 1 argument is expected.\"", 2, 7, 1, 
   21878159942098480610, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.88246699301528*^9, 3.8830733390197*^9, 
  3.883074710742497*^9, 3.883702361563476*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->910614236,ExpressionUUID->"bcd82d0f-bc97-4831-bf7a-151ada26b499"],

Cell[BoxData[
 TemplateBox[{
  "Length", "argx", 
   "\"\\!\\(\\*RowBox[{\\\"Length\\\"}]\\) called with \\!\\(\\*RowBox[{\\\"3\
\\\"}]\\) arguments; 1 argument is expected.\"", 2, 7, 2, 
   21878159942098480610, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.88246699301528*^9, 3.8830733390197*^9, 
  3.883074710742497*^9, 3.883702361653103*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->1292644810,ExpressionUUID->"d56d4181-60be-4242-bae1-8725d1d5dde6"],

Cell[BoxData[
 TemplateBox[{
  "Length", "argx", 
   "\"\\!\\(\\*RowBox[{\\\"Length\\\"}]\\) called with \\!\\(\\*RowBox[{\\\"2\
\\\"}]\\) arguments; 1 argument is expected.\"", 2, 7, 3, 
   21878159942098480610, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.88246699301528*^9, 3.8830733390197*^9, 
  3.883074710742497*^9, 3.883702361664939*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->1454389635,ExpressionUUID->"74b42f67-cabc-4e29-989b-bcca5fddbca5"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Length\\\", \\\"::\\\", \
\\\"argx\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 7, 4, 21878159942098480610, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.88246699301528*^9, 3.8830733390197*^9, 
  3.883074710742497*^9, 3.8837023616763353`*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->1776719911,ExpressionUUID->"33702ba5-bae6-4374-9eea-c3d862a7bd0c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     TemplateBox[{
       StyleBox[
        TagBox["List", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\"[\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["x", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["___", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\", \"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       TemplateBox[{
         StyleBox["y", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox["\":\"", 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False], 
         StyleBox[
          TagBox["__", HoldForm], 
          RGBColor[{
            Rational[92, 255], 
            Rational[152, 255], 
            Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
       StyleBox["\"]\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\" /; \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox[
       RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "===", 
         RowBox[{"Length", "[", "y", "]"}]}], HoldForm], 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"]}], "}"}]], "Output",
 CellChangeTimes->{{3.882455481588833*^9, 3.882455512754932*^9}, {
   3.8824572804888973`*^9, 3.882457291485503*^9}, 3.882457633059623*^9, 
   3.882466993075529*^9, 3.883073339128353*^9, 3.883074710857643*^9, 
   3.883702361689658*^9},
 CellLabel->"Out[7]=",
 CellID->1240635084,ExpressionUUID->"64651c82-64a4-4d40-9994-c308893cb011"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"branch", "[", "\"\<Failure\>\"", "]"}], "[", "\"\<Message\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.883070936260756*^9, 3.883070954949679*^9}},
 CellLabel->"In[22]:=",
 CellID->1082449595,ExpressionUUID->"c12d2026-ece8-4a0a-a3e6-35056a1d6703"],

Cell[BoxData["\<\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\", \
\\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"\>"], "Output",
 CellChangeTimes->{{3.883070940730853*^9, 3.883070955162108*^9}},
 CellLabel->"Out[22]=",
 CellID->934154008,ExpressionUUID->"f24a606f-e0de-4ac7-9cbb-0dc55fd9faa5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Panel", "@", 
  RowBox[{"OpenerView", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"branch", "[", "\"\<Failure\>\"", "]"}], "[", 
         "\"\<Message\>\"", "]"}], ",", 
        RowBox[{"branch", "[", "\"\<StyledPattern\>\"", "]"}]}], "}"}], "]"}],
      ",", "2"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.882466679902499*^9, 3.8824666812854843`*^9}, {
  3.883070686347612*^9, 3.883070725030385*^9}, {3.8830709607745867`*^9, 
  3.8830709893189173`*^9}},
 CellLabel->"In[26]:=",
 CellID->2030399859,ExpressionUUID->"a1840397-c324-446f-a4d1-e08e19ac5c90"],

Cell[BoxData[
 PanelBox[
  TagBox[
   DynamicModuleBox[{Typeset`var$$ = False}, 
    InterpretationBox[
     StyleBox[
      PaneSelectorBox[{False->GridBox[{
         {
          OpenerBox[Dynamic[Typeset`var$$],
           Appearance->Automatic,
           AutoAction->False,
           ContinuousAction->False,
           Enabled->Automatic], 
          TagBox[GridBox[{
             {"\<\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\", \
\\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"\>"},
             {
              TemplateBox[{
                TemplateBox[{
                  StyleBox["List", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\", \"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox["___", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 
                StyleBox["\" /; \"", 
                 RGBColor[{
                   Rational[43, 85], 
                   Rational[43, 255], 
                   Rational[38, 255]}], StripOnInput -> False], 
                StyleBox[
                 TagBox[
                  RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                 RGBColor[{
                   Rational[43, 85], 
                   Rational[43, 255], 
                   Rational[38, 255]}], StripOnInput -> False]},
               "RowDefault"]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Column"]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxBackground->{"Columns" -> {{Automatic}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
       GridBox[{
         {
          OpenerBox[Dynamic[Typeset`var$$],
           Appearance->Automatic,
           AutoAction->False,
           ContinuousAction->False,
           Enabled->Automatic], 
          TagBox[GridBox[{
             {"\<\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\", \
\\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"\>"},
             {
              TemplateBox[{
                TemplateBox[{
                  StyleBox["List", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox["\"[\"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\", \"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox["___", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox["\", \"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"]\"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 
                StyleBox["\" /; \"", 
                 RGBColor[{
                   Rational[43, 85], 
                   Rational[43, 255], 
                   Rational[38, 255]}], StripOnInput -> False], 
                StyleBox[
                 TagBox[
                  RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                 RGBColor[{
                   Rational[43, 85], 
                   Rational[43, 255], 
                   Rational[38, 255]}], StripOnInput -> False]},
               "RowDefault"]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Column"]},
         {"", 
          PaneBox["2",
           ImageMargins->0]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxBackground->{"Columns" -> {{Automatic}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
       Typeset`var$$],
       Alignment->Automatic,
       BaseStyle->{},
       BaselinePosition->Baseline,
       DefaultBaseStyle->"OpenerView",
       ImageMargins->0,
       ImageSize->Automatic],
      Deployed->False,
      StripOnInput->False],
     OpenerView[{
       Column[{
        "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \"[\", \
RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\", \"[\
\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], 5]]]\) \
not satisfied, returning \!\(\*TagBox[\"False\", Function[Short[Slot[1], 5]]]\
\).", 
         Row[{
           Row[{
             Style[List, 
              RGBColor[{
                Rational[92, 255], 
                Rational[152, 255], 
                Rational[97, 255]}]], 
             Style["[", 
              RGBColor[{
                Rational[92, 255], 
                Rational[152, 255], 
                Rational[97, 255]}]], 
             Row[{
               Style[$CellContext`x, 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]], 
               Style[":", 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]], 
               Style[
                BlankSequence[], 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]]}], 
             Style[", ", 
              RGBColor[{
                Rational[92, 255], 
                Rational[152, 255], 
                Rational[97, 255]}]], 
             Style[
              BlankNullSequence[], 
              RGBColor[{
                Rational[92, 255], 
                Rational[152, 255], 
                Rational[97, 255]}]], 
             Style[", ", 
              RGBColor[{
                Rational[92, 255], 
                Rational[152, 255], 
                Rational[97, 255]}]], 
             Row[{
               Style[$CellContext`y, 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]], 
               Style[":", 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]], 
               Style[
                BlankSequence[], 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]]}], 
             Style["]", 
              RGBColor[{
                Rational[92, 255], 
                Rational[152, 255], 
                Rational[97, 255]}]]}], 
           Style[" /; ", 
            RGBColor[{
              Rational[43, 85], 
              Rational[43, 255], 
              Rational[38, 255]}]], 
           Style[
            HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
            RGBColor[{
              Rational[43, 85], 
              Rational[43, 255], 
              Rational[38, 255]}]]}]}], 2}, False]],
    DynamicModuleValues:>{}],
   Setting[#, {0}]& ]]], "Output",
 CellChangeTimes->{{3.883070713823008*^9, 3.8830707291255198`*^9}, {
  3.883070968339519*^9, 3.883070994981214*^9}},
 CellLabel->"Out[26]=",
 CellID->1249733114,ExpressionUUID->"05d8cb3b-4c1b-411e-a126-33e93c9e627d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "x", "}"}], "]"}], "==", 
     RowBox[{"Length", "[", 
      RowBox[{"{", "y", "}"}], "]"}]}]}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1066077942,ExpressionUUID->"c46ad4b7-af95-4416-be1f-0b7dc0d733ff"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{"\"MatchInformationObject[\"", 
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = 5}, 
      InterpretationBox[
       TagBox[
        PanelBox[
         GridBox[{{
            ItemBox[
             PopupMenuBox[
              Dynamic[Typeset`var$$], {1 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 2 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 3 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 4 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 5 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 6 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 7 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 8 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 9 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"], 10 -> TemplateBox[{
                  TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\" /; \"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                 "RowDefault"]}, DefaultMenuStyle -> "MenuViewLabel", Enabled -> 
              Automatic, MenuStyle -> {}], Alignment -> Left, StripOnInput -> 
             False]}, {
            ItemBox[
             StyleBox[
              PaneSelectorBox[{1 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "True"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Condition result: ", True}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    True, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]], 2 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "True"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{
                    0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Condition result: ", True}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1], $CellContext`y -> Hold[5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}]}, False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ConditionResult" -> True, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>]],
                 3 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{
                    0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]], 4 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{
                    0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, 
                    "HeldExpression" -> Hold[List], "Pattern" -> List, 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]], 5 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]], 6 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{
                    0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]], 7 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, "RowDefault"]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}]}]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]], 8 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1], $CellContext`y -> Hold[4, 5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}]}, False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ConditionResult" -> False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]], 9 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1], $CellContext`y -> Hold[3, 4, 5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}]}, False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ConditionResult" -> False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]], 10 -> InterpretationBox[
                  PanelBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    TagBox[
                    
                    GridBox[{{
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\""}, {
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\" /; \"", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}], HoldForm], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Condition result: \"", "False"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Bindings: \"", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}]}, "RowDefault"]}, {
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\"[\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\", \"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox["\"]\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"Binding conflicts: \"", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Head submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["List", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}, 
                    "RowDefault"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Argument submatches\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    StyleBox["___", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, {
                    InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["y", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox["__", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Column[{
                    Row[{"Binding conflicts: ", <||>}], 
                    Row[{"Head submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}], 
                    OpenerView[{"Argument submatches", 
                    Column[{
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}]}]}]}, 
                    False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|"HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]]}, "RowDefault"]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    
                    Column[{
                    "Condition \!\(\*TagBox[RowBox[{RowBox[{\"Length\", \
\"[\", RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \"\[Equal]\", RowBox[{\"Length\
\", \"[\", RowBox[{\"{\", \"y\", \"}\"}], \"]\"}]}], Function[Short[Slot[1], \
5]]]\) not satisfied, returning \!\(\*TagBox[\"False\", \
Function[Short[Slot[1], 5]]]\).", 
                    Row[{
                    Row[{
                    Style[List, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style["[", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankNullSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[", ", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Row[{
                    Style[$CellContext`y, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    BlankSequence[], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style["]", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Style[" /; ", 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]], 
                    Style[
                    HoldForm[
                    Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
                    RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}]]}]}], 
                    Column[{
                    Row[{"Condition result: ", False}], 
                    
                    Row[{"Bindings: ", <|$CellContext`x -> 
                    Hold[1], $CellContext`y -> Hold[2, 3, 4, 5]|>}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>]}]}]}, False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]], 
                  
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ConditionResult" -> False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]]}, 
               Dynamic[Typeset`var$$], Alignment -> {Left, Top}, ImageSize -> 
               All, TransitionDirection -> Horizontal, TransitionDuration -> 
               0.5, TransitionEffect -> Automatic], Deployed -> False, 
              StripOnInput -> False], Background -> GrayLevel[1], Frame -> 
             True, FrameStyle -> GrayLevel[0.8235294117647058], StripOnInput -> 
             False]}}, AutoDelete -> False, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
         BaseStyle -> {}, BaselinePosition -> Automatic, DefaultBaseStyle -> 
         "MenuView", FrameMargins -> 6, ImageMargins -> Automatic], Deploy, 
        DefaultBaseStyle -> "Deploy"], 
       MenuView[{Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[92, 255], 
               Rational[152, 255], 
               Rational[97, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[92, 255], 
               Rational[152, 255], 
               Rational[97, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                   Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ConditionResult" -> True, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
              Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
         Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[92, 255], 
               Rational[152, 255], 
               Rational[97, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[92, 255], 
               Rational[152, 255], 
               Rational[97, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                   Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              "ConditionResult" -> True, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
              Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> 
                   Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], "ConditionResult" -> False, 
              "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> 
              Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
            False, "BaseMatchedQ" -> False|>], Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> 
                   Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], "ConditionResult" -> False, 
              "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
              Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> 
                   Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], "ConditionResult" -> False, 
              "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
              Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
         Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                   Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              "ConditionResult" -> False, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
              Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                   Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ConditionResult" -> False, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
              Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
            False|>], Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                   Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ConditionResult" -> False, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
              Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
         Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                   Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ConditionResult" -> False, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
              Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
            False|>], Row[{
            Row[{
              Style[List, 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style["[", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`x, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[
               BlankNullSequence[], 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Style[", ", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]], 
              Row[{
                Style[$CellContext`y, 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[":", 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]], 
                Style[
                 BlankSequence[], 
                 RGBColor[{
                   Rational[92, 255], 
                   Rational[152, 255], 
                   Rational[97, 255]}]]}], 
              Style["]", 
               RGBColor[{
                 Rational[92, 255], 
                 Rational[152, 255], 
                 Rational[97, 255]}]]}], 
            Style[" /; ", 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]], 
            Style[
             HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
             RGBColor[{
               Rational[43, 85], 
               Rational[43, 255], 
               Rational[38, 255]}]]}] -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Condition", 
            "Arguments" -> <|
             "Submatch" -> 
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Normal", 
                 "Arguments" -> <|
                  "HeadSubmatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "Pattern" -> List, "Bindings" -> <||>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                    BlankSequence[]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                   "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                 Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
                   Pattern[$CellContext`x, 
                    BlankSequence[]], 
                   BlankNullSequence[], 
                   Pattern[$CellContext`y, 
                    BlankSequence[]]}, 
                 "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                   Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], "ConditionResult" -> False, "HeldCondition" -> 
              Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
            "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
               Pattern[$CellContext`x, 
                BlankSequence[]], 
               BlankNullSequence[], 
               Pattern[$CellContext`y, 
                BlankSequence[]]}, Length[{$CellContext`x}] == 
              Length[{$CellContext`y}]], 
            "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
              Hold[2, 3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
            False|>]}]], DynamicModuleValues :> {}], Setting[#, {0}]& ], 
    "\"]\""},
   "RowDefault"],
  ChristopherWolfram`PatternErrors`MatchInformationObject[{
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[], "Pattern" -> BlankNullSequence[], "Bindings" -> <||>,
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[2, 3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
             Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
           True|>], "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
        Hold[2, 3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[2], "Pattern" -> BlankNullSequence[], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
             Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
        Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[2, 3], "Pattern" -> BlankNullSequence[], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
             Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
        Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[2, 3, 4], "Pattern" -> BlankNullSequence[], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
             Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> True, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> Hold[5]|>, 
      "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[], "Pattern" -> BlankNullSequence[], "Bindings" -> <||>,
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[3, 4, 5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
             Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
        Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[3], "Pattern" -> BlankNullSequence[], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
             Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> True, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
        Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[3, 4], "Pattern" -> BlankNullSequence[], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
             Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
        Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[], "Pattern" -> BlankNullSequence[], "Bindings" -> <||>,
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[4, 5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
             Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
        Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[4], "Pattern" -> BlankNullSequence[], 
                 "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                 True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
             Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
        Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
     "Type" -> "Condition", 
      "Arguments" -> <|
       "Submatch" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
          "Type" -> "Normal", 
           "Arguments" -> <|
            "HeadSubmatch" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[List], "Pattern" -> List, "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], "ArgumentSubmatches" -> {
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "Pattern" -> BlankSequence[], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                 Hold[1, 2, 3, 4], "Pattern" -> Pattern[$CellContext`x, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                 "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                 Hold[], "Pattern" -> BlankNullSequence[], "Bindings" -> <||>,
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                "Type" -> "Pattern", 
                 "Arguments" -> <|
                  "Submatch" -> 
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "Pattern" -> BlankSequence[], "Bindings" -> <||>,
                     "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   "BindingMatchedQ" -> True, 
                   "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                 Hold[5], "Pattern" -> Pattern[$CellContext`y, 
                   BlankSequence[]], 
                 "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                 True, "BaseMatchedQ" -> True|>]}, 
             "BindingConflicts" -> <||>|>, "HeldExpression" -> 
           Hold[{1, 2, 3, 4, 5}], "Pattern" -> {
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`y, 
              BlankSequence[]]}, 
           "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4], $CellContext`y -> 
             Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        "ConditionResult" -> False, "HeldCondition" -> 
        Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
      "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "Pattern" -> Condition[{
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`y, 
          BlankSequence[]]}, Length[{$CellContext`x}] == 
        Length[{$CellContext`y}]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4], $CellContext`y -> 
        Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
      False|>]}]]], "Output",
 CellChangeTimes->{{3.883074721850882*^9, 3.8830747386908293`*^9}, {
  3.883074889372409*^9, 3.883074899925289*^9}, {3.883672909865028*^9, 
  3.883672913298354*^9}},
 CellLabel->"Out[5]=",
 CellID->1347339622,ExpressionUUID->"85db942a-e774-498a-89f4-d3b026cb1585"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<Failure\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", "x", "}"}], "]"}], "==", 
       RowBox[{"Length", "[", 
        RowBox[{"{", "y", "}"}], "]"}]}]}]}], "]"}], "[", "\"\<Branches\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.882457299716114*^9, 3.882457888346286*^9, {3.882457975334023*^9, 
   3.882457978540079*^9}},
 CellLabel->"In[8]:=",
 CellID->1982530625,ExpressionUUID->"e3b57d09-94b5-4fed-8ba7-f57d442e735e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15120", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], SelectWithContents -> True, Selectable -> False],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19528", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ConditionResult" -> False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], SelectWithContents -> True, Selectable -> 
                    False], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
           Hold[2, 3, 4, 5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
               Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
        Hold[2, 3, 4, 5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[2, 3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[2, 3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                 Hold[2, 3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ConditionResult" -> False, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[2, 3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
          False|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15120", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], SelectWithContents -> True, Selectable -> False],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19528", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ConditionResult" -> False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], SelectWithContents -> True, Selectable -> 
                    False], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
           Hold[3, 4, 5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
               Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>],
            Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
        Hold[3, 4, 5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                 Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ConditionResult" -> False, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15088", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], SelectWithContents -> True, Selectable -> False],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19496", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ConditionResult" -> False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], SelectWithContents -> True, Selectable -> 
                    False], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
           Hold[4, 5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
               Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
           Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
        Hold[4, 5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                 Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
            "ConditionResult" -> False, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Success",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}]}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}]}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19464", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "ConditionResult" -> True, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["\"Match\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Success["Match", <|"Pattern" -> HoldForm[
        Condition[{
          Pattern[$CellContext`x, 
           BlankSequence[]], 
          BlankNullSequence[], 
          Pattern[$CellContext`y, 
           BlankSequence[]]}, Length[{$CellContext`x}] == 
         Length[{$CellContext`y}]]], "Expression" -> 
      HoldForm[{1, 2, 3, 4, 5}], 
      "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> Hold[5]|>, 
      "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
                 Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
            "ConditionResult" -> True, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15120", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19528", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 4, 5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
           Hold[3, 4, 5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
               Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>],
            Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
        Hold[3, 4, 5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[3, 4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[3, 4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                 Hold[3, 4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ConditionResult" -> False, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
            Hold[3, 4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Success",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}]}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "x", "}"}], "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "y", "}"}], "]"}]}]}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["20552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    True, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["\"Match\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Success["Match", <|"Pattern" -> HoldForm[
        Condition[{
          Pattern[$CellContext`x, 
           BlankSequence[]], 
          BlankNullSequence[], 
          Pattern[$CellContext`y, 
           BlankSequence[]]}, Length[{$CellContext`x}] == 
         Length[{$CellContext`y}]]], "Expression" -> 
      HoldForm[{1, 2, 3, 4, 5}], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
        Hold[4, 5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                 Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
            "ConditionResult" -> True, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
            Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15088", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchBranch" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> H\
old[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19496", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
           Hold[5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
               Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
           Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
        Hold[5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                 Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
            "ConditionResult" -> False, "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2], $CellContext`y -> 
            Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15120", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"4", ",", "5"}], "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19528", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
           Hold[4, 5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
               Hold[4, 5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
           Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
        Hold[4, 5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[4, 5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[4, 5]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> 
                 Hold[1, 2, 3], $CellContext`y -> Hold[4, 5]|>, "MatchedQ" -> 
               True, "BaseMatchedQ" -> True|>], "ConditionResult" -> False, 
            "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
            Hold[4, 5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15120", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchBranch" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19528", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
           Hold[5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
               Hold[5]|>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
           Automatic, Method -> Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
        Hold[5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[4], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> 
                 Hold[1, 2, 3], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
               True, "BaseMatchedQ" -> True|>], "ConditionResult" -> False, 
            "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
            Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Condition \\!\\(\\*TagBox[RowBox[{RowBox[{\\\"Length\\\
\", \\\"[\\\", RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}], \\\"]\\\"}], \\\"\
\[Equal]\\\", RowBox[{\\\"Length\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
\\\"y\\\", \\\"}\\\"}], \\\"]\\\"}]}], Function[Short[Slot[1], 5]]]\\) not \
satisfied, returning \\!\\(\\*TagBox[\\\"False\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ConditionMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Condition\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ConditionResult\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["False", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"x__", ",", "___", ",", "y__"}], "}"}], HoldForm],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15120", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], "Expression" -> 
                    HoldForm[{1, 2, 3, 4, 5}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]}], ",", 
                    RowBox[{"y", "\[Rule]", 
                    RowBox[{"Hold", "[", "5", "]"}]}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["19528", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Condition", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "ConditionResult" -> 
                    False, "HeldCondition" -> 
                    Hold[Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]|>, "HeldExpression" -> 
                    Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
                    Condition[{
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`y, 
                    BlankSequence[]]}, Length[{$CellContext`x}] == 
                    Length[{$CellContext`y}]]], 
                    "Bindings" -> <|$CellContext`x -> 
                    Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ConditionMatchFailure", <|
     "MessageTemplate" -> "Condition `1` not satisfied, returning `2`.", 
      "MessageParameters" -> {
        HoldForm[Length[{$CellContext`x}] == Length[{$CellContext`y}]], 
        False}, "Type" -> "Condition", "ConditionResult" -> False, "Submatch" -> 
      Success["Match", <|"Pattern" -> HoldForm[{
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            BlankNullSequence[], 
            Pattern[$CellContext`y, 
             BlankSequence[]]}], "Expression" -> HoldForm[{1, 2, 3, 4, 5}], 
         "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4], $CellContext`y -> 
           Hold[5]|>, "MatchBranch" -> IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Normal", 
             "Arguments" -> <|
              "HeadSubmatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                  Hold[List], "HeldPattern" -> Hold[List], "Bindings" -> <||>,
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "ArgumentSubmatches" -> {
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                   Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                   "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], 
                 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Pattern", 
                   "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                   Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                   "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>]}, 
               "BindingConflicts" -> <||>|>, "HeldExpression" -> 
             Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                Pattern[$CellContext`x, 
                 BlankSequence[]], 
                BlankNullSequence[], 
                Pattern[$CellContext`y, 
                 BlankSequence[]]}], 
             "Bindings" -> <|$CellContext`x -> 
               Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
             True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
           Automatic]|>], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4], $CellContext`y -> 
        Hold[5]|>, "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Condition", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Normal", 
               "Arguments" -> <|
                "HeadSubmatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[List], "HeldPattern" -> Hold[List], 
                    "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 4], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                   
                   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`y|>, "HeldExpression" -> 
                    Hold[5], "HeldPattern" -> Hold[
                    Pattern[$CellContext`y, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`y -> Hold[5]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                 "BindingConflicts" -> <||>|>, "HeldExpression" -> 
               Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[{
                  Pattern[$CellContext`x, 
                   BlankSequence[]], 
                  BlankNullSequence[], 
                  Pattern[$CellContext`y, 
                   BlankSequence[]]}], 
               "Bindings" -> <|$CellContext`x -> 
                 Hold[1, 2, 3, 4], $CellContext`y -> Hold[5]|>, "MatchedQ" -> 
               True, "BaseMatchedQ" -> True|>], "ConditionResult" -> False, 
            "HeldCondition" -> 
            Hold[Length[{$CellContext`x}] == Length[{$CellContext`y}]]|>, 
          "HeldExpression" -> Hold[{1, 2, 3, 4, 5}], "HeldPattern" -> Hold[
            Condition[{
              Pattern[$CellContext`x, 
               BlankSequence[]], 
              BlankNullSequence[], 
              Pattern[$CellContext`y, 
               BlankSequence[]]}, Length[{$CellContext`x}] == 
             Length[{$CellContext`y}]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 4], $CellContext`y -> 
            Hold[5]|>, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
        Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.882457300187838*^9, 3.882457634208523*^9, 3.8824577727690077`*^9, 
   3.882457891429228*^9, {3.8824579656701*^9, 3.882457978996634*^9}, 
   3.8825546724914227`*^9, 3.8825549076103363`*^9, 3.88255531611473*^9, 
   3.883073343704234*^9, 3.8830747156811533`*^9, 3.8836729446222897`*^9, 
   3.883702365870616*^9},
 CellLabel->"Out[8]=",
 CellID->1292642470,ExpressionUUID->"36fcadca-4513-4da4-b34c-e8ff2fd43970"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchInformation", "[", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"x__", ",", "___", ",", "x__"}], "]"}]}], "]"}], "[", 
  "\"\<Branches\>\"", "]"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->45957019,ExpressionUUID->"4f962a85-b3f9-4ae0-b85f-a49a1314fc09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<Failure\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__", ",", "___", ",", "x__"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882382204260777*^9, 3.882382207485415*^9}},
 CellLabel->"In[10]:=",
 CellID->1673829599,ExpressionUUID->"cdc33b84-a5a7-44b7-a09c-4aff87ecd826"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", "1", "]"}], ",", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"2", ",", "3", ",", "1", ",", "2"}], "]"}]}], 
                    "}"}]}], "\[RightAssociation]"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource["FEBitmaps", 
                    "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1576", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"2", ",", "3", ",", "1", ",", "2"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"2", ",", "3", ",", "1", ",", "2"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"2", ",", "3", ",", "1", ",", "2"}], "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4256", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[2, 3, 1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15408", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1], 
                    Hold[2, 3, 1, 2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1], 
         Hold[2, 3, 1, 2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1], 
          Hold[2, 3, 1, 2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1], 
          "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[2, 3, 1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, 
              "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
            Method -> Automatic]|>]}, 
      "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[2, 3, 1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[2, 3, 1, 2]|>, 
                "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1], 
                Hold[2, 3, 1, 2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], "Bindings" -> <|$CellContext`x -> Hold[1]|>,
           "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \
\\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \
\\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", "1", "]"}], ",", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1608", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[3, 1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15408", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1], 
                    Hold[3, 1, 2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1], 
         Hold[3, 1, 2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1], 
          Hold[3, 1, 2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1], 
          "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[2], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[2], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[3, 1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[3, 1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <|$CellContext`x -> Hold[1]|>, 
      "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[2], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[3, 1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1], 
                Hold[3, 1, 2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], "Bindings" -> <|$CellContext`x -> Hold[1]|>,
           "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \
\\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \
\\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", "1", "]"}], ",", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"2", ",", "3"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"2", ",", "3"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1624", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[2, 3], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15408", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1], 
                    Hold[1, 2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1], 
         Hold[1, 2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1], 
          Hold[1, 2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1], 
          "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[2, 3], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[2, 3], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <|$CellContext`x -> Hold[1]|>, 
      "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[2, 3], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1], 
                Hold[1, 2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], "Bindings" -> <|$CellContext`x -> Hold[1]|>,
           "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"2\\\", \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"1\\\", \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \
\\\"[\\\", \\\"2\\\", \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", "1", "]"}], ",", 
                    RowBox[{"Hold", "[", "2", "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"2", ",", "3", ",", "1"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"2", ",", "3", ",", "1"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1672", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[2, 3, 1], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "1", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15408", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1], 
                    Hold[2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1], 
         Hold[2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1], 
          Hold[2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1], 
          "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[2, 3, 1], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[2, 3, 1], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[2], 
          "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>]},
       "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[2, 3, 1], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1], 
                Hold[2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], "Bindings" -> <|$CellContext`x -> Hold[1]|>,
           "MatchedQ" -> False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \\\",\\\", \
RowBox[{\\\"Hold\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \\\",\\\", \
RowBox[{\\\"Hold\\\", \\\"[\\\", RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], ",", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1576", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"3", ",", "1", ",", "2"}], "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[3, 1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15440", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1, 2], 
                    Hold[3, 1, 2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1, 2], 
         Hold[3, 1, 2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1, 2], 
          Hold[3, 1, 2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[3, 1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[3, 1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
      "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[3, 1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[3, 1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1, 2], 
                Hold[3, 1, 2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> False,
           "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Success",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"x__", ",", "___", ",", "x__"}], "]"}], HoldForm],
                     "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"x__", ",", "___", ",", "x__"}], "]"}], HoldForm],
                     "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"f", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15440", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["\"Match\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Success["Match", <|"Pattern" -> HoldForm[
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[]], 
         BlankNullSequence[], 
         Pattern[$CellContext`x, 
          BlankSequence[]]]], "Expression" -> HoldForm[
        $CellContext`f[1, 2, 3, 1, 2]], 
      "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[3], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> True, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \\\",\\\", \
RowBox[{\\\"Hold\\\", \\\"[\\\", \\\"2\\\", \\\"]\\\"}]}], \\\"}\\\"}], \
Function[Short[Slot[1], 5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \\\",\\\", \
RowBox[{\\\"Hold\\\", \\\"[\\\", \\\"2\\\", \\\"]\\\"}]}], \\\"}\\\"}], \
Function[Short[Slot[1], 5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], ",", 
                    RowBox[{"Hold", "[", "2", "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"3", ",", "1"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"3", ",", "1"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1624", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[3, 1], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15440", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1, 2], 
                    Hold[2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1, 2], 
         Hold[2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1, 2], 
          Hold[2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[3, 1], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[3, 1], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[2], 
          "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>]},
       "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[3, 1], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1, 2], 
                Hold[2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> False,
           "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \\\"[\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \\\"[\\\", RowBox[{\\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], \
5]]]\\)\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}], ",", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2, 3], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1576", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2"}], "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}], "\[RightAssociation]"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15440", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1, 2, 3], 
                    Hold[1, 2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1, 2, 3], 
         Hold[1, 2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1, 2, 3], 
          Hold[1, 2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2, 3], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2, 3], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>]}, "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>,
       "MatchBranch" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2, 3], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1, 2, 3], 
                Hold[1, 2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchedQ" -> 
          False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \\\"[\\\", \\\"2\\\", \
\\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \\\"[\\\", \\\"2\\\", \
\\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}], ",", 
                    RowBox[{"Hold", "[", "2", "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4224", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2, 3], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["1", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1608", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[1], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15440", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1, 2, 3], 
                    Hold[2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1, 2, 3], 
         Hold[2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1, 2, 3], 
          Hold[2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2, 3], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2, 3], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchedQ" -> 
              True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
            Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[1], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[1], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[2], 
          "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>]},
       "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2, 3], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[1], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1, 2, 3], 
                Hold[2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3]|>, "MatchedQ" -> 
          False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \
\\\",\\\", \\\"1\\\"}], \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \\\"[\\\
\", \\\"2\\\", \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"",
                     "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Encountered incompatible bindings for the pattern \
variable \\!\\(\\*TagBox[\\\"x\\\", Function[Short[Slot[1], 5]]]\\), \
including: \\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"Hold\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \
\\\",\\\", \\\"1\\\"}], \\\"]\\\"}], \\\",\\\", RowBox[{\\\"Hold\\\", \\\"[\\\
\", \\\"2\\\", \\\"]\\\"}]}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\)\"",
                     "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"IncompatibleBindingMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"BindingConflicts\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1"}], "]"}], ",", 
                    RowBox[{"Hold", "[", "2", "]"}]}], "}"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1"}], "]"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1"}], "]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1"}], "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4256", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[1, 2, 3, 1], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["___", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"HoldForm", "[", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1576", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    BlankNullSequence[]], "Expression" -> HoldForm[], 
                    "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x__", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "1"}], "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["15472", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "HeldPattern" -> Hold[
                    BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>]}, 
                    "BindingConflicts" -> <|$CellContext`x -> {
                    Hold[1, 2, 3, 1], 
                    Hold[2]}|>|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    BlankNullSequence[], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "IncompatibleBindingMatchFailure", <|
     "MessageTemplate" -> 
      "Encountered incompatible bindings for the pattern variable `1`, \
including: `2`", "MessageParameters" -> {$CellContext`x, {
         Hold[1, 2, 3, 1], 
         Hold[2]}}, "Type" -> "Normal", 
      "BindingConflicts" -> <|$CellContext`x -> {
          Hold[1, 2, 3, 1], 
          Hold[2]}|>, "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
         HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
             Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
             "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
             True|>], Automatic, Method -> Automatic]|>], 
      "ArgumentSubmatches" -> {
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[1, 2, 3, 1], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
              "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
            Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            BlankNullSequence[]], "Expression" -> HoldForm[], 
          "Bindings" -> <||>, "MatchBranch" -> IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[], "HeldPattern" -> Hold[
                BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
              "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>], 
        Success["Match", <|"Pattern" -> HoldForm[
            Pattern[$CellContext`x, 
             BlankSequence[]]], "Expression" -> HoldForm[2], 
          "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
              Hold[2], "HeldPattern" -> Hold[
                Pattern[$CellContext`x, 
                 BlankSequence[]]], 
              "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> True,
               "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>]},
       "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, "MatchBranch" -> 
      IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
               "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[1, 2, 3, 1], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, 
                "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                Hold[], "HeldPattern" -> Hold[
                  BlankNullSequence[]], "Bindings" -> <||>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   BlankSequence[]]], 
                "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>]}, 
            "BindingConflicts" -> <|$CellContext`x -> {
                Hold[1, 2, 3, 1], 
                Hold[2]}|>|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "HeldPattern" -> Hold[
            $CellContext`f[
             Pattern[$CellContext`x, 
              BlankSequence[]], 
             BlankNullSequence[], 
             Pattern[$CellContext`x, 
              BlankSequence[]]]], 
          "Bindings" -> <|$CellContext`x -> Hold[1, 2, 3, 1]|>, "MatchedQ" -> 
          False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
        Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.88238220797406*^9, 3.882382253811482*^9, 
  3.882453965827219*^9, 3.88245432031866*^9, 3.882455464444015*^9, 
  3.882554694025804*^9, 3.882554911184664*^9, 3.8837023746808567`*^9},
 CellLabel->"Out[10]=",
 CellID->702092892,ExpressionUUID->"81fe462a-b2e6-461f-bb6c-e6d494b8c157"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<StyledPattern\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__", ",", "___", ",", "x__"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882382015318672*^9, 3.882382025374716*^9}},
 CellLabel->"In[12]:=",
 CellID->567080222,ExpressionUUID->"05f305db-8897-45b4-8ad9-cd9a5f3fd53a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox[
      TagBox["f", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     StyleBox[
      TagBox["___", HoldForm], 
      RGBColor[{
        Rational[92, 255], 
        Rational[152, 255], 
        Rational[97, 255]}], StripOnInput -> False], 
     StyleBox["\", \"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False], 
       StyleBox[
        TagBox["__", HoldForm], 
        RGBColor[{
          Rational[92, 255], 
          Rational[152, 255], 
          Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[{
        Rational[43, 85], 
        Rational[43, 255], 
        Rational[38, 255]}], StripOnInput -> False]},
    "RowDefault"]}], "}"}]], "Output",
 CellChangeTimes->{3.8823820270857477`*^9, 3.8823821986322193`*^9, 
  3.88245397858572*^9, 3.882454165605386*^9, 3.8837023798580227`*^9},
 CellLabel->"Out[12]=",
 CellID->326452103,ExpressionUUID->"b34bbd6b-bc06-4421-9625-a425556f763a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<StyledPattern\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x_", "?", "BooleanQ"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882328062951664*^9, 3.882328078150667*^9}},
 CellLabel->"In[13]:=",
 CellID->1658363331,ExpressionUUID->"c8ffe553-e59c-4a9c-89bc-534fdd49094f"],

Cell[BoxData[
 RowBox[{"{", 
  TemplateBox[{
    StyleBox[
     TagBox["f", HoldForm], 
     RGBColor[{
       Rational[92, 255], 
       Rational[152, 255], 
       Rational[97, 255]}], StripOnInput -> False], 
    StyleBox["\"[\"", 
     RGBColor[{
       Rational[92, 255], 
       Rational[152, 255], 
       Rational[97, 255]}], StripOnInput -> False], 
    TemplateBox[{
      TemplateBox[{
        StyleBox["x", 
         RGBColor[{
           Rational[92, 255], 
           Rational[152, 255], 
           Rational[97, 255]}], StripOnInput -> False], 
        StyleBox["\":\"", 
         RGBColor[{
           Rational[92, 255], 
           Rational[152, 255], 
           Rational[97, 255]}], StripOnInput -> False], 
        StyleBox[
         TagBox["_", HoldForm], 
         RGBColor[{
           Rational[92, 255], 
           Rational[152, 255], 
           Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
      StyleBox["\"?\"", 
       RGBColor[{
         Rational[43, 85], 
         Rational[43, 255], 
         Rational[38, 255]}], StripOnInput -> False], 
      StyleBox["BooleanQ", 
       RGBColor[{
         Rational[43, 85], 
         Rational[43, 255], 
         Rational[38, 255]}], StripOnInput -> False]}, "RowDefault"], 
    StyleBox["\"]\"", 
     RGBColor[{
       Rational[92, 255], 
       Rational[152, 255], 
       Rational[97, 255]}], StripOnInput -> False]},
   "RowDefault"], "}"}]], "Output",
 CellChangeTimes->{{3.8823280729145*^9, 3.882328078470764*^9}, 
   3.882377234788578*^9, 3.882381641772975*^9, 3.88245417698372*^9, 
   3.883702380847085*^9},
 CellLabel->"Out[13]=",
 CellID->1217501413,ExpressionUUID->"e0659504-db3b-4260-bbe0-a1d610414b20"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<StyledPattern\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"2", ",", "True"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__", "?", "BooleanQ"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8823282421082067`*^9, 3.882328245324503*^9}},
 CellLabel->"In[15]:=",
 CellID->2052955325,ExpressionUUID->"5be8c8e9-5d9e-4c37-840e-2a68121a5997"],

Cell[BoxData[
 RowBox[{"{", 
  TemplateBox[{
    StyleBox[
     TagBox["f", HoldForm], 
     RGBColor[{
       Rational[92, 255], 
       Rational[152, 255], 
       Rational[97, 255]}], StripOnInput -> False], 
    StyleBox["\"[\"", 
     RGBColor[{
       Rational[92, 255], 
       Rational[152, 255], 
       Rational[97, 255]}], StripOnInput -> False], 
    TemplateBox[{
      TemplateBox[{
        StyleBox["x", 
         RGBColor[{
           Rational[92, 255], 
           Rational[152, 255], 
           Rational[97, 255]}], StripOnInput -> False], 
        StyleBox["\":\"", 
         RGBColor[{
           Rational[92, 255], 
           Rational[152, 255], 
           Rational[97, 255]}], StripOnInput -> False], 
        StyleBox[
         TagBox["__", HoldForm], 
         RGBColor[{
           Rational[92, 255], 
           Rational[152, 255], 
           Rational[97, 255]}], StripOnInput -> False]}, "RowDefault"], 
      StyleBox["\"?\"", 
       RGBColor[{
         Rational[43, 85], 
         Rational[43, 255], 
         Rational[38, 255]}], StripOnInput -> False], 
      StyleBox["BooleanQ", 
       RGBColor[{
         Rational[43, 85], 
         Rational[43, 255], 
         Rational[38, 255]}], StripOnInput -> False]}, "RowDefault"], 
    StyleBox["\"]\"", 
     RGBColor[{
       Rational[92, 255], 
       Rational[152, 255], 
       Rational[97, 255]}], StripOnInput -> False]},
   "RowDefault"], "}"}]], "Output",
 CellChangeTimes->{
  3.8823282456526413`*^9, 3.882381646102359*^9, 3.882454177814719*^9, {
   3.8837023823866987`*^9, 3.8837023843555803`*^9}},
 CellLabel->"Out[15]=",
 CellID->884072764,ExpressionUUID->"eaf297b9-8d7a-4013-ade4-62a5b7ba3670"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<Failure\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x_", "?", "BooleanQ"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882328084254252*^9, 3.882328099359375*^9}},
 CellLabel->"In[16]:=",
 CellID->241333947,ExpressionUUID->"f7616f20-c13c-4d7e-b187-f45e5e5e9997"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["Failure",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             FrameBox[
              StyleBox["\"\[WarningSign]\"", 
               Directive["Message", 35], StripOnInput -> False], 
              ContentPadding -> False, FrameStyle -> None, 
              FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"x_\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x_\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"2\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               
                TagBox[
                 GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             FrameBox[
              StyleBox["\"\[WarningSign]\"", 
               Directive["Message", 35], StripOnInput -> False], 
              ContentPadding -> False, FrameStyle -> None, 
              FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression matching \
\\!\\(\\*TagBox[RowBox[{\\\"x_\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) in the \
\\!\\(\\*TagBox[\\\"\\\\\\\"first\\\\\\\"\\\", Function[Short[Slot[1], \
5]]]\\) argument of \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x_\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\), but found \\!\\(\\*TagBox[\\\"2\\\", \
Function[Short[Slot[1], 5]]]\\) instead.\"", "SummaryItem"]}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               
                TagBox[
                 GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["f", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["1552", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
                    HoldForm[$CellContext`f], "Bindings" -> <||>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], HoldForm], 
                   "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   
                   TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{"{", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"BooleanQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"BooleanQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) instead.\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"PatternTest\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"TestResults\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"{", "False", "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x_", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["x_", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["2", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["3936", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], Selectable -> False, Editable -> 
                    False, SelectWithContents -> True], HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["6568", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "TestResults" -> {False}, "TestFunction" -> BooleanQ|>, 
                    "HeldExpression" -> Hold[2], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[]], BooleanQ]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "PatternTestMatchFailure", <|
                    "MessageTemplate" -> 
                    "Expected an expression satisfying `2`, but found `1` \
instead.", "MessageParameters" -> {
                    HoldForm[2], BooleanQ}, "Type" -> "PatternTest", 
                    "TestResults" -> {False}, "Submatch" -> 
                    Success["Match", <|"Pattern" -> HoldForm[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Expression" -> HoldForm[2], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
                    Method -> Automatic]|>], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchBranch" -> IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "TestResults" -> {False}, "TestFunction" -> BooleanQ|>, 
                    "HeldExpression" -> Hold[2], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[]], BooleanQ]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "}"}], HoldForm], 
                   "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"Bindings\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"x", "\[Rule]", 
                    RowBox[{"Hold", "[", "2", "]"}]}], 
                    "\[RightAssociation]"}], HoldForm], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"MatchBranch\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["11216", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "HeldPattern" -> 
                    Hold[$CellContext`f], "Bindings" -> <||>, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "TestResults" -> {False}, "TestFunction" -> BooleanQ|>, 
                    "HeldExpression" -> Hold[2], "HeldPattern" -> Hold[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[]], BooleanQ]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}, 
                    "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
                    $CellContext`f[2]], "HeldPattern" -> Hold[
                    $CellContext`f[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    Blank[]], BooleanQ]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
               GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   Failure[
   "ArgumentMatchFailure", <|
    "MessageTemplate" -> 
     "Expected an expression matching `1` in the `2` argument of `3`, but \
found `4` instead.", "MessageParameters" -> {
       HoldForm[
        PatternTest[
         Pattern[$CellContext`x, 
          Blank[]], BooleanQ]], "first", 
       HoldForm[
        $CellContext`f[
         PatternTest[
          Pattern[$CellContext`x, 
           Blank[]], BooleanQ]]], 
       HoldForm[2]}, "Type" -> "Normal", "HeadSubmatch" -> 
     Success["Match", <|
       "Pattern" -> HoldForm[$CellContext`f], "Expression" -> 
        HoldForm[$CellContext`f], "Bindings" -> <||>, "MatchBranch" -> 
        IconizedObject[
          
          ChristopherWolfram`PatternErrors`MatchBranchObject[<|
           "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
            Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
            "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> True|>],
           Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
       Failure[
       "PatternTestMatchFailure", <|
        "MessageTemplate" -> 
         "Expected an expression satisfying `2`, but found `1` instead.", 
         "MessageParameters" -> {
           HoldForm[2], BooleanQ}, "Type" -> "PatternTest", 
         "TestResults" -> {False}, "Submatch" -> 
         Success["Match", <|"Pattern" -> HoldForm[
              Pattern[$CellContext`x, 
               Blank[]]], "Expression" -> HoldForm[2], 
            "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
            IconizedObject[
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                  "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                Hold[2], "HeldPattern" -> Hold[
                  Pattern[$CellContext`x, 
                   Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                "MatchedQ" -> True, "BaseMatchedQ" -> True|>], Automatic, 
              Method -> Automatic]|>], 
         "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "PatternTest", 
             "Arguments" -> <|
              "Submatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Pattern", 
                  "Arguments" -> <|
                   "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                  Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                  "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
               "TestResults" -> {False}, "TestFunction" -> BooleanQ|>, 
             "HeldExpression" -> Hold[2], "HeldPattern" -> Hold[
               PatternTest[
                Pattern[$CellContext`x, 
                 Blank[]], BooleanQ]], 
             "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> False,
              "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>]},
      "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchBranch" -> 
     IconizedObject[
       ChristopherWolfram`PatternErrors`MatchBranchObject[<|
        "Type" -> "Normal", 
         "Arguments" -> <|
          "HeadSubmatch" -> 
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[$CellContext`f], "HeldPattern" -> Hold[$CellContext`f], 
              "Bindings" -> <||>, "MatchedQ" -> True, "BaseMatchedQ" -> 
              True|>], "ArgumentSubmatches" -> {
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "PatternTest", 
               "Arguments" -> <|
                "Submatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Blank[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    Blank[]]], "Bindings" -> <|$CellContext`x -> Hold[2]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                 "TestResults" -> {False}, "TestFunction" -> BooleanQ|>, 
               "HeldExpression" -> Hold[2], "HeldPattern" -> Hold[
                 PatternTest[
                  Pattern[$CellContext`x, 
                   Blank[]], BooleanQ]], 
               "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> 
               False, "BaseMatchedQ" -> False|>]}, 
           "BindingConflicts" -> <||>|>, "HeldExpression" -> Hold[
           $CellContext`f[2]], "HeldPattern" -> Hold[
           $CellContext`f[
            PatternTest[
             Pattern[$CellContext`x, 
              Blank[]], BooleanQ]]], 
         "Bindings" -> <|$CellContext`x -> Hold[2]|>, "MatchedQ" -> False, 
         "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{{3.882328085331752*^9, 3.882328099708049*^9}, 
   3.882554718344266*^9, 3.882554913866943*^9, 3.882555542869258*^9, 
   3.882555615395238*^9, 3.883702386328277*^9},
 CellLabel->"Out[16]=",
 CellID->935052931,ExpressionUUID->"fa3d712f-5da5-4d3c-80ce-5d0fccb80cc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FirstPosition", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"MatchInformation", "[", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", ",", "True"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"x__", "?", "BooleanQ"}], "]"}]}], "]"}], "[", 
       "\"\<Branches\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Arguments\>\"", "]"}], "[", 
    "\"\<ArgumentSubmatches\>\"", "]"}], ",", 
   RowBox[{"_", "?", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"#", "[", "\"\<MatchedQ\>\"", "]"}]}], "&"}], ")"}]}], ",", 
   RowBox[{"Missing", "[", "]"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"Heads", "->", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.882555352457172*^9, 3.882555394401257*^9}},
 CellLabel->"In[17]:=",
 CellID->469163885,ExpressionUUID->"02f45bec-ebf9-4213-a4b4-4c06fbf51e1a"],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Output",
 CellChangeTimes->{{3.882555356065433*^9, 3.882555383758994*^9}, 
   3.883702388071021*^9},
 CellLabel->"Out[17]=",
 CellID->1850370127,ExpressionUUID->"7392286a-be61-4aae-8d51-1459b056e33e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"MatchInformation", "[", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"2", ",", "True"}], "]"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"x__", "?", "BooleanQ"}], "]"}]}], "]"}], "[", 
     "\"\<Branches\>\"", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Arguments\>\"", "]"}], "[", 
  "\"\<ArgumentSubmatches\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8825553343578663`*^9, 3.882555344109933*^9}},
 CellLabel->"In[18]:=",
 CellID->559229048,ExpressionUUID->"64ee54db-f193-49a2-9190-3d844c318076"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   PanelBox[
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = False}, 
      InterpretationBox[
       StyleBox[
        PaneSelectorBox[{False->GridBox[{
           {
            OpenerBox[Dynamic[Typeset`var$$],
             Appearance->Automatic,
             AutoAction->False,
             ContinuousAction->False,
             Enabled->Automatic], 
            TagBox[GridBox[{
               {"\<\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"BooleanQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"True\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"\
\>"},
               {
                TemplateBox[{
                  TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__", HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"?\"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox["BooleanQ", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]},
                 "RowDefault"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Column"]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
         GridBox[{
           {
            OpenerBox[Dynamic[Typeset`var$$],
             Appearance->Automatic,
             AutoAction->False,
             ContinuousAction->False,
             Enabled->Automatic], 
            TagBox[GridBox[{
               {"\<\"Expected an expression satisfying \
\\!\\(\\*TagBox[\\\"BooleanQ\\\", Function[Short[Slot[1], 5]]]\\), but found \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\
\\\", \\\"True\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) instead.\"\
\>"},
               {
                TemplateBox[{
                  TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__", HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                   "RowDefault"], 
                  StyleBox["\"?\"", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False], 
                  StyleBox["BooleanQ", 
                   RGBColor[{
                    Rational[43, 85], 
                    Rational[43, 255], 
                    Rational[38, 255]}], StripOnInput -> False]},
                 "RowDefault"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Column"]},
           {"", 
            PaneBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{"\"Test results: \"", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}]},
                  "RowDefault"]},
                {
                 TemplateBox[{"\"Submatch: \"", 
                   InterpretationBox[
                    PanelBox[
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__", HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    StyleBox["x", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox["\":\"", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False], 
                    StyleBox[
                    TagBox["__", HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TemplateBox[{"\"Submatch: \"", 
                    InterpretationBox[
                    PanelBox[
                    StyleBox[
                    TagBox["__", HoldForm], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}], StripOnInput -> False]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]]}, "RowDefault"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Style[$CellContext`x, 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[":", 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]], 
                    Style[
                    HoldForm[
                    BlankSequence[]], 
                    RGBColor[{
                    Rational[92, 255], 
                    Rational[152, 255], 
                    Rational[97, 255]}]]}], 
                    Row[{"Submatch: ", 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                    "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
                    Hold[2, True], "HeldPattern" -> Hold[
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> <|$CellContext`x -> Hold[2, True]|>, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>]]},
                  "RowDefault"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             ImageMargins->0]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
         Dynamic[Typeset`var$$],
         Alignment->Automatic,
         BaseStyle->{},
         BaselinePosition->Baseline,
         DefaultBaseStyle->"OpenerView",
         ImageMargins->0,
         ImageSize->Automatic],
        Deployed->False,
        StripOnInput->False],
       OpenerView[{
         Column[{
          "Expected an expression satisfying \!\(\*TagBox[\"BooleanQ\", \
Function[Short[Slot[1], 5]]]\), but found \!\(\*TagBox[RowBox[{\"HoldForm\", \
\"[\", RowBox[{\"2\", \",\", \"True\"}], \"]\"}], Function[Short[Slot[1], \
5]]]\) instead.", 
           Row[{
             Row[{
               Style[$CellContext`x, 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]], 
               Style[":", 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]], 
               Style[
                HoldForm[
                 BlankSequence[]], 
                RGBColor[{
                  Rational[92, 255], 
                  Rational[152, 255], 
                  Rational[97, 255]}]]}], 
             Style["?", 
              RGBColor[{
                Rational[43, 85], 
                Rational[43, 255], 
                Rational[38, 255]}]], 
             Style[BooleanQ, 
              RGBColor[{
                Rational[43, 85], 
                Rational[43, 255], 
                Rational[38, 255]}]]}]}], 
         Column[{
           Row[{"Test results: ", {False, True}}], 
           Row[{"Submatch: ", 
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Pattern", 
               "Arguments" -> <|
                "Submatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "HeldPattern" -> Hold[
                    BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
                 "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
               Hold[2, True], "HeldPattern" -> Hold[
                 Pattern[$CellContext`x, 
                  BlankSequence[]]], 
               "Bindings" -> <|$CellContext`x -> Hold[2, True]|>, "MatchedQ" -> 
               True, "BaseMatchedQ" -> True|>]}]}]}, False]],
      DynamicModuleValues:>{}],
     Setting[#, {0}]& ]],
   ChristopherWolfram`PatternErrors`MatchBranchObject[<|
    "Type" -> "PatternTest", 
     "Arguments" -> <|
      "Submatch" -> 
       ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Pattern", 
          "Arguments" -> <|
           "Submatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[2, True], "HeldPattern" -> Hold[
                 BlankSequence[]], "Bindings" -> <||>, "MatchedQ" -> True, 
               "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True, 
            "PatternVariable" -> $CellContext`x|>, "HeldExpression" -> 
          Hold[2, True], "HeldPattern" -> Hold[
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> <|$CellContext`x -> Hold[2, True]|>, "MatchedQ" -> 
          True, "BaseMatchedQ" -> True|>], "TestResults" -> {False, True}, 
       "TestFunction" -> BooleanQ|>, "HeldExpression" -> Hold[2, True], 
     "HeldPattern" -> Hold[
       PatternTest[
        Pattern[$CellContext`x, 
         BlankSequence[]], BooleanQ]], 
     "Bindings" -> <|$CellContext`x -> Hold[2, True]|>, "MatchedQ" -> False, 
     "BaseMatchedQ" -> False|>]], "}"}]], "Output",
 CellChangeTimes->{{3.882555335103444*^9, 3.882555344336606*^9}, {
   3.883074918800181*^9, 3.88307492239319*^9}, 3.8837023899136543`*^9},
 CellLabel->"Out[18]=",
 CellID->1863374158,ExpressionUUID->"b7f17590-a036-4556-ab9f-57d84754df52"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<Failure\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"2", ",", "True"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__", "?", "BooleanQ"}], "]"}]}], "]"}], "[", 
   "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882328253164703*^9, 3.882328254092601*^9}},
 CellLabel->"In[16]:=",
 CellID->352575421,ExpressionUUID->"064d9152-b606-4fb3-8961-ffa050d20a9d"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["Failure",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
     
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
               Appearance -> None, BaseStyle -> {}, 
               ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
               Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             FrameBox[
              StyleBox[
              "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
               FontSize -> 35], ContentPadding -> False, 
              FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
              StripOnInput -> False], 
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"2\\\", \\\",\\\", \\\"True\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) does not match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"x__\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) because its argument \\!\\(\\*TagBox[RowBox[{\
\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\\\", \\\"True\\\"}], \\\
\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not match \
\\!\\(\\*TagBox[RowBox[{\\\"x__\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               
                TagBox[
                 GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
              AutoDelete -> False, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
           False, BaselinePosition -> {1, 1}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
         GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
                ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
               Appearance -> None, BaseStyle -> {}, 
               ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
               Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             FrameBox[
              StyleBox[
              "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
               FontSize -> 35], ContentPadding -> False, 
              FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
              StripOnInput -> False], 
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"2\\\", \\\",\\\", \\\"True\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\) does not match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"x__\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) because its argument \\!\\(\\*TagBox[RowBox[{\
\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\\\", \\\"True\\\"}], \\\
\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not match \
\\!\\(\\*TagBox[RowBox[{\\\"x__\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               
                TagBox[
                 GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                  GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Editable -> 
                    False, SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   
                   TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{"{", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"], 
                    ImageSizeCache -> {8.777109375, {0., 8.777109375}}], 
                    Appearance -> None, BaseStyle -> {}, 
                    ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox[
                    "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                    FontSize -> 35], ContentPadding -> False, 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
                    StripOnInput -> False], 
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"2\\\", \\\",\\\", \\\"True\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) does not match \
\\!\\(\\*TagBox[RowBox[{\\\"x__\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) because it does not satisfy \
\\!\\(\\*TagBox[\\\"BooleanQ\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, AutoDelete -> False, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"], 
                    ImageSizeCache -> {8.777109375, {0., 8.777109375}}], 
                    Appearance -> None, BaseStyle -> {}, 
                    ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox[
                    "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                    FontSize -> 35], ContentPadding -> False, 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
                    StripOnInput -> False], 
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"2\\\", \\\",\\\", \\\"True\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) does not match \
\\!\\(\\*TagBox[RowBox[{\\\"x__\\\", \\\"?\\\", \\\"BooleanQ\\\"}], \
Function[Short[Slot[1], 5]]]\\) because it does not satisfy \
\\!\\(\\*TagBox[\\\"BooleanQ\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PatternTestMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"PatternTest\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Editable -> 
                    False, SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["5848", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|"Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "Tests" -> {False, True}|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> PatternTest[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], BooleanQ], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, AutoDelete -> False, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "PatternTestMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` does not match `2` because it does not satisfy `3`.",
                     "MessageParameters" -> {
                    HoldForm[2, True], 
                    PatternTest[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], BooleanQ], BooleanQ}, "Type" -> 
                    "PatternTest", "Submatch" -> 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "Tests" -> {False, True}|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> PatternTest[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], BooleanQ], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
                    Automatic, Method -> Automatic]|>], Editable -> False, 
                    SelectWithContents -> True, Selectable -> False], "}"}], 
                    HoldForm], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                   TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["9984", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "PatternTest", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "Tests" -> {False, True}|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> PatternTest[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], BooleanQ], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> False|>]}|>, 
                    "HeldExpression" -> Hold[
                    $CellContext`f[2, True]], "Pattern" -> $CellContext`f[
                    PatternTest[
                    Pattern[$CellContext`x, 
                    BlankSequence[]], BooleanQ]], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> False, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, AutoDelete -> False, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
           False, BaselinePosition -> {1, 1}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   Failure[
   "ArgumentMatchFailure", <|
    "MessageTemplate" -> 
     "`1` does not match `2` because its argument `3` does not match `4`.", 
     "MessageParameters" -> {
       HoldForm[
        $CellContext`f[2, True]], 
       $CellContext`f[
        PatternTest[
         Pattern[$CellContext`x, 
          BlankSequence[]], BooleanQ]], 
       HoldForm[2, True], 
       PatternTest[
        Pattern[$CellContext`x, 
         BlankSequence[]], BooleanQ]}, "Type" -> "Normal", "HeadSubmatch" -> 
     Success["Match", <|
       "Pattern" -> 
        ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
        "MatchInfo" -> 
        IconizedObject[
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
       Failure[
       "PatternTestMatchFailure", <|
        "MessageTemplate" -> 
         "`1` does not match `2` because it does not satisfy `3`.", 
         "MessageParameters" -> {
           HoldForm[2, True], 
           PatternTest[
            Pattern[$CellContext`x, 
             BlankSequence[]], BooleanQ], BooleanQ}, "Type" -> "PatternTest", 
         "Submatch" -> 
         Success["Match", <|
           "Pattern" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
            "MatchInfo" -> 
            IconizedObject[
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
         IconizedObject[
           
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
            "Type" -> "PatternTest", 
             "Arguments" -> <|
              "Submatch" -> 
               ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                 "Type" -> "Pattern", 
                  "Arguments" -> <|
                   "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                  Hold[2, True], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                  "Bindings" -> {$CellContext`x -> Hold[2, True]}, "MatchedQ" -> 
                  True, "BaseMatchedQ" -> True|>], "Tests" -> {False, True}|>,
              "HeldExpression" -> Hold[2, True], "Pattern" -> PatternTest[
               Pattern[$CellContext`x, 
                BlankSequence[]], BooleanQ], 
             "Bindings" -> {$CellContext`x -> Hold[2, True]}, "MatchedQ" -> 
             False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
           Automatic]|>]}, "MatchInfo" -> IconizedObject[
       ChristopherWolfram`PatternErrors`MatchBranchObject[<|
        "Type" -> "Normal", 
         "Arguments" -> <|
          "HeadSubmatch" -> 
           ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
              Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
              "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>],
            "ArgumentSubmatches" -> {
             
             ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "PatternTest", 
               "Arguments" -> <|
                "Submatch" -> 
                 ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                   "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[2, True], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[2, True]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                 "Tests" -> {False, True}|>, "HeldExpression" -> 
               Hold[2, True], "Pattern" -> PatternTest[
                 Pattern[$CellContext`x, 
                  BlankSequence[]], BooleanQ], 
               "Bindings" -> {$CellContext`x -> Hold[2, True]}, "MatchedQ" -> 
               False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> 
         Hold[
           $CellContext`f[2, True]], "Pattern" -> $CellContext`f[
           PatternTest[
            Pattern[$CellContext`x, 
             BlankSequence[]], BooleanQ]], 
         "Bindings" -> {$CellContext`x -> Hold[2, True]}, "MatchedQ" -> False,
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.8823282545382566`*^9},
 CellLabel->"Out[16]=",
 CellID->361487830,ExpressionUUID->"e4cf9241-8033-4a04-bb38-bed3b335a4e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<StyledPattern\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__Integer", ",", "y___Integer", ",", "x__"}], "]"}]}], "]"}], 
   "[", "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882327706939568*^9, 3.882327744394342*^9}, {
  3.8823279631625*^9, 3.882327987322472*^9}, {3.882454200865993*^9, 
  3.8824542025212517`*^9}},
 CellLabel->"In[11]:=",
 CellID->564645097,ExpressionUUID->"08a717a0-004c-4bcd-803d-b6bc58abc3ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"], ",", 
   TemplateBox[{
     StyleBox["f", 
      RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
     StyleBox["\"[\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["y", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["___Integer", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\", \"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False], 
     TemplateBox[{
       StyleBox["x", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["\":\"", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False], 
       StyleBox["__", 
        RGBColor[0.2, 0.5, 1], StripOnInput -> False]}, "RowDefault"], 
     StyleBox["\"]\"", 
      RGBColor[1, 0.2, 0.15], StripOnInput -> False]},
    "RowDefault"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8823277446678963`*^9, {3.8823279569270773`*^9, 3.88232798791625*^9}, {
   3.8824541883075123`*^9, 3.882454203020891*^9}},
 CellLabel->"Out[11]=",
 CellID->894476210,ExpressionUUID->"54551cb0-1d23-444c-975d-7292aebdb331"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<Failure\>\"", "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"MatchInformation", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"x__Integer", ",", "y___Integer", ",", "x__"}], "]"}]}], "]"}], 
   "[", "\"\<Branches\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.882327995970999*^9, 3.8823279967709837`*^9}},
 CellLabel->"In[8]:=",
 CellID->1266929651,ExpressionUUID->"ae80d369-04d9-4a55-a0a6-0d27b2546446"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                 ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
                Appearance -> None, BaseStyle -> {}, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox[
               "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                FontSize -> 35], ContentPadding -> False, 
               FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
               StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\
\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\
\\\"}], Function[Short[Slot[1], 5]]]\\) does not match \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
                 ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
                Appearance -> None, BaseStyle -> {}, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox[
               "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                FontSize -> 35], ContentPadding -> False, 
               FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
               StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"2\\\
\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\
\\\"}], Function[Short[Slot[1], 5]]]\\) does not match \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Editable -> 
                    False, SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Editable -> 
                    False, SelectWithContents -> True, Selectable -> False], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Editable -> 
                    False, SelectWithContents -> True, Selectable -> False], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"], 
                    ImageSizeCache -> {8.777109375, {0., 8.777109375}}], 
                    Appearance -> None, BaseStyle -> {}, 
                    ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox[
                    "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                    FontSize -> 35], ContentPadding -> False, 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
                    StripOnInput -> False], 
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \
\\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, AutoDelete -> False, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"], 
                    ImageSizeCache -> {8.777109375, {0., 8.777109375}}], 
                    Appearance -> None, BaseStyle -> {}, 
                    ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox[
                    "\"\[WarningSign]\"", "Message", StripOnInput -> False, 
                    FontSize -> 35], ContentPadding -> False, 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> None, 
                    StripOnInput -> False], 
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \
\\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource["FEBitmaps", 
                    "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Editable -> 
                    False, SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4584", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[2, 3, 1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     AutoDelete -> False, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[2, 3, 1, 2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[2, 3, 1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Editable -> False, SelectWithContents -> 
                    True, Selectable -> False]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["16640", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> Hold[], 
                    "Pattern" -> Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[2, 3, 1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[2, 3, 1, 2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[2, 3, 1, 2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2, 3, 1, 2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                False|>, "HeldExpression" -> Hold[2, 3, 1, 2], "Pattern" -> 
              Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> True,
                 "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> True|>, "HeldExpression" -> Hold[], 
                "Pattern" -> Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  False|>, "HeldExpression" -> Hold[2, 3, 1, 2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[], $CellContext`x -> Hold[2, 3, 1, 2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\
\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) does not match \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\
\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) does not match \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource["FEBitmaps", 
                    "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4584", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[3, 1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[3, 1, 2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[3, 1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> Hold[2], 
                    "Pattern" -> Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[3, 1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[3, 1, 2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[3, 1, 2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                False|>, "HeldExpression" -> Hold[3, 1, 2], "Pattern" -> 
              Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> True,
                 "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> True|>, "HeldExpression" -> Hold[2], 
                "Pattern" -> Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  False|>, "HeldExpression" -> Hold[3, 1, 2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[2], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\
\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does \
not match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\
\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does \
not match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource["FEBitmaps", 
                    "SummaryBoxOpener"]], ButtonFunction :> (Typeset`open$$ = 
                    True), Appearance -> None, BaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], Alignment -> {
                    Center, Center}, ImageSize -> Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4584", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[1, 2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[1, 2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[1, 2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                False|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
              Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> True,
                 "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                Hold[2, 3], "Pattern" -> Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[2, 3]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  False|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[2, 3], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[\\\"1\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4456", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[2, 3, 1], "Pattern" -> Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    False|>, "HeldExpression" -> Hold[2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> 
                    Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    False, "BaseMatchedQ" -> True|>], SelectWithContents -> 
                    True, Selectable -> False], HoldForm], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                   True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                False|>, "HeldExpression" -> Hold[2], "Pattern" -> 
              Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
              False, "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1]}, "MatchedQ" -> True,
                 "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2, 3, 1], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                Hold[2, 3, 1], "Pattern" -> Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[2, 3, 1]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                    Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  False|>, "HeldExpression" -> Hold[2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
                  Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1], $CellContext`y -> 
            Hold[2, 3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\
\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) does not match \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"3\\\
\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) does not match \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"3\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4584", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[
                    1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], SelectWithContents -> True, Selectable -> 
                    False], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[3, 1, 2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1, 2]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True]}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[]}, "MatchedQ" -> True,
                     "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True|>, 
                    "HeldExpression" -> Hold[], "Pattern" -> 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[]}, "MatchedQ" -> True,
                     "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]}|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    True|>], SelectWithContents -> True, Selectable -> False],
                     HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[3, 1, 2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[3, 1, 2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1, 2]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                   True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
              Hold[3, 1, 2], "Pattern" -> Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                Hold[], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> False,
               "BaseMatchedQ" -> False|>], Automatic, Method -> 
            Automatic]|>]}, "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[]}, "MatchedQ" -> True,
                     "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> True|>, 
                "HeldExpression" -> Hold[], "Pattern" -> 
                Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                  Hold[]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[3, 1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                Hold[3, 1, 2], "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                  Hold[], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> 
                False, "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
            Hold[], $CellContext`x -> Hold[3, 1, 2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Success",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[Checkmark]\"", 
                Directive[
                 RGBColor[
                 0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
                 25], StripOnInput -> False], ContentPadding -> False, 
               FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
               StripOnInput -> False], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["\"Match\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Success[
    "Match", <|
     "Pattern" -> 
      ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
      "MatchInfo" -> 
      IconizedObject[
       ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\
\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\
\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4456", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[
                    1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> False|>],
                     SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1, 2]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> False|>],
                     Automatic, Method -> Automatic]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True]}], "}"}], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[3, 1], "Pattern" -> 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]}|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1, 2]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2], 
              "Pattern" -> Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                Hold[3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
              "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>]},
       "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1, 2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[3, 1], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[3, 1], "Pattern" -> 
                Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                  Hold[3, 1]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2], $CellContext`y -> Hold[3, 1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2], 
                "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
                  Hold[3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> False,
                 "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1, 2], $CellContext`y -> 
            Hold[3, 1], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\
\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does \
not match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\
\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does \
not match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) cannot be bound to \
\\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\) because it is \
already bound to \\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4584", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[
                    1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], SelectWithContents -> True, Selectable -> 
                    False], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[1, 2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1, 2, 3]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>], Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True]}], 
                    "}"}], HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[], "Pattern" -> 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]}|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    True|>], SelectWithContents -> True, Selectable -> False],
                     HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[1, 2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[1, 2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1, 2, 3]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[1, 2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                   True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
              Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
                Hold[], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> False, 
              "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>]},
       "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[], "Pattern" -> 
                Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> 
                  Hold[1, 2, 3], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[1, 2]}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "BindingMatchedQ" -> False|>, "HeldExpression" -> 
                Hold[1, 2], "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> 
                  Hold[1, 2, 3], $CellContext`y -> Hold[], $CellContext`x -> 
                  Hold[1, 2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
            Hold[], $CellContext`x -> Hold[1, 2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \\\"]\\\"}], Function[Short[Slot[1], \
5]]]\\).\"", "SummaryItem"]}}, GridBoxItemSize -> {
                    "Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4456", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[
                    1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> False|>],
                     SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1, 2, 3]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> False|>],
                     Automatic, Method -> Automatic]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True]}], "}"}], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                    False|>]}|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> True|>], 
                    SelectWithContents -> True, Selectable -> False], 
                    HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1, 2, 3]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2], 
              "Pattern" -> Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
                Hold[1], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
              "BaseMatchedQ" -> False|>], Automatic, Method -> Automatic]|>]},
       "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                Hold[1, 2, 3], "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2, 3]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[1], "Pattern" -> 
                Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> 
                  Hold[1, 2, 3], $CellContext`y -> Hold[1]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2], 
                "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> 
                  Hold[1, 2, 3], $CellContext`y -> Hold[1], $CellContext`x -> 
                  Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1, 2, 3], $CellContext`y -> 
            Hold[1], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["Failure",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              FrameBox[
               StyleBox["\"\[WarningSign]\"", 
                Directive["Message", 35], StripOnInput -> False], 
               ContentPadding -> False, FrameStyle -> None, 
               FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", RowBox[{\
\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"2\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{\\\"x__Integer\\\", \\\",\\\", \\\"y___Integer\\\", \\\",\\\", \
\\\"x__\\\"}], \\\"]\\\"}], Function[Short[Slot[1], 5]]]\\) because its \
argument \\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], 5]]]\\) does not \
match \\!\\(\\*TagBox[\\\"x__\\\", Function[Short[Slot[1], 5]]]\\).\"", 
                    "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 TagBox[
                  GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ArgumentMatchFailure\"", "SummaryItem"]}}, 
                   GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox["\"Normal\"", HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"HeadSubmatch\"", "\": \""}, "RowDefault"],
                     "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    
                    TemplateBox[{"\"ArgumentSubmatches\"", "\": \""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    ",", 
                    InterpretationBox[
                    RowBox[{
                    TagBox["Failure", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[WarningSign]\"", 
                    Directive["Message", 35], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"\\!\\(\\*TagBox[\\\"2\\\", Function[Short[Slot[1], \
5]]]\\) cannot be bound to \\!\\(\\*TagBox[\\\"x__\\\", \
Function[Short[Slot[1], 5]]]\\) because it is already bound to \
\\!\\(\\*TagBox[RowBox[{\\\"HoldForm\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\
\\\", \\\"2\\\", \\\",\\\", \\\"3\\\", \\\",\\\", \\\"1\\\"}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\).\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"BindingMatchFailure\"", "SummaryItem"]}}, 
                    GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0}}}], 
                    "SummaryItem"]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Pattern\"", HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Submatch\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["Success", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], ButtonFunction :> (
                    Typeset`open$$ = True), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], ButtonFunction :> (
                    Typeset`open$$ = False), Appearance -> None, 
                    BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    FrameBox[
                    StyleBox["\"\[Checkmark]\"", 
                    Directive[
                    RGBColor[
                    0.3607843137254902, 0.596078431372549, 
                    0.3803921568627451], 25], StripOnInput -> False], 
                    ContentPadding -> False, FrameStyle -> None, 
                    FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Pattern\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi", "[", "\"Pattern\"", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Expression\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"HeldExpression\"", HoldForm], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"Symbol", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, SelectWithContents -> True, Selectable -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["\"Match\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Success[
                    "Match", <|"Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], Selectable -> 
                    False, Editable -> False, SelectWithContents -> True], 
                    HoldForm], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["4456", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> Hold[
                    1, 2, 3, 1], $CellContext`y -> Hold[], $CellContext`x -> 
                    Hold[2]}, "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> False|>, "HeldExpression" -> Hold[2],
                     "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], SelectWithContents -> True, 
                    Selectable -> False], HoldForm], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    Failure[
                    "BindingMatchFailure", <|
                    "MessageTemplate" -> 
                    "`1` cannot be bound to `2` because it is already bound \
to `3`.", "MessageParameters" -> {
                    HoldForm[2], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    HoldForm[1, 2, 3, 1]}, "Type" -> "Pattern", "Submatch" -> 
                    Success["Match", <|
                    "Pattern" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi["Pattern"], "Expression" -> 
                    HoldForm["HeldExpression"], "MatchInfo" -> 
                    IconizedObject[
                    ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
                    IconizedObject[
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> False|>, 
                    "HeldExpression" -> Hold[2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>], Automatic, Method -> 
                    Automatic]|>], Selectable -> False, Editable -> False, 
                    SelectWithContents -> True]}], "}"}], HoldForm], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                    TemplateBox[{"\"MatchInfo\"", "\": \""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    InterpretationBox[
                    DynamicModuleBox[{Typeset`open = False}, 
                    TemplateBox[{"Expression", 
                    RowBox[{"MatchBranchObject", "[", 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "IconizeEllipsis"]], "]"}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["17152", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    Dynamic[Typeset`open]}, "IconizedObject"]], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Normal", 
                    "Arguments" -> <|
                    "HeadSubmatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
                    "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
                    True|>], "ArgumentSubmatches" -> {
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3, 1]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "Pattern" -> Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3, 1]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                    True|>, "HeldExpression" -> Hold[], "Pattern" -> 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], 
                    
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Pattern", 
                    "Arguments" -> <|
                    "Submatch" -> 
                    ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> False|>, 
                    "HeldExpression" -> Hold[2], "Pattern" -> 
                    Pattern[$CellContext`x, 
                    BlankSequence[]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> False|>]}|>, "HeldExpression" -> Hold[
                    $CellContext`f[1, 2, 3, 1, 2]], 
                    "Pattern" -> $CellContext`f[
                    Pattern[$CellContext`x, 
                    BlankSequence[Integer]], 
                    Pattern[$CellContext`y, 
                    BlankNullSequence[Integer]], 
                    Pattern[$CellContext`x, 
                    BlankSequence[]]], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
                    "BaseMatchedQ" -> True|>], SelectWithContents -> True, 
                    Selectable -> False], HoldForm], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Failure[
    "ArgumentMatchFailure", <|
     "MessageTemplate" -> 
      "`1` does not match `2` because its argument `3` does not match `4`.", 
      "MessageParameters" -> {
        HoldForm[
         $CellContext`f[1, 2, 3, 1, 2]], 
        $CellContext`f[
         Pattern[$CellContext`x, 
          BlankSequence[Integer]], 
         Pattern[$CellContext`y, 
          BlankNullSequence[Integer]], 
         Pattern[$CellContext`x, 
          BlankSequence[]]], 
        HoldForm[2], 
        Pattern[$CellContext`x, 
         BlankSequence[]]}, "Type" -> "Normal", "HeadSubmatch" -> 
      Success["Match", <|
        "Pattern" -> 
         ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
         "MatchInfo" -> 
         IconizedObject[
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], "ArgumentSubmatches" -> {
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Success[
        "Match", <|
         "Pattern" -> 
          ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
          "MatchInfo" -> 
          IconizedObject[
           ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi, Automatic, Method -> Automatic]|>], 
        Failure[
        "BindingMatchFailure", <|
         "MessageTemplate" -> 
          "`1` cannot be bound to `2` because it is already bound to `3`.", 
          "MessageParameters" -> {
            HoldForm[2], 
            Pattern[$CellContext`x, 
             BlankSequence[]], 
            HoldForm[1, 2, 3, 1]}, "Type" -> "Pattern", "Submatch" -> 
          Success["Match", <|
            "Pattern" -> 
             ChristopherWolfram`PatternErrors`MatchBranchObject`BranchFailure`\
Private`mi["Pattern"], "Expression" -> HoldForm["HeldExpression"], 
             "MatchInfo" -> 
             IconizedObject[
              ChristopherWolfram`PatternErrors`MatchBranchObject`\
BranchFailure`Private`mi, Automatic, Method -> Automatic]|>], "MatchInfo" -> 
          IconizedObject[
            
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
             "Type" -> "Pattern", 
              "Arguments" -> <|
               "Submatch" -> 
                ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                  "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                   Hold[2], "Pattern" -> BlankSequence[], 
                   "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> True, 
                   "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> False|>, 
              "HeldExpression" -> Hold[2], "Pattern" -> 
              Pattern[$CellContext`x, 
                BlankSequence[]], 
              "Bindings" -> {$CellContext`x -> 
                Hold[1, 2, 3, 1], $CellContext`y -> Hold[], $CellContext`x -> 
                Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> False|>], 
            Automatic, Method -> Automatic]|>]}, "MatchInfo" -> IconizedObject[
        ChristopherWolfram`PatternErrors`MatchBranchObject[<|
         "Type" -> "Normal", 
          "Arguments" -> <|
           "HeadSubmatch" -> 
            ChristopherWolfram`PatternErrors`MatchBranchObject[<|
              "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
               Hold[$CellContext`f], "Pattern" -> $CellContext`f, 
               "Bindings" -> {}, "MatchedQ" -> True, "BaseMatchedQ" -> 
               True|>], "ArgumentSubmatches" -> {
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[1, 2, 3, 1], "Pattern" -> BlankSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> Hold[1, 2, 3, 1]}, 
                    "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
                  "BindingMatchedQ" -> True|>, "HeldExpression" -> 
                Hold[1, 2, 3, 1], "Pattern" -> Pattern[$CellContext`x, 
                  BlankSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> Hold[1, 2, 3, 1]}, 
                "MatchedQ" -> True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[], "Pattern" -> BlankNullSequence[Integer], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                    True, "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> 
                  True|>, "HeldExpression" -> Hold[], "Pattern" -> 
                Pattern[$CellContext`y, 
                  BlankNullSequence[Integer]], 
                "Bindings" -> {$CellContext`x -> 
                  Hold[1, 2, 3, 1], $CellContext`y -> Hold[]}, "MatchedQ" -> 
                True, "BaseMatchedQ" -> True|>], 
              
              ChristopherWolfram`PatternErrors`MatchBranchObject[<|
               "Type" -> "Pattern", 
                "Arguments" -> <|
                 "Submatch" -> 
                  ChristopherWolfram`PatternErrors`MatchBranchObject[<|
                    "Type" -> "Atomic", "Arguments" -> <||>, "HeldExpression" -> 
                    Hold[2], "Pattern" -> BlankSequence[], 
                    "Bindings" -> {$CellContext`x -> 
                    Hold[1, 2, 3, 1], $CellContext`y -> 
                    Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> True, 
                    "BaseMatchedQ" -> True|>], "BindingMatchedQ" -> False|>, 
                "HeldExpression" -> Hold[2], "Pattern" -> 
                Pattern[$CellContext`x, 
                  BlankSequence[]], 
                "Bindings" -> {$CellContext`x -> 
                  Hold[1, 2, 3, 1], $CellContext`y -> Hold[], $CellContext`x -> 
                  Hold[2]}, "MatchedQ" -> False, "BaseMatchedQ" -> 
                False|>]}|>, "HeldExpression" -> Hold[
            $CellContext`f[1, 2, 3, 1, 2]], "Pattern" -> $CellContext`f[
            Pattern[$CellContext`x, 
             BlankSequence[Integer]], 
            Pattern[$CellContext`y, 
             BlankNullSequence[Integer]], 
            Pattern[$CellContext`x, 
             BlankSequence[]]], 
          "Bindings" -> {$CellContext`x -> Hold[1, 2, 3, 1], $CellContext`y -> 
            Hold[], $CellContext`x -> Hold[2]}, "MatchedQ" -> False, 
          "BaseMatchedQ" -> True|>], Automatic, Method -> Automatic]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.882327997315441*^9},
 CellLabel->"Out[8]=",
 CellID->242609762,ExpressionUUID->"a7c5492a-892c-4918-984b-3781ecf0945e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"MatchInformation", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "2"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"1", ",", 
     RowBox[{"_Real", "|", "_Integer"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.882323630759037*^9, 3.882323642381979*^9}},
 CellLabel->"In[4]:=",
 CellID->477047762,ExpressionUUID->"a5786c65-e838-498f-8146-08446b737916"],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  RowBox[{"MyFunction", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Input",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"In[1]:=",
 CellID->593829399,ExpressionUUID->"319c8f8b-235d-4ae9-86ce-b33d286b7d99"],

Cell[BoxData[
 TagBox[
  FractionBox[
   SuperscriptBox["a", "2"], 
   RowBox[{"b", "+", "c"}]],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Output",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"Out[1]=",
 CellID->197444189,ExpressionUUID->"aa2f47f9-646d-4498-a847-ba4e20c4d551"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scope", "Subsection",
 TaggingRules->{},
 CellID->964056545,ExpressionUUID->"a154f45a-d012-41ae-94e4-3ef75d188af5"],

Cell["\<\
Give more examples showing the range of features in the paclet:\
\>", "Text",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->217390316,ExpressionUUID->"bb8f1631-b3ce-408c-aff5-3b46793836ae"],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  RowBox[{"MyPlot", "[", 
   RowBox[{
    RowBox[{"MyFunction", "[", 
     RowBox[{"a", ",", "3", ",", "4"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "1", ",", "10"}], "}"}]}], "]"}],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Input",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"In[1]:=",
 CellID->978490832,ExpressionUUID->"0c459e53-d161-4c58-8f12-1e83e61d70e0"],

Cell[BoxData[
 TagBox[
  GraphicsBox[{{{}, {}, 
     TagBox[
      {RGBColor[1., 0.4, 0.], AbsoluteThickness[3], Opacity[1.], 
       Dashing[{Small, Small}], CapForm["Butt"], LineBox[CompressedData["
1:eJw1VAlQU1cUDWEpCEgwARECJPloAvk6MK3g2Oo7FVtZiihWbCsobh1UlqIU
KFarY5GyqWURQVwQBdmsMlgBmYpBBEEsSl0oQksFQTFDVGRX+37S3pk//9//
37v3/HPOu9KNkQFb+Dwez49e3F0XGqKYNpz0kbeKBD/6VD/OVEO6+SbJjptU
xMeMr0y01pDMSftk/m4VybAxCJw+V0NSBQ7h4osqcrQrIzHhKw2Rnz3V6Wtb
T1yvyC1ML2kIXVRxfKieDN2sX1K+9QUxfyMMKjvXQPwh3FDf/pKsGqi9MW/l
TTLu9uT87N7XRNonv7fY/g5Jy46Ysb9ujKRazT96oOceKd/aHZV8cJKUnbv2
gZljJ8nN4eIt+cFV82hX1d+kyiFhcGUVDxRkx+3RxyTA+/jeOUv4WO3qUixs
6ydbeZH7DBr04dk/Pybp2SBZdGz1ydK5hvCzSvV5ZqAho70b8u9XGiEkxt/B
ettLUjTgNe+d1Bitt7gYJnmnmeqpRBN49cSLzi8bJXGmToo9ZqZoOOQWO1c6
Qbzp6jcxZmisqUoz0kyRRueF6S3vzBFRoFdrOIOH1M5QisACSyfUg3XVerg6
Pe/909ECeK2Ystm5Rh8WNK30sIQsLC7+LGuILw8suN+gtsSIIuiQ6rURJoPC
G95WzEBIX5usc9wYneN7ttVGC5HjYpP1h4kpco3tTqxzFuHyHR6VzBwDHWUT
QWoRqikaay8LWNnf7CNnrHCp8LtG5xoBNn/4l3/aGmtsV45kd7VbQu5mXCa2
nYmmo1eOHLYQonf/idaS32eidPGatReJCGOqzSUhmTbQ6pZhBd+m9yiFs0Cb
h8qeW2M3mb+uxsQWw2GBu8+720B28Nsou1Zb7MvyTAkrmoUuJ6N9WfvtoCm6
4ethYoeTpeUP17uLofVRuBha/cbEaPfbKPhi3F6Hv9weBRzt0Y5ICeufLI5y
wNPLv+j3p0pgHlWW0qlwRC1FGx8oxcUV23NjHzliAQdUItPh95eg+MxyCPUY
qM1/c80pkUAQ7166+AGDC7SKwlyKsVWPzx677gQDmqrDpSg8dl1yoWI2llH3
OzVJURtNER6Zg7scrS4yeCR9HNJ3WI7PuIcEGbQ+3asAZenq824ZtH6PdIZ4
8B93WzC6/4pzwXrnFkFjLoNrzfmf/LpTiawtP20Kzvv/uxIt9PWr4xTXjtCf
1d8r4WFbt1aSz4Aegub8BOV/PDI63bKV0NqqksEu6saeGiW0tm1lUP+aGobP
gmZ+r24z4E5fkRGLzwPkp5LaGMymMniasjoc7Qy47fEiFjmc7H8y+JqLOSy0
x/cJg2kPCr5Z5MPixaZbwb4DDLgp0LGcBa12oecpg3Aqy4sAFoYF6Qv11Aw4
tyqCWHRz4+AVA235CBaitqUPNcOMjt8dLLTzZITBiSFqiFgWCtqucJyBdgzt
ZbGOM9gko9PnRxaZtFz7FKPzTxKLZm6cvGXAtb+bxur28ZzAsRORzuJfVG0R
2w==
        "]]},
      Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.61803],
   Axes->{False, False},
   AxesLabel->{None, None},
   AxesOrigin->{1., 0},
   DisplayFunction->Identity,
   Frame->{{True, False}, {True, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->FrontEndValueCache[{{Charting`FindScaledTicks[
        (Charting`SimpleTicks[#, #2, 6]& )[
         SlotSequence[1]], {Identity, Identity}, RotateLabel -> 0]& , {}}, {
      Charting`FindScaledTicks[
        (Charting`SimpleTicks[#, #2, 6]& )[
         SlotSequence[1]], {Identity, Identity}, RotateLabel -> 
        0]& , {}}}, {{{{0., 
         FormBox["0", TraditionalForm], {0.01, 0.}}, {5., 
         FormBox["5", TraditionalForm], {0.01, 0.}}, {10., 
         FormBox["10", TraditionalForm], {0.01, 0.}}, {15., 
         FormBox["15", TraditionalForm], {0.01, 0.}}}, {}}, {{{2., 
         FormBox["2", TraditionalForm], {0.01, 0.}}, {4., 
         FormBox["4", TraditionalForm], {0.01, 0.}}, {6., 
         FormBox["6", TraditionalForm], {0.01, 0.}}, {8., 
         FormBox["8", TraditionalForm], {0.01, 0.}}, {10., 
         FormBox["10", TraditionalForm], {0.01, 0.}}}, {}}}],
   FrameTicksStyle->Directive[
     StrokeForm[
      Opacity[0]], FontOpacity -> 1],
   GridLines->{Automatic, Automatic},
   GridLinesStyle->Directive[
     AbsoluteThickness[1], 
     GrayLevel[0, 0.2]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{1, 10}, {0., 14.286}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Prolog->{
     GrayLevel[0, 0.7], 
     RectangleBox[
      Scaled[{0, 0}], 
      Scaled[{1, 1}]]},
   Ticks->{Charting`FindScaledTicks[
      (Charting`SimpleTicks[#, #2, 6]& )[
       SlotSequence[1]], {Identity, Identity}, RotateLabel -> 0]& , 
     Charting`FindScaledTicks[
      (Charting`SimpleTicks[#, #2, 6]& )[
       SlotSequence[1]], {Identity, Identity}, RotateLabel -> 0]& }],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Output",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"Out[1]=",
 CellID->980074188,ExpressionUUID->"cd3e5b1e-3436-4602-9192-1789d2264990"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  InterpretationBox[Cell[
   "\t", "ExampleDelimiter",ExpressionUUID->
    "e8900b1a-cec6-463b-aa6d-d78cdd92a356"],
   $Line = 0; Null],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "ExampleDelimiter",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->717218889,ExpressionUUID->"f6555d65-5e7e-455c-9e9a-70649114b531"],

Cell["\<\
Use screenshots to show features like notebook styles, palettes and external \
operations:\
\>", "Text",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->287792797,ExpressionUUID->"094c1119-3437-4840-9ddf-703129eb2a58"],

Cell[BoxData[
 TagBox[
  RowBox[{"ViewWebsite", "[", "\"\<wolframcloud\>\"", "]"}],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Input",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"In[1]:=",
 CellID->794331063,ExpressionUUID->"03030d6d-20d3-4f11-9dd9-4f43af09f380"],

Cell[BoxData[
 TagBox[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3QeYXmd553/+/91/2d2UzW4Skg1LSQhlCUmAQGCTbEKSTUINPdTQewKE
HsAg426DCwbcsMEVA8YGDAYXsLGt3ixZVrFkS66SJdsqU9XGe8/9lYebOXrf
vKPpM9/PdV++xmfOe85zyjt6fjPP+5zHveX9L3vH//2IRzziQ/9//Odlb/7Y
cz/4wTf/68v/c/zPK9/3oXe/831vf9vz3vfht7/z7R989lv+XSw8Of7zpn//
iEcMfv2QJEmSJEmSJEmSJEmSJEmSJEmSJHVsoNivmWufJEmSWpjsnprGUc07
5iMNmeyfOpIkSVPXZPfUNI46yUd1HW6JvWl36tdM1KcZp1eSNEkm+18Ajb3J
7qlpXJBuSDqknlZZyXw0C032Tx2NvcnuHUjS7DXZ/wJo7E12T03jYqT5iHV4
1fo0L/1UkiRJkqY50g1Jh9RTU5L5SJIkSdLs0Uk+apWMFqc70t2SJEmSNM2R
bkg6rVKS+UiSJEnSbNB5PuIzSnzAcG4yGUmSJEmaeUg6pB4SEGnIfCRJkiRp
tmmfj3hGEn9X6kp8dmmyWy1JkiRJ44XUQwIiDdVnyJqPJEmSJM0e5iNJkiRJ
gvlIkiRJkmA+kiRJkiSYjyRJkiQJ5iNJkiRJgvlIkiRJkmA+kiRJkiSYjyRJ
kiQJ5iNJkiRJgvlIkiRJkmA+kiRJkiSYjyRJkiQJ5qPxdn26MH1NkiRJmubo
2dLLney+9tgzH40385EkSZJmEvOR+ejQcM9cnXrTQ5IkSdI0R8+WXu7MS0nm
o/FjPpIkSdLMYz4yHx0a/vJoMpIkSdLMQy+XHu8YdqFvTdek89LZiaF930+3
JNZflZamMWmA+Wj8mI8kSZI0U5mPxiof3ZGuSOeneoAT7+ZES36Y7kyj3zIX
cbLvXEmSJGm80OMdfc/57oeTzsXp24khfDekH6fvpIsSS76VfpLGpBnmI/OR
JEmSdGjMR6PZ16Z0efpRui6tTmNyOIeAC8HRkY++l2jtaLZsPpIkSdLMNib5
aEMi6fBnFMbLsZw/Xtye+NPGVYkMxYi7a9MomwHz0RTJR1u3br3yyitvvPHG
cb2Bx8/AwMCll14aV3PY8rVr11588cXbtm2blFZNTa2u9fr162P5JZdccv31
109Kw0Zq/vz50eDNmzdP5E63bNkSO503b95E7lSSJLViPjq0vZA1+HMYh8NM
gGvTmBzIKNESWkULaS0X4tC2OaJ8FBltzpw5J5100rjewOMnjjfaH5l32PIL
Lrjg8MMPd4aK6qDXOm68OQ87/fTTJ6ttI/LFL34xWrt8+fKJ3OlNN90UO/3C
F74wkTuVJEmtjEk+ImiQdJakVmvelFiTP7jwBw5G4o2yGbUx5qNplI+iVUcf
fXQE5A6XT4xrrrkm2h9XuS7s7+8/4ogjHGQ4TPNax3vtyCOPjIVf/vKXFy5c
eNddd01i8zpnPpIkSeajkW6ffHFZqh+wWpfG5BDa2Jhu7gBj/BhrRwuZVPCS
tD6NdO/jlI++8Y1vxJpXXnllh8snxqmnnnr88ccPDAzUhXFio0kLFiyYlCZN
Wc1r/eCDD/KXo3izTGLDRsp8JEmSxiQf8fEWut+3pVYd+x8X5CPG45GYRtkM
mI+mZj6Kkx995n379jXXHE0+2rNnT3d3d/uWxDqx671793bY8rBt27bY9Xe/
+91hy7/1rW/F8h07dnS+qRkjouL27duHBUY089F9991HPoq3W5ttxrWLSzNs
IdfroLdKFXdUtCf+WxfG7mJhJwcy7IVok4/aHP4h6Ovr27VrF1+PNB+1af+w
dTpp7SGfRkmSZirz0Ui3zwR9HAKj19gOH786t2N8/Oqu1Ml+WfMb6Zsd+26i
hbSWqQK/nkZ67IeWjyJrnHfeeUcddVT872c/+9mLLrpo586drHPdddcdffTR
Q59SOTpFv7HV8njJkiVL4utLL7303nvvPeecc1gh9nL55Zc3e3RLly790pe+
dPjhh7Pa2WefHTdhXSH64WvXrm12xSNOxvoReOvCSFix6zPOOIP/jRAa/zus
WxvXNBbGua0LTz/99Fi4bNmyiXnJQwczmu3Ea2OdY489Ns5J/De+jiX1JTUf
9fT0HHPMMUcccQTnPK57bC12xJpDly8uDWEkDG0ndnrqqaeyMG6V0047LbJD
3VHsIl5+zz33xL3NHRI7ih8jcQXj/jzrrLN4bTTyO9/5TvOyMsEmB3LkkUfG
/bBmzZq6wkHz0b95+Ndee200ppmmTznllFg+7C9o8+fPj/uWe/K4446LOy12
12E++jfb30lrR38aJUma2cYkH9U5Fjrp8LMOf3BhPN6NaZTNgPloSuWj6MVF
Z2zOz4vMwu+r44YZ6kjTSQuRg1otj5fMmzePzmQNUEObrX+t4ANExKsTTjhh
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
//nmp6WWLl0652DPlJEkSdKMNOb5aNKZj8bPVMhHN91008knn3zJJZeM7WZ3
7doVm7322muHLb/66qtPOeWUnp6esd2dJEmSpibz0WS3dzqZCvlIkiRJGj/m
o8lu73RiPpIkSdLMZj6a7PZOJxem3jTZd64kSZI0lujlXpQmu989lsxH48d8
JEmSpJnKfGQ+Gqnr0zXJlCRJkqSZoSfRy6XHO9n97rFkPho/5iNJkiTNPOYj
89FocM/wl8evSZIkSdMcPdsb0mT3tcee+Wi8mY8kSZI0k5iPzEeSJEmSZgPz
kSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9JkiRJ
EsYjHz0kSZIkSVOM+UiSJEmSYD6SJEmSJJiPJEmSJAnmI0mSJEmC+UiSJEmS
YD6SJEmSJJiPJEmSJAlTOh8N7I8a2Lt3sPZN9dqftXffvihJkiRJU8HeNJDM
R+YjSZIkaTabUflIkiRJkiaQ+UiSJEmSMOXyUY6p48ve9Wujtpx3ZtTWb54/
WBefO6VqS9aDF38tatk3Loy68JvfivrWN78ZJUmSJGmyfCudnzakA4Gj7Vg7
85H5SJIkSZp5ZkY+Yq4Dvt5y/llRN/7yI6IWPv5XohY85henVM3NWvWY/xQ1
57cfGfXIxz8h6omPf3yUJEmSpMnyxPSr6cJEymDeBvOR+UiSJEmaPWZePtr6
zQuiSEbLnvWEqKXP+O1Dr6dntV8ywlqUtfYZj4064ZlPiXrKs54d9ZxnPStK
kiRJ0mR5TnpSuiSZj8xHkiRJ0uw0A/PRN86LWvDYX4wijyz5g0dPqVqYteYP
HhV13NOeGPXEZzwz6lnPeEaUJEmSpMlCSmKsHXM1mI/MR5IkSdLsNPH5iC33
pe1pSuSjP3zMYLX8LpXr/P5/H6yRbsF8JEmSJE15452PSECkoX2F+ch8JEmS
JE015iPyzuL/8ZtRS5/+uKglT3tsFPMwMCP3HUd9MmrzV0+LWvDoX4g6sOU/
fGwUr1r8lP8WteSpjxos85EkSZI0DZmPzEeSJEmSMKvzUSajpc98fNSKv3pG
1MLf+ZWoRU/41aglT/2tqGXPfmLU7s33RO3fuzdq5fP/JGrRkx45WE8erIWP
+6Wom/7iD6OWPedJUe1TkvlIkiRJmprMR+YjSZIkSZil+Yi5FDLFLHvm46N6
16+N2va9S6LWvvHlUfN/8/+N2vadb0RtveSCqLs+f2TUriULouY/6j9E3fLK
v43acu4ZUWSolX/77KjFT/6NqFYzNpiPJEmSpKnJfGQ+kiRJkoRZmo9KSmJm
hp61t0Sxhf677ojqWrEsqv/eu6OW/+lTohY96dejulevHKxVN0X13nZr1IEz
tmtn1LJnPymKsXnmI0mSJGl6MR+ZjyRJkiRh1uWjzCzMyL30j34natETfy3q
gR99N6rvzo1RD/zoe1EbP/PhqL6NG6JWPu85UUuf9tionrWrou484fCo+y7+
WlT/XZuidi6eH3VgbnCKveeS0eejPyqay9svqcufmdqv0+q7zXVabe2ZRedb
G9vvNtVWtdraWG2nfZubSzo5V5IkSRpv5iPzUSd7abWO+ejQ2txcYj6SJEma
CmZRPspkxBi5hY/75cHK2bwXPPaXorb/5EdRdxx9WFT3ymVRXSuWRu3r7orq
Xb8maueCG6LYy65F86J2b7k36vZ/fV/UrqULo3hK7MLf/s+DlXs5MFt4GWt3
aPno99PTEr3opyeWt1+TvjfLn5T4brOH/weJ7zbbwB6fmp5S/F5iHV7LEr7L
fpupga9Zv65Tv/sHRTM78Ko/TK3OW93v/yjq8lZnsqrn6smJo2vmmnpEzbPX
6nqxNY7UrCRJkjRZzEfmo/pa81Gr7ZiPJEmSZoNZkY+YhyGTy6qX/XXUpsM/
FnX/5ZdE9ay5OWrP/VujHrzq+1E75v006q4Tj4y6++Rjo/Y8cH/Uvt6eqM3n
fDlq0+Efjdq1eH7U1m9/PWrvzu1RPetuiWKE3h1HfypqzeteHLX4934ripaM
NB/Rr35e+l+JRPDs9Lfp6QVL/iyxhEzEFt6R/mein09vnF49r/3TVFMS2+Fu
+fv0yvSq9IrEdv4kvTS9OrFN+v+0vCYjjoh1aqbj6/+d/jrV19KeFyS20Mx0
NWGR116TXptYwjafkzg/zfPPcZEK2cubEkdN2mI5reLM/12q16XuhSW0kKPg
TD43cV3ITa1G8UmSJGk8mI/MR+Yj85EkSZIwK/JRzpDAPAxr3/zyKNZ84AeX
Ra16yXOjVvzlM6J2LZkfNbBvX9Sql/5V1HWPeETUXaccG7X12xdFXf//PSKK
ebz3dXdH9d25KermF/zpUG0++4tR7OX2wz4Yteh3fzVq6dMeF9V5PqpX5+p0
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
kiRJEmZFPmJ+hswmi57wa1ELHvtLUYue9OtRLO9aujDqvou+GnXjLz0iasO/
vCNqX09P1I6510UxV8P+/r6ou046OurGX3xEFM+Z7btzY9TyP3lK1KInPTKK
vSx8/H+NYi+HNj9DxcgxsglL6JnznFbGg9X16VeTPuhvvy4xroyePNtkO4ya
Y02ehcq84mSuOj6t2WNnC2y5toQMxXLSCt/l3qvt5GuOjlb9SWLvbKdmLmbb
5tjZe/PY60wLPGuVmbRJW3yXltA2jpdjZ/wb32XmbTIXeaomHdpWj4Jz+4L0
j4nvsp0/Kjif7Jc28FqTkSRJ0sQzH5mPzEfmI0mSJGEW5SMqx8gx2zbfJcVs
v+7qqHXvfF3Ujb/wiKit37ogihkbHrzy8qieNTdH3f2F46K2//SaqPm/8f9E
Mfpu1/LFUYuf8t+iSENLn/7bUezx0J4P2wq99LqE/jnPP22uT9bgVfS9Wb/5
vFGWs+bvFyxnnVZ7ATmlrkMPv26Z7zYTTT06vvu0gu3UNrOd2rammkRISSSj
upx9NY+6tqTuly2QdFjeTDEsZx3OeR2DV9fkKOoea9taHZckSZLGg/nIfNTc
jvnIfCRJkjQ7zbp8VIt5G3LmhO5VN0Xdd/HXonYuuCGKmb2Zr/ue00+K2nz+
WVEPXPn9qL5Nt0V137w8avPZX4rq23R7FOPrFv/eb0XVMXVjm49a9Zzb96hr
vmi/habO99JqnfbbbPXaztfsRDNhtW9hq+23P4et9tj5Oe/8iCRJkjS2zEfm
o+Y65iPzkSRJ0uw0S/MRyeWpj4pa+ke/E9V/16aorpXLom7/+D9HLXrir0dt
u+ziqH3d3VF7Hrg/ivREqrr1vW+M2nHjtVH7unZFrfybZ0Uxl/j45SNJkiRJ
48F8ZD6SJEmShFmaj6jMR8ue9btRq17211GLnvhrUQsf98tRi578yKjlf/4H
UWQftn/LK/4matHv/tehYv1VL3lu1PI/fUrUgfF1LfZrPpIkSZKmJvOR+UiS
JEkSZnU+on7/v0fVZ8X+3Ozfj/6FKOb0Zqzdgsf8QhTfXfq0xw4Vz4Rd/NRH
RbUaWWc+kiRJkqayycpHvenBZD4yH0mSJElTwXjnIxIQaWiK5qPy3NhW6Yk5
HJb98ROiGJV3kAR0YAuPyWq3L/ORJEmSNDWZj8xHkiRJkmA+6qgyJS35/UcN
Vtuxc52U+UiSJEmamsxH5iNJkiRJmIH56JsXRC18/K9EMSLuwFwKh1ZPzzrw
v78zWD+35FBqUdbaZzw26oRnPiXqKX/87Kjn/PEfR0mSJEmaLM9JT0qXJPOR
+UiSJEmanWZePtpy3llRN/7yI6JISQse84tTquZmrXrMf4qa87hHRj3y8U+I
euLjH//Ex0uSJEmaNE9M/zVdmMxH5iNJkiRpdpoh+Wj//ii+7l6xNOrOYw6L
4rmud5909JSqO7O2nnRU1HWnnBB1whdOjTr1C1+IkiRJkjRZTk3Hp5WJlLE/
mY/MR5IkSdLsMTPykSRJkiRNFvORJEmSJGFK56P9+6MG9u6dFrU/S5IkSdJU
M5DMR+YjSZIkSTMkH0mSJEnSBDIfSZIkSRLMR5IkSZIE85EkSZIkwXwkSZIk
STAfSZIkSRLMR5IkSZIE85EkSZIkwXwkSZIkSTAfSZIkSRLMR5IkSZIE85Ek
SZIkwXwkSZIkSTAfSZIkSRLMR5IkSZIE85EkSZIkwXwkSZIkSTAfSZIkSRLM
R5IkSZIE85EkSZIkwXwkSZIkSTAfSZIkSRLMR5IkSZIE85EkSZIkwXwkSZIk
SRirfPRAMh9JkiRJmr46z0ckIPORJEmSpJnKfCRJkiRJMB9JkiRJEsxHkiRJ
kgTzkSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9J
kiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTB
fCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJ
kgTzkSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9J
kiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTB
fCRJkiRJMB9JkiRJEsxHkiRJkgTzkSRJkiTBfCRJkiRJMB9JkiRJEsxHkiRJ
kgTzkSRJkiTBfCRJkiRJMB+pEwMNk90izXzT666bXq2VJEmtmI/UCft+mnjT
666bXq2VJEmtmI8my/7EOeTr8XsVvbWRvqqT9Ue6zWZ7MPr+ZHObI9Vsw2i2
OZojqld5NFsbq+00z8NIr/hI99Jq+3WdkbZ5/Frb6qx2sk4rh/ZOP7QtHNp9
bgaUJM1U5qPJYj4a276W+Wj8tmM+ar9985EkSTOJ+UjVQFGX7007U3dqvnY8
+szTneekE63OUn/iruPnTHOdie+lt2ptX6K1fN35a6ev8ciekiRNLvORKvPR
2PKcdMJ8NH2ZjyRJM4/5aGLUXhz54jPp3enixHebPai65Pz09nRKarXH+iqu
yzvT4almnFaZ6MfpY+kV6S/T36bXp+PSutQ80lZnYEP6YHpfuiW1OgOdHONV
6T3po8XH2vrXRBsWprr9zrfJWT0jcbZJlJ0fUV3nwvTPxbzUfmv1DLPO8en9
ibN9Z2qu3749qxNnia19KXWync6PuifxXvin9JL03PSC9K50Sao9c9pQt8YZ
49p9PN2XRtPmuv2udF7iXfyiRGv5+h3pnLQjNbdT1VZ9JfFOPy110sK6ha+n
t6W6hea5Wpo45837nLN3TDor3ZiavydxxJ0kaWYwH00M85H5qPNjMR+Zj8xH
kiRNFvPRxOO8/X361fTaxHdrH6N+TX+bXuJvpT9KW1Nz/dp7JIv9SmILrXrv
DyZ6lf8jPTY9Jv1u+p306PTb6Rmp9pnZZrPHztcLEtv57+knqdnyTs4kX38x
PTI9Of239JttPSr9x0QqqdtvbpMzz2vr9n8jcSycN65vzVydJEfeTX+VHpfY
IympeSZbbYcz83eJ7dDa01Mn57l+94hES7gTXpPaH1d7zfvhhekJibuLlnPX
cadxhh+f3pzI2rSh3tWkA67d76fbUvtz2ElruabPS7SWc0JrWUJrOQra/zfp
+tSqDXUJyeg/p1enkbaTjPPL6R8SyzlX9fp+J3Enc5/zvqjvFO5w7gHW4Qx8
LdU2mJIkSdOd+WjimY/MR5X5yHzUXGI+kiRpspiPJlLtkxyZ6DvRj+WT3Xy3
OQZmfSITPSc9JV2bmtsfKN6SSDpzEuvQn2SdXelViVax/ZcnekGMq2GPn0t/
nn4v0WtlxB3br+2vXy9JpKqnphtS8yg6P5+MR3pi+tNEuqHljHH6agPfZVwc
owSbY5zo8f5FuiB9N9GrpB9+UnpT+sP0pPTMdGtqnofmUcxNJCz2+Mfpz9K2
VK9v3U4zH70yPS3RKq5vve7Ns1qXM+aN+7NeL3rvrVrSXj0D3FG0jV73HyTy
4KWJdRjr+KnEWeV3C4cltrYn8fW3E1eBs7cxtboKnbR2cXp64t1RW8v9QGsv
Tx9KnP+6Pj8nm9uvX38gkbkYIzfS1vJO513/1sTyZj66InHXcb+dnDiH3PMs
YYwuP4V4X/Cu/5fEfBrN341IkjS9mI8mkvmIr81HrY7CfGQ+4mvzkSRJk8V8
NJFqn+Rbif48Pc/mHAV1fT6TTp/k2YkU8/lUt197JtvT/06M+amjyGp/kt4U
22Q8Ep/Lpofc6ogY3fTiRN+PI7oy1WNp9jPpFdMrq+OODi0f8clxxuzRH241
I/RIt8l5++vUat7m6nvpWYnzyZmsZ6OuX5cwko2xcMemNybGlbHlZjvRzEdk
WxIN/V6+Xp5atadumXGPpAzuOlJMs7/dybmtmX1zIgOSr2nh91P77VyTmP2A
O5zldXwd7xfO//9MI81HtbXMrvD8RNIhJX0ztd8OR0Sm4Pxz1FtS3UttFbNh
MEKP32+030vzuD6duHMYi1iPq17lHyTeuWTPOo9H08rEDC2863mPHJ2aLZEk
aXoxH00k8xFLzEd1ffOR+ch8JEnS1GE+mki1z0Afg7E39EwYn8N3Obd1/U8k
8tF7E73KN6RWvaybE3uhb8bYttoqRn+xDtuk51O3Q8+zXvearW5P9ELpPb40
7U7N/tjE5CN64KzTbH9Ts501HzFnAn3aVttsjo/itZyNesbq9WIJOZQeOK9a
kRjXxKfjGcVUt1DPRjMfsV+uLGO02HIdA9k82/Uo+Iw/+YgxdXx9aPmobpm+
NPczdx2juWqrmtr3uuuxjD4f1a0xPpPWcofX2UjqnVB/s1HzGr+X4EjZDiNU
676mTj7idzX1nd5sITOcM/M/P1v4vQo/czo/z5IkTTXmo4lkPmJ985H5yHxk
PpIkaWoyH02k2pNkPgRm/eVT2Cckvlt7L/RPmP2YUTp8Vp1eH6OS6Lezfu2V
kblIDTzdlStVW3ViondED2d+arakqe6LkX5sh/4Sn1WvR8HXE5OPWs18PtJt
1nzUfoaE2k/m6b18Op6ZkOsTQpt9VM4A/XmeMcoZYzYMlnNcrZ5z2sxHjK/j
DDMHBTN7cNfV8YfNvMZ9wt3Fc1pJasxlPdL5GZpbZowZdwvzWtSWt98mve5m
m8c2H7FlrikzXdBaMixnr7ak1RbqT0vSBBmT5yyTMprtn9x8tCa1Olf1Xc/v
W3gvs4U6A0zn72VJkqYO89FEMh/xtfnIfGQ+Mh9JkjQ1mY8mXu1N8Rlz+pzM
ncvy2gNh3mlG9ZCSyFaMniJb/TixPqPa+JrMRR+JT/rXNoAReszTW0eCNfuf
TbV/yJgc5pqgX0ryYs2Jz0edj69rv832+aiqx0jvlKvDVaszXbB+7XnSq2Rm
hg8nlt+f2DtH1xyHVrdZl9Or5+5iDmdG/fH0z+Y5r1tjLohfT6cmzgYj/bhv
m/vt5Epxr3I/kxSYx7u55kiNVT6q3+WpsnW2jfajE9u3iufzMr6O+5/3At+t
7/qpnI/qcrb2usTPENJ0PRZJkqYX89HEMx+Zj8xH5iPzkSRJU5P5aOLVnglj
0hiF9YLUnWqfk5nA6TnTv2U5T5/8zVQ/6117JmSu30pHpdqSBxMzV9P3/mTi
u52PQeJr7gRGH7G196Rmq8Y7H/2v1Mlc3J1ss+Yj0kr7LTA3ch0/1kwT9bwx
wopnsLKvOlMHPpjo6/I00rq15tc1H5GGfph+lH4t8axV1m+OE+Pa0T9nFvc6
U0TN8iPNR6Qtsga5g+3XlrTfWid7GU0+qtthLCtpjnuVc9hMGZ1sbV5i9Cn3
xkWJ79Z8PfXzUd0CmZF8xNOZ70rttyBJ0tRkPpp45iPzkfnIfGQ+kiRpajIf
Tbzar2DUEz0T5l5gtu26/r8m+qVnJ5Z/LdH/YYxc7YfQ62ZmAHrddVwW6Mnz
mX2SRZ21uPOcUtETY4+0iuW1beOXj+ih0R9mTmbSJc/x/FbBEkZ21ZFvNcfV
fMTsFvWZnvX+ZywfW2M0Hc/NpH9+daptri3nGazcA3+S7k31SLl2tf9Z12mm
G7b/qkQ+Yn5pjpQ+MKMQych1X7xDuTo8+Zflhyey9mjy0WcTZ5VU2Jy5opOr
334vY5WPvpEYEcdM6czM38l2muswWo93HG37cuK70zcfcXdxRK2edt1J+yVJ
mgrMRxPPfGQ+Mh+Zj8xHkiRNTeajiVd7C4wsYpQR/RMSE9/l3NLf5rv16a43
Jcbq0OOqY1rWpqcn+ur1uY0gi9Gfoe9NIuC7nX/CuvZp353o/TKbMdup64xH
Pjoz0UOjj0fPkHGJ9Or5mrzAuETmLqjju2oftW6Tma6Zv+JVBQmCXMNsAyRN
vq6933rd69eHJVrFSDy+S0v4uiZZrhQpr56HVvmI81CvLKP1OBvMw1DP6gXp
kem0xHLG4x1aPqrHyzNnuUNelOpIyKmWj0jZnHPeTcyX0sl2mkd0TyKZss06
q//0zUecbVJk8znU5iNJ0vRiPpp45iPzkfnIfGQ+kiRpajIfTbzaX+pP9LHp
q/NcUb5Lovm9xCwKzOzNdxkrVedD4DP4fPfyxPL/nXam2pJNiZ4/vTXmH+a7
neeUekRvS/R+mfWX7473+LqaZZ6dyBrMZvBPDe9N9EJbPV23mbnoAf5uQQ6i
50zOJTvwXmien/o1V6Q+I7imnibaTJ+Zr+s2O8lHrMN4P5Y3t/P6xHVZn/gu
OW70+YicxR3C3cucJJ1vrZXxyEfMn1DH14105Fhdh3ccaZq2MVsF352++ejr
iSPivVB/G2M+kiRNL+ajiWc+Mh/xtfnIfGQ+kiRpqjEfTZbaD/yXxAirOnsz
n8qnR1qX1z48zxJltNjxieXkLF5b55eufZWt6bmJJHVk4rud5JR6FPTuGIHG
1t6emlubmOfD1k/9d67VNv88MZcCIxtXpI8njoIjWp7YQnOMYt0+OeXJiVGO
5A56tp8sWMK5/f3EWLv6bqpXtpmP6swepOy/TbSZecsZxUcWeGuq1/czafTz
MzAXdL1SjDrrfGud7GWs8hHZgevLbypq8u3kXq3rLEucc87zuYnv1nz0/sTv
TOqTndtr5lCufk1Y45GP+GlTZ0fp/GxLkjTVmI8mi/nIfGQ+Mh+ZjyRJmmrM
R5Ol9i7OSPSF6AOznCe68kl5PifO8t2Jr/k0Pb3WOoqGzMVn8Fs9PZav6UXT
X2VG7uZ4rVbo+bDmHanOXcyM0KxZ+34Tk4/uS3V030AL7bfJSDDGN9aRYGAv
7JGxdq9NjJys+61njK8/lngVc2jUOSWaGIPHPPD0ruvTReuVbZ+PwMwAv5qY
pYG5rFlyWarrj1U+ujhx1CSOG1Kz3z5SY5WP6ndXJdIrWxvpGFTW4eg4dpII
x35tYs36vmZWf54c/fI00rF8/ATg6jOmtK4z+nxUl/MbGPIRz7nm3wW+O5rM
K0nSxDMfTRbzkfnIfGQ+Mh9JkjTVmI8mS+2fkA7on9CXY8aA+qzVOl9u7Qnz
OeinJEbKMWruNYnMRf+n7rf2bfjcPf1tZhhgvuuaLFodRW0JfXX6vYwZY44I
vjvx+YjzwHc776G1ykd/lUhDnJPamyV91GPn+bN1m7UN2xPb5Lp/KDGiklka
vl3Q22f5SxJ90VYjJzvJRzznlOvOTBrMx04PmRF3df3R5KPaNvreJA6Ovebo
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
0eff0Rjp3kfTWt5ZnW+BNcfv/Vh//o/H9iVJmlzmIzWZjzTxzEetmI8kSZpI
5qOpZqBhYl7bfpv7GkbfB2u2dqQm5tjH6lp0chRj28KJ3NdYYcvcXa3uukNr
7Uh13ubRt7Zz7c/PaK7LeJwZSZKmI/PRVDOa3sh49GTYjvlo9Neik6MY2xZO
5L7GCls2H7U/LvORJEnjx3wkSZKkhw1kSbOX+UiSJEkPMx9ptjMfSZIkSRLM
R5IkSZIE85EkSbOBM2yovYGH9kXt3d8Xtf+hgShH2ml2Mh9JkjQbmI/UnvlI
gvlIkiRplhrIJJRzMuzbtTqqa90JUXsfemjv4NKISCYkzTrmI0mSpFnKfCQ1
mI8kSZJmqcxHEZCietccP1g/+cuo/u0row6MrxvInCTNGuYjSZKkWcp8JDWY
jyRJkmadknr67v9xVNeNL4jqu2Gwula8J2pgf1fUw2s6W4NmC/ORJEnSrGM+
klowH0mSJM0mAw9P9z6wf+/9UbuWviaq58YXRPXOf1lUz0//MmrPvedFHYhG
A/sHBmdykGY+85EkSdJsYj6S2jEfaXrx+YZSJ6byO6XZtqncWmkGyjkZSD09
d3w1aucNfxnVN+9lgzX3xVH9N74waufiV0f17d4e9fDoOkfZaeYzH2l6sR8l
dWIqv1PMR9IkMx9JbZmPJstAMdltmZkOjBxIk92W6WRfg3dpJ6bXuZr67w7a
Nl3OpzR9/Czd7Om7J2rnwldF9d74/Ki+uS+K6p33wqwXR+247s+iutd/IerA
BuKHxlT9uSGNFfPRZDEfjbep3wOcmsxHh2Z6naup/+4wH0njw3wk/dvMR5pe
7kt702S3RZqK9qQtabLbcnCbU30X09r+NLltk2a4gX2DlSlp160nRHXNfX5U
z6I3Dtb8lw/WglcO1pLXRvXedmbUzmVvidrTvS7q4YTlKDvNZOYjTS/mI6k9
85GklsxHUgfMRxOpjhW5Ld2Zmt+to1/ajzBp9d1Oxs8099JsA183WzKRLawj
l+ake1Jz+/XrrWlh6rwlrdZp/91OttB+nc7PZ/NV7bfWyXaqH6ST0umpvmdH
eg+M7V3U+b460f5aN89eq5az5CtpXarrjLTlnVy75jbrFvipwjul2RKW8O5Y
nVqdjfb3aqstd3IUn0ykJJbQ2lsSS76WVqZme5rHPtI21PXH9g6cyqMWNbvt
zxq0e+fKqO65fx3Vs/w9g3XXeVFdC18Z1b3w1VF9K/8pqnvd0VE7Frwkqnv9
56Ie3pr5SDOZ+Wgi1X9VzUedt9B81P78tN9aJ9upzEfmo3oeWt1drbbcyVGY
j6TJYD6SOmU+mkicMb4+J12cWNL+X+f6by5jzM5NzTXb92c62Vd7rf7177yF
nfdYmut8JrXKR/UMfzX9bdqdOt9Lc81WOjkbo99LXYd3HL3HztvT6h4AI50+
kA5L16cL0ofS9sT69Tx3svemVlvo/F49tF7og6l59tr3eGtrv5FuT3Wds9Pa
1P4YO79Gna9T90U+OjzVV9X93pCOSu1b1fxuXxrNHfipVPMRra35iPfvitQ8
xvZG8xOvueZofl6N5ietNNYG8pbsiepd/k9RPTf+fVTfyg9H9S59bVT/+mOi
elZ/Mqp71b9E9W46I6p70esHa+5LonZvuyLqQNbKecIn+7iksWc+mkjmo/Zb
MB91so75aKT7qsxHLDEfdf5a85FmCvOR1Cnz0USq/77T8/x2YklP4uuuxNgw
+qV1C/Rd6bVuTDtS3RcjZ1alVu2hN3Jz2pbuSvxbXz8rzSiXmkro2yxKXP2R
tvDWVPs/qD0KerOLE18fnepd1OyBkIaOTcekH6fmVcCmtDzVJFVxlpqjp/ia
o1uS6vWqGFG5NPGuqd/l/HM++bp5TsC1IMtwbjkzzX3dlGo7W2VJ7sbao664
E5pzYnAVOKLmJ+v3NXAd67wBnAeW70zN/fI1x8j5aR4vMxLQb28ur2eb91Sr
s8f6nLc1qR4LV/nj6YrEO6J9suAoliXeX81rUVtI8mL9VteOe4zzVt+V6CQf
zU+fS8028C7gbNfrxXb4qdL+DtyQOJPNc9IqH9Xxfq1wn9RjR7MNXMHmz0DO
A9eaJbyn6ru7ec7ZL+/x5ju0HnXzZ5o0yQ6kmMF81HfP+VFd1/9FVN+aI6P2
bZ8f1b/u6KjuFe8erNWfHizy0YYTonbNfWlU90+fH9Wz9I1RA/t2RT3kXA2a
ocxHE8l8VPduPqrfNR+Zj/jafNTqTMJ8JI2Y+UgaIfPRRKo90vMTY3VYMjd9
OB2fGP3yprQ+dSc+y/wPiR4OfVR6NYxAo7/Bmp9N7J1/8ckORyYSx4sTn8dn
O2clejIfTezlovT+dFx6c6KPQcqrLfx84rX0TMgsjOOiDZ9IHB1ng/7nOxNb
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
SWR33/1Ru5a/N6r3pvdE7Vz2lqiu1R+J6rv3gqiudcdF9d5xVlT/lkuidm/+
blTfrUdH9Sx65WAt+PvBmjdYvcveHNW37hNR3UvfGtW78FVRPYteE9W/6B+j
uhe+NOrBjedFHWjTDB9ll3eUT8WdocxHM4n5qHPmo5G2xHw0UuajsWI+0lgw
H5mPxpb5aCYzH02W+hl5lvB1s0/eanl9jmf9bnN5fU4os3mTg/hsNVeN3MTo
EV7FWJ3mv/51+3UvnbeQbdblzVEuzXVa7aX9WWq/Tt1Ls53tj7eu0zyWet6a
52GkZ6Opk3PbqrXtz0+zJa3uyX0NrdrZfG2r5XWEGPNmMFKL7TPusdURNa9U
5++dVuetfrfVWarbbL5fmmep1Xuqk+Xt29nJNltdhbH6+dPqLmq+I5pL6nbq
FvhXhrk+GFnHLByMx2POijoyuXl+mvdn+7uoubz9dTy0d7HGx8+Swv6BPVH7
Bnqi4sfK3p99b6aN/iKJDOzfE7XjljlRuxa/PKovAlHEoqVviOpe9eHBWv3x
qP71n4vas/WKqH3bl0b1rp0T1b3i3VE9S988WIteG9W79B8H6+Z3Re1c/Pqo
rgWvjuqZ+8LBmv+iwSJJzX1B1K6VH43q770zKt4A+R6YOee53jk/dw8N7Mny
2bgzh/losrTq+Yy+f9Jcbj5qtU4naaLV8dZ1OukNtjpXh9az6uTctmpt+/PT
bEmre3J4f9F8ZD4yH5mPJp/5yHw0fsxHs4X5aPao/5rzSXbmvOWT7NelyW2h
VO9SZk5m/ormdzUb1CvOnAnM1MF8JsyBUJ8WLWFg8AGp+/ft3xO1a/vlUX07
bozKsVA//zPkQJ92+o6++1n62Nd3b1T3mo8PVuag3uXviOpe/KqoXcvfEdW1
+LWDteTNUd0r3hXVe9c3o3Zv/kFU1y2HRfWuOyaq//ZTo3oXviKqZ/nbonbN
fXFU9+I3RPXNf3nUgXyU1Tv3xVHdN38oascdp0XtH9gbdZBzPm3kuR3Y97Mq
9u64Jarr7sui9u3eGfXwpeBemkmpcDYyH80e5iNNfeYjVeYjHRrzkfloLJiP
Zi/z0WxjD1PSzONPNg3s74nat3dH1M8t331XVN/tH4/qv+P4qD1bvxm1r/+B
qINtaXplJfrwgylvz9brovo2fS1qz7YfRvWu+WhUz01vjerfcFxUz9pPR3Wv
fG9U/8aTo3bffXZU/+ZvRfXe8fWo7nVHRvWu+8xgrT08ateiV0R1z31RVO+C
l0X1zHthVPe850f1zXvRYM19cVTvmo9HdS96ZdT+HTdFPdzM4fliiiIvt5h1
YU/Xxqje286J2rnwHVE9G06LOvDt/fsGi80cGITnz6Xpynw02/hulTTz+JNN
5iPz0RgwHymZj2an5ifZW30qWZosA8Vkt0WTrzk3RXOeBM1m+/f3R3Vtvjhq
394Hour80nt6VkZ1bTwsqnfTsVF7Hrw8au9950ft61oedbD5qKfyKKn92SMf
nAOhe8fiqJ6bPxDVv+ojg3XP6VG7Vn0kqnfVh6P23HNp1L77r43qveucqN3b
fjJYd54V1bvuiMHadFrUzlUfiurZ+JWovju+FtWz5HVR3QtfHtW1+FVRvas+
FtU17+8Ha+7fRPWu+Oeovo0nRvXe9M6o3ZsvixrYsyvq4cQxNc/nz+ZaqGPj
9vdtjuq98+uDddd3o3auPCJq+43/OFi3nRG1/6H+qIGH9kbx2v4Hb4rquX9Z
1MPp1TnApx/z0exkPtLUZz5SZT5Se+Yj89GhMh9pOPORJEmaxrL/SZ+2f/P5
UXsfuCzq4bmX9w5W6uu7N6p381lRu+/8ZFT/6jdH9d76gai+nT/Jujpq/77u
qJ/rzR/4kP4UmMO5ZI3+Pdujeu77aVT37V8YrBXvjOpd87GonUtfG9Ub/xu1
/B+j+lZ+IKp/zceietceFtVzywejmKuhf+Pxg7X+qKi+ey+J2rno1VG9S98c
1b3yHVG7lr8tqn/jl6J6lr0zate8F0R1LXtjVN/qj0f1rz08qmf+iwdr4zlR
B1peRqBNGs7egfF+w/Na386VUb2bvxv14NLDox644s8H68o/i+qa//qoB5d8
OGpf7z1ROW38Xsbk7d29Parr5qOi+rctj3p4q9NrxKYGmY8kSdI0Zj4yH3XO
fKQOmI8kSdI0VsYv7b3/h1F7Nh4Wtb9rRdTDKw2ORNu/vy+qb+t5Ub1rXhHV
c9PzonrXfzhq971nRfWueVdUz8bPRO1+8IaoPbu3R/38Hid1Jucy10H33d+L
2rvliqjdW74Z1bXiXVG7lr05qndwcN1Heha/Oqp78eujetYdGbVr2VsGa+UH
onpvetdgLX1DVN+aj0V135J183ujdi59e1TX4jcN1upPRfVv+mpU14JXRPWv
eF9U74r3DtbN/xzVd+tno3oXvjKq78YXRj244KVRe3atjxp6nOqEj7LLK9XI
tvv3dkft3r0jqvf+eVEP/vi5UV03fyaqd83pUTuv+4fBuvqFUQ9c/ZdRXVuv
j3r4WvQP1v6+qJ51X4jaMe/1Uft674t6eD9Tc1Sh2jEfSZKkacx8ZD76N5iP
NDLmI0mSNI2Vfm/f5ouiule9Nqrv1vdFDfRvivq51fdsieq/67jB2nh4VO/d
J0XtvfeLUX2r3xbVv+YNg3X7nKjeey6K6r/zc1F7u1dHHawRE5OVfjZSa3fP
LVEPLn5lVM8tn4rafe93B2vLpVFdaz4d1bPy3YO16MVR/euOi+pee3gUMzD0
rT8pqnvZG6N6N54Ztfueb0f13PKJqO4lr4nqWTxYXfNeENX907+K6ln0uqi+
Wz4UxezfveuOj9pz5/lR3cvfGtVzw98O1vyXRu2Y+3dRu9YfGfVwTpmQ+QoG
Bn5W9Qzu3h61d9v8qK6N50dtmf/OqJ47Lo7qXnNi1IPXvSaqd8G7ovrmvyVq
5zXPj+pae2rUwyFvz2BxLbbMjdqx5INRO289JWpP1z1RQ00xH0075iNJkjSN
mY/MR03mI42C+UiSJE1nzKI8+J993Wujem9912Dd8tao7ts+ErVv386oOlfD
3v61Ud1bvhLVf1/WbZ+I6lr+wqjeVa8arNs+FtV391eiupc+L6pnxQuj+jd+
PGrvzh9H7d/fHfXzzWEmh3FIAQc6/LujejccE9W1/C1R3av+OWr35suj+jd/
L6pr48lRfbefPlir5wwWM2+v+9RgrT82qnv9EVFdqz8WtXvbFVH9t30+qm/d
p6N6N5wa1RNhZ/lb+9Z8PKpr1WFR3YvfFNW3bk7U7tuPj+q95V8Ga3Cg3fu6
lrwpateCl0f1LP6HqO6lb47aufAlUbsfvDrq587SGJ8fBtEN3/L+ntujejec
HdW94F1RPSsPy4oI+ekHr/iLqF2L3xO1Z9OFUT1L/2Ww5r09qnvuWwbrpk9E
7R/YF/XwPPCDN1zvA/OjutZ/Mar31hMHa8MZUft3d0WN8dFpApmPJEnSdGY+
Mh+xTfORxob5SJIkTWc/G7+0f8/mqL4Nn4jqv/XDUb0bD4vavWtF1IG1s3+7
/6HB2tO7Kar77rOieta9e7CWvzCqf9X/Ye++/6Mq+reB/x3Pz8/zy/f+3kVF
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
u7h9kQzHSOwftsSQ4QhKrY/UltQ+Eks+onpe3P8BmdpnXvFYySM3trb2cWzy
yJ/HVV/D2pCv5PVSn+WW5PNl79U085Bj++R5g2yteqfVFNY4tc/647VW98b6
mmekHp0tTx6Z58mwSlXvHLUNtbeT4dVJ7j3eV/xUqq/kY34uWJ+qM0759w32
bfI+GfVzV5cW8rqrNZcaXk0+y78P8O8hbGFN93bt1zH52UoZfpPw7Gr/rshV
wrYlXyP17NRnkz9xyd9+rLzU+ojv0lWSTiJKfWTfXAHBrDbCqV6QKDpOdhdO
9XggFsoKFBfZncDI/wCqYgFIjIRZEsjEpEgsLLiLIHQpDYyTb0Jwb1sw97QT
DnaH4JEU4WgPMA53g+DBrr/DXyM1DygSW7oL+9qC79hAiIUdkOgH2TbbvAbu
I/3B3N8RuNaBcaCL1DVJl3v2S8qz5sEUCOxuK5yfCdUdHwY+Nq9vAt/etmAf
6gbmgS6m2GFnBQ/ROcm9VvFY5oEeENjaBnxrmoN3Wwcwc4aAcX0XxMxyUC5C
9e2grLMdvL4L3OuagbmtCwS3dlZ0USRvSbKtM/i3tYfA7l4Qt8rgtyMntUWn
PkXXR08/uj7S9ZGuj3R9VJcW6vpI10c6DxxdH+n6SL0ddH2k81DR9dHTjzoG
OC2TXGVwzthymTUyrE34LHt7rZLdMuoIgaOLVTI84lEZbuGIlHPwOM7ku7gf
HpFHvyjDZ9kGjmCXyqTJ8JpyhMbt6giTe2MVxrEWR0TcwlHxShm+nlsWynCG
odpjHAFul6mphzm/jvUL38t9qufFNvNZHrdKyT4ZPmaluViGdetkmWsy6jVl
z3DkzPEk509y9MiqitszZNQKbqcMryZfw/7kFWE9yLuFr2ePcT98F/uT153n
zrlh/ITyrDmrk32rHp13IPfDPV+RUe80ntcZGfWseUT2DF/Je4zzOdVrx3U8
eG/zlWwn78zxMgdlKmR4vfhKXkHe4dz/LzInZDiqVz8RPNOaKjW2RP18sbrh
s7xq3D/7UH3vVRm2lufCXlqjhH3Ia8p38RPHK8sWHpap6R7mealX5JwMn2Vv
sP28e1Nl5svwzlR7nr2qXp1NMnyWFSWPwhbyNbyfWY+MkVG/Z3hc9gDfy0qW
805nybBXeb+p3yQ8d/WzUCDDZ3lnqldnrwyf5V8/2Bv8JuGdyce1/8VD528R
+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
6Itt4LMckar7Z2s5VlfPiz3A2WLqfKegEo5yOfbjOI0jOr6S9QvbxhGmugo6
98m5Uhz9craPeiyOlpPrI45v1T5hOB9JPTt+drhn9i33qa6uzP7hcTnqVkfI
7G11LWuOKnks/ut1VmSsj9Qry9UPOCbnJ1edu6VGPWu2jfPc1HllPKLaNvaA
Oj9NnQOptoFjbP4eq1qz8LH6+7ZqLcmqR51fx9lfau2mRq3j2PM8rtrbvDPZ
Y7wbWVmr10v9ZKmzy9Trpa7dzTazh1lf1LSytzrnlp8O1lN8Vl33g1s430yd
g8d7T/1FabVCZ3+yn7lF/fsAn1W/Hzh7jZ8+3p/qzFv+jSJ57ivDtT64igK3
8Ljq33DUTxzDTxxfyauj3i3sSX6H8K5gTcc2q3P51G9Xnb9nEp90rrAdvAOu
lZ3Av6wVBJcLgeUthQeuj9pIokryZLSBqKcEEseVzH1Dwf1rE3DOaAjuKf8G
1gWOTV9BoHAzhIPlEJE/K1tT4rij78bt8gLwH08F57L+gqwpXFNeAM/MRuBL
bwne9FbgSxPcsxrDnV/bQ8h3FdSZaBHjFrgXpIB32kvgTm0Kvo3vgmfrp+Bd
3FOY1wFcU/4D/qxZwL6NRSLA3XlOzAbXtBfAM7cNuNJbuUTtJs1qBqzFnFP+
JcxpBa5tX4NRugVithtqv7JR/D8kHg1eywH33ilQntYTHKNeEH74J7jHNALv
yBcgXHoA1D24tvwIZSP+Fzi/7lHqI+fEplD54z/Au2kkVF+2eyuE6NTf6Pro
6UfXR7o+0vWRro/U6PpI10c6jyu6PtL1ka6PdB49uj56+lH/D87Re/L63hzN
quMZjkZYHbAPOaeIo0TOTEv+HUZumSqjjqU5d0gd83AkrK6NzH9drs794xiP
11r9V9J8Vp1fx39Hz3EO1+bleI93CMd16oidZ6TOpuP8OnVWmDre4wiN9QVb
y8ccdfNZHosjeY6+uH8+5kxC7o1jS45vOdbi3vgs5yXyXext9ifn7/E1/D8y
KxG+l1eEo1D2POsjtjZ5Bhp7Q/0dWHXWH0fIagWhriPNY/F68fXq1eE9o85Z
YjvV2YzqnDReL76XvcTaR519p9YLrMHZP9wPV95IrvpZU7MfMpXw7NhvvDM5
25OjaLXPeS68A1mp8f7kugTcA+fd8Vrz20m9RnzMs2ONzFeyQuSngP/eX11f
Qq1f1M8je4b9yS3q75nyCvKaciTPvzbsU6Le1eonkdeX14hXWV0hgcdVf0uX
vc39q7Ps+Cz3w+qSW3gd2XJu5/cJe4OP2dvcD/uK14u9ynqHe1arM84M5Mw3
niP3pq6UznuA9zy/c9RVTXif8KzZTrWe4pmqf53gHtS1KfRcu79zfpveBGHL
A45d74N3TXdwbuoFvg19wL+sLQQy2ggsgla2E/6kUBJz8/zLm0PMmQfVxxWC
B74F76+NgDWCR3KlNofKaS+Da+qLwvwu4Nk1GoyL+yFqOeG+f9Wv/EdiRlnU
hMjNY+A7MAEqFveGyhkNwD31BfDOaizMaQOuGa+AZ80giEctUNcrCF0/DpUZ
b0Dw8Hjw5qSCb89IYU574Prevt3fQ1U8IsWqqsf/5qU94EL5M6tZYG5b8M1p
CYkVHqa+IMxuBe6Nn4GVuxRivotwb2bhH19HsT552Hke3CcWwe0l78KdUS9B
xQ//EMY0APf4JsKEpuCa0ASco16E8MVjoO7Ts/47cIz4Jzx6fcQjOkf8Ayp2
TIXE5dL10XMRXR89/ej6SNdHuj7S9ZGuj3R9pPMkousjXR/p+kjn0aPro782
HM0mj5E4qlcrKY6a1Fey5znnRJ0pVNNR1C3J853UcA4MR0fqds4O4ngveQ/q
vxbnFraKe1Pbz9eoc7S4N3U2V/IWRt0/28NZVepYkXtW28938ZU19RWf5fhW
nZHFZzmG5AiQZ13TTB4+yzFq8nwqzt3iuFRtG89UPaJ67sk9xqNwrqC6arT6
rNrbyXtLPiKrS7ZQPRbPPXn2mvpeVsSsGWu6qxlW/cltZs+r62Oz8mKr2Nvq
PtmH6hxU/jWAnwh1deiawro1+bx4lJo+HQzbw6vMT6K6vgdfwx5W7xPeD3yX
Wgsnh/3Pc+H+1f2oV0cNe0/9S0hNLUn+PuEniG1L/tzxbxrJvzzLI/JzEVfC
vfEqqzWjGlY0atWm7pmfX/V+YNjP6t3LIyb/dUjn7xnWRxx7R0NBcB0dCUbB
AvAcGQ6B4nnCjnfAu7ID+Je3hsCS5kJGW6Gm+kjWUP5ljSFWngPVx5W/wXrw
O/DOaQiutJau+1e3TqxlnZh11gRcU/8DXEvBtbAz+PaPBvv6caiK+kHdf3Ki
YQOC146Ae89oqJzfA9xTXxRmNATn5H9BYPdI4IoQsVgYEqugXz0Ozv1joWzN
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
R0dHR6deRtdHuj7S9ZHOU4yuj/6qPM2R/7NZZSTXa89mO3X+Pqlp/eq/qj3P
X3R/6vxJqgeav80Hq/GFrJeMMghX5IB9bTd4zs4C//XdkBjnxyU5OPWfmgKe
xY3Btbg5eFd3FDb1Ad/2N4RNAyCwvLWwop30+/rIt6QRhK5tBbaHFYfvzHzw
pL0ktfA87vrIk9YKXGktoHxmQ/Bt+AD82bPBsbATuJZ0EVa8Ct7Nn0HgyEi4
s7QfVKx+B/xHZ4B96wTEI0Go7v5olaiM4nKVgXtz6aKBWxD2XQH33rHgSG0G
rhmvgDu1CXhWvwbu3V8Lmz8A/9mFEDw8Hnz7xoJn7fvgndMO3KnNpD8/60R9
NLkJuMTyCH+42rZYkdsz9hWo/LkVmN5bkFhd/G4YHPP6QcW0duA/MAPcqd3B
MauLsHAAVMzuAY6MweBd/w045/WGyrRuUDatEzgPpELw1lmoqooIkTAk7rFL
h8GTvRiMc7sgdKcIYrYfqu/eP66equ//JDpPPbo++qui6yNdH+k8a9H10ZOO
7k+dP4muj3R9pOsjXR89A9H10d8nZUr+6rb8eTiO4t31cHvge+Myj7dtjyu2
DD9Hyc9yO1/z9NtWv/LsX2sdHZ3qtRQebOwXi4Uh5CkF8+YBsG7sgVD5SfCf
ToXg2VngXt0W/IdGgy9vLvA3T6sPLo4VNSrAuf0tYU0X8K7uDJ413cC/cyAE
dwn+ZS2gxvpocSOwr2wG7p7VhDd3CXjSXoTEWgqPqzia1Qy4GoNj+itQuaQP
eJcKvhPThfy1YJycDYGzK8F/fgeY57eD/9QSCOwbBc6tn8Cdta+DL28RWFf2
Q2KlbnmhorYPrNyVUL5uIDh3fA1Gznxwrx8srH5dWDkA/HuHQyB7EgSzZ4H7
0BjwrOonrHwNfPM7g2dWM+AswcdbH7nHvgzOSW3B9lcAr0vsbgQcc/tC2cwu
4Fn6DjimdgT/8nfAsWAAVM7rCWWTW4P7F6FiTi9hbl/wZE4Hf8luSNxWsRCw
ojcrSqFswZtwZ/zLULl3MjhndofK+a9BxfbhYF/YCZFgBZjuGxCtikVr/psA
PyqJ1R4441Gv+fCEo+ujv090ffSsRddHjyvP/rXW0dHR9ZGuj3R9pOuj+hJd
Hz39sN/2yHD0m1hcUxndqbNQojIhGfXZmmamJe+NfT5P5pxM8rHUPdQ0zqzL
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
//I24Fkp+Le8CYHlHYSMNkJifYYOgd/qo9IloPZAqHQjuNJfBEdqS6iuj2Rl
JOfLuaa9LMxsDM7ZbaBiTltwL+wKvsWCe0Fn8MxuI8j5dZ70xuD6tQk4F/cA
78GJ4Fn/NvhzUsGx/SOwzm0Gb9Yc8B35BfxF66Fi9Wvg3/AW+Na+A86M/uDf
/x1YOTNAPZeIoxAc278E/8HRUL6yF1Qu6QauzYPBs+Vd8B36EcySDeBcMxA8
C3uBY1YrqJgjONJbAGtDb7rwROqj0S+CP60X3I1YkKiPTAdUrnwfPJcOgnvD
UHDMaA+V4xuBa9QL4B79Ejh/aipM7wDlk9uA/+xqqL594hCNhqDiQDq4No0A
+/oJKF/zJZSNfRlc4xsK4wTHz62gcsEAcKf1AMek1uAc1xA84xtBxfjGUL74
bWFuX6iY3FLY+gO4lr8Dld/+P/BMbAzOOX2Fdd9A4ORyMK6dBCvogj+pgtRZ
eYm5eXpW3r3o+ujpR9dHuj7S9ZGuj3R9pOujZzu6PtL1ka6PdH30942uj55+
2G/8Pz63cHzIsTHHeByHcHTEkRtHdBxxcSTP8RhHCBwDc3TK7Rzb8FgcX3Hs
wS0cY6ijaI5IOe7iyFwdNXHUyjYHlLB+YZt5LhztcCTG8fMPMnzMkS3vk1IZ
zs7iHjjG42MefY4MW8vxFUf16lwshufLNQ24hW3Lk+E+1fNiOzmW497Y5+o8
sUsy3DNfM0WGc/m4T45FOXpfIMNPBLfMl+FV4+iOV4Et5FVjD6ujSr6eo3qO
P9X7h+Nhju25RV3XgmHbWLmw5/m5YxXJ2pBjdd51rI65ggdHs6wveEZ8ljUI
j8X9s528M3k1eV7q3C1eU95dfD17nrM9eWVZ+3PUzbPjeJ6v5z3DLTw6azHe
D+xt9i2PyxE+7wS2gVt4LNaAaj9zO4/O8Tz3rN4V7A3eUdwnR+/sPe6T58V3
sU+S61bOqOT9o36W+RlkGybK8Brxs89rzdfznmRLeCer585nec/wWrBv+f3M
PfB+4GPe26zrecemybBX+TmdK6POgOX58lpMleE9w0qKdx1X7WAFxLqS++d3
HXsjVYbzh9Vz4WN+srxK2A9VSh7H97GOzH0z5WobI3HEFTY9YFYUgKdoJbiP
jgbWFL4VHYVt/wX/jjeENV2Eza8Jcg3t8PkMCJwYB75N/cA6Mwf82ePBueV1
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
wcr7COyMN8DZOg0K57UH/+TGYMxtKyzuA866T8BY+yH4koaCkTgEis/mgZ3Y
D7hKQ+GEp6Ao7VWoqiiB21f6c/2u415C10e/VdQnn6ltTzVn0PVRZAYVueVu
eyDy1fq3Vm1D5Jba3lXbcXR9VJ/+rE+f1L/P73Z0qT/r+iiyDfXZp7az1P/s
Oh660PVRbR2j6yNdH+n66KEPXR/p0KFDx/2Ixy+rf/yuSMf9DllG1OSioW/W
QyC5MVgZXcA5MhXc7e+Cs24IBLeOAmfjS2BldQQ7LUpY1caWSzGAu7IV2CsE
Z9MYCJ5aJHw5CZzt48Db9joE90wAb0UrCGZ0FNKjwE5vCc6xGCg+vRRuXtkN
lcXX4Y72K5hFcwUGzqAT6zH842//L2SBldoG7PVjheO5UG5dgdoyeTXKS0wo
+W4TOAUTgLPmrOgG/8BvVr29erasmGrm4Ck1y8LmwDl4RkoXcAo+AmPlQLCW
tgdzibS8C/gT2oO57n1Q21nqOwXusUSwVo8Ce0EToWY1iV9SDdWsbc7ZdDGN
wJrzDLixzcFMfxmCh+OgzDwD5bcqy2/PWvwno4tzF2+GwPvpFBStnws3UkZC
Uc4HUFHsVtyukmruV/XtGXl1TMqT3ypbUngOQt9vBX/+B1AY0xWMmPbgn98J
OL/OTBkB1tEMKFw+FAI574F1YBlcn9kcrGX9wZ8yGIrmtAFzSlOpCVjTWgg5
74OZ8RrYK0cK+CHjNf+6T6EopiNYse2gaNUrUB6+CjWXoiujXzV0faRDhw4d
9yMev2ri8bsiHfc7dH2k6yNdH+n66FEMXR896hE5y6jumTkPw5F13G38unmp
vrP3L+qeN/jwhL77Oh5oKDOaSs6vAmd5IyG1DXD+m1cwHEKHp4GV3w+cnG5C
fn8hpwd4GZ0guCoK3LR2QmJTcPJfhODBz8HbOhrCp5ZD8GgMWCtbgZvXA5xt
r0Lo/AqouOnAnWlytcwyf97CTLrUfwK8S1ugqrIcmD9zn5s3ToK1Mgq40ri5
pDkY0Y3AXNwOrPw3IPRVFpSbP4K6qkCt88SKLbj57RawCz4Bf2J3CMQ0AjP6
WbBjmwp3fB+rmIPHVRT8CxqDsfol8A7HAr8f1khoCXZSD7AWdwB34wegtqTc
+g7sfTPBTOkP7qLmUHOuf1ENyXmASjVkzW8M5rwGYMS1EjKHQfjLeCgPnIXq
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
zHp4f55539D4b5u1DfW4VHwe1qO7oNsyDzkzwhTjesB+fAeMhxYiL6wdCqeN
RWZoILKHtYLoR57joLaki/3+jszU0ai+fgOePWm4e7dBnkX8RGQ/erQi+9Gf
NrIfycjI/IEj+5HsR7IfyX7014nsR79XGjedu43S+PbGt4gVbo23Jm5/8C2N
t+m9Ne/HN9438e6Le3VqXlEjZpWLVXNizV7jLXs/b+O98jyjOjFbXNFMfO39
/1Z7blH/83DPRGvxGHU9hWcLje+996Cot3j9jvJsoVHvaNxHGj+y0S0/7ue/
9ueerd1vf8R6kPvtiYyMjMxDjPdv0Yrcb6CbMRile6fh0ufHUfnpITi3xqFi
yzhcfW8fLp1cg5LtSbCNa6VYFKQ4sgi3nMWovVmGB68TrlPVXr+MiovvwfXe
EVz+9jUYZw+Be9dUVH3zJq6bC3D7WiXu+7pUnmuqqu5UmHDl/NsoObUNlW9s
gm1yJ9hjnoIj0UehznDwNKa0TgoxIfzf9CP+p1/h2BawpPeHeXksrGvGQT9l
AAqSukMf3wnF4b7Qx3VAUXBzVL1zGGL/G2prUVtXB/PuFTAuiYRlSQgMm9Kh
mT0K+sVjoEntg6LJQ2FfNR7u1/dBP2skdAtCYZg3BtqwNiga2wq6pF6wzhmF
otBWKI6irLUzxrSHLrEr9NMGwjB9MNwLQuFcPBZZsQEoz/0CnmOu/je97lIJ
LKsmwLBoOIriA6GN8MOv1Y8EMeM6N7wTskP8URzXAxdGt4ZuZbxi/VRot89D
5cfHcS3/O9TdvISmrGBX/3jQcLkwD87P3oLtjRdxdnQH5KYFwbJ/BSq+fhe1
t66j5uZNeLaujNm423jVaN3Na6g2aGB+di0KZ4QjN7o3skb5IH/CQOQNaYn8
IB/kDlfccyiCfXG+9z9wcV4qxN8TPOdj8kyjUWQ/+r0i+9H99srzjLIfyX4k
IyPzB4jsR7IfyX704J8R2Y/+fJH9SObXjZjg/XvvhYyMjIzML433X3Vu6y/A
kdYJlgltYUjyh21qZ5QdnAb7ijA4p3RF2ZmdcJ/Zi6oPD+HS5y/jVrkVTZkp
U3f9Em47tai6+BY0M/rCmNYR1vWxqDq9Hc4NCdAn+6PsmQw4dkyBZUZflB5a
gMsfH8cdWwHu3uW08J6VeI33p/6uquYWrhadQ8mx1bCtCIE5qT2s41rCNqEN
7JPaK1K7wJAQiKKodkU/ntvrVbroAFgXhCjmj4Vz7wI4nlkC44JR0EzoCnEt
V2NcIApHPQXjtgyIpiiuuyp2uq66Gvbdy+B4TlH15SuwH1wGy8YkuE9she3p
DGhmB8E0cxjK39gP7bhOiqQu0MV3gCW9N4rGUpHa6KcMhHZSdxRH+kIXE6CI
5uW000b6wRDdHqbkHqh8eROMUwejaHRzFKT3w61LVogWII7wLWshtDOCYJs9
BLrY9hDHShw3Tz9SZ4CLfvRvJnuP8FEE+yGbgoBBzXC+3+PIGuuDnJBOMK+f
Bud7L+KGswC1t6+jKT8X9ZfLUPXNRzDuXAn9/Am4MLIdvo/oBu3saBSN64Ts
4W1g2zQbphd3oGD5JGSlBaP823dxm4/69Uv1dddx72dSNHivZ799A6Vffwzz
kV1wf3oKmoUxuNDzMeQMaQXRibJHKLKGt0XuSD9c7PUYDGun4ceJ/f/6m3NT
jsBfIbIfyfy6kf1IRkZG5s8R2Y9kP5L9qHFkP/orRPYjmV+eB68V/L32SkZG
RkbmP4zXTIMbbiNs03vDnRgAR3o32JI7wj7BB7b0ALhfXo+ykxtRXWXD9aoy
3O9J7nqpu3MZV3M/Q9X3r8B1eA6MU7rAtioYxiVj4D6xCZc+fwmXPzuB8i+O
w7g2AuUvLETJtolwTPRXzOgMS3wrmFL84VgThvJXNuOm9hzqblzCTx2Hf/1T
fHGeWldXj2pTEUrfOwTLlgQYJ/eEKb4NtOEtUBDaFpqYAEW4L0yzguA4uhim
mcNRcnghrJvSUJDaF7rIdjDEdYA5rDUKpw/B9RtX4alt4n2x6FFyajfsL66D
eVM6St48iNKXn1YcWQnrknDoUvvAmtgVukldoJk2GEUTu8CUpDCH+cGa3A2a
8YEwzRkOXUJnaCL9ND81cUI0GkOoD/QpfaCLaw99bAAKxzSDae04NDTUoqZW
IV6F64NXoVsajrLdGdCHtIImNgBi+4Yof+QFt0XWsDbIHt4WOcG+/5Q9rDUu
9n8SZ3s+jvMDmyNn/EBots9D+bdv42alA96dWHzVeOpCw91buOnQ4IahEGUf
voa8hMHIHOqL8/2fUgxqgazwDiiaH4fsKaNRPHMYLkR3hW7fEliOLEfh7DHQ
pA1F8aZZMLy6G2WfvQrHuy/jTrkLYq7Fg39Yxf5fr7KgaEsGzoX3VvT5B872
eRznh7ZEdrAPckf7I7Pn32Dcsw4/fsTrf6ivf+BT/YUi+5HML4/sRzIyMjJ/
qsh+5DkOsh/JfiT70V8xsh/JyMjIyMjIeCLmw6i5c/0SrCvC4Jzoo5gUAEdc
C5gn+cG+JgyVb2zHTVsuvFvPPzeqTqX51+13rl1CdYkJV86/AcuyUbBOaQ/n
7gRYN8bAPrWnYlYfXDn7Gi59egSWNZFwpHdB6d6ZuHTuNZiXjoRhoh9cs/rA
OVulrvqzpwYqEtooJndE6YzucMwdDPuhpSj57g3cqnJDdKIGLz8xvMcz28GJ
y9+egWvPbFiS+kEb0gY5w/+B/Pj2isQuMM8LgevIIlj2TEbeuA4oig6AIUYV
5otrhd/B82T1Dai9eR0lHx2H88ByOJ5fhUvvH0PZmV3Qr4xVJPZUqD2leExz
GNh4dIBp/mhoJnaHKb03NOMCoY30h+hBhrQeigWjkB/tn68M326n8Fr5dk9L
ivCDYUJX6CcqxDVwdeM6IC/4SZSe2gdxJOvv1EAcPffxtSga1x76uEBoYtrB
04/U9Xv5o/3gWTU3uIWiz+O42PsxZAX5wDB1DOwvbMPV7G9QV30D976PykH0
fgfF7ewK3LnZinffgPnQBuQvS4Z+WSouxvfG90PaIiu8Cwrj+yAvpjvyQ9uj
7MXNsB2Yi9ywTshPGoKcNVNRtCYdjr0rYF4zA4UpQcifMxrazXNgfnoxNHuW
Q//WCyj56iNc1ufgv6+3++HHv2bcrVOouX25ElWfvA792inICemA8xSlPo+L
1YbZQ1vji86Pw/jqc/B8ntUZGr/Sb5NHOLIfycjIyMjIyHgi+5HsR7IfyX70
l4/sRzIyMjIyMjL3XJvg9hU4VoxRhP0NttSOcKwIReWZ7bhuzEF9/W38tw39
t2kHDXW3cDnvS1y78AXE9IaSk6tQ9sJCxektcO+fiZL90+BaMRaOVSGoODQH
Va+uh2PrOBim94ItujlcG8ej9M2tcG+Ng31bIlxLRsE5sw/cs3rCkhQAx9yB
KMnoC9uk9nBMbAd7XEto41vBPLU7nFsSUf7uPtzQX0R97e36f613avRKvdZo
NVy/jGt538HxwnYY1ibDuGAszIsjYJjQS5HUA8UZg6FL7IbikU+i/MxOeDZX
V4u79TWo+P5jlH/wHEre2Af3a3thPbQApa9uhnltEvSzhsM8fwSM6UNgmjoY
tiUhKH11CxxbkyGuCasJ9YM23AeGid1gXRmF3AhfaGP9FffpRwbKEeI7QZ/U
A5oIX2hjAqCL8kdxhKJaew6eidb1Dai9ZINxURjEYwzjAqGN4un8dSGtkd3v
MZzr9wQKY/vAvCoNZe+dwk2rHo2nGXi/T55epqpx21H66etwHT8A+4ENuJga
jOy4fnC+sBW6VckoGNseuRP64PzAFsga2jpLrRjIDGqDi8E+MK2bDOPCGBSm
DIJpfhxcpw+g7N0XYHpmHXQbZ0CzfTH0+xVZyYNgO74LxQsTkD2uN84OboUL
kR2h2zwH7jeOodqqQVN+uGuqylDy0RsoXp6GsyHd8WXg/8YHrf4HSt98CZ4j
5n1tlL9kZD+SkZGRkZGRkf1I9iPZj2Q/8hwx2Y9kP5KRkZGRkflLRz1/VPvR
neuX4dgYD+esASh9fSeumnJRX1+DB2+r5tZ13DRfwNWcj+A6uRSGZH84F45A
5bnTqPjiOEyTe6B00ySUvbUL9r3TFVO7w/3yBth2JMMxtRvKdqfCPqcPzDP7
wbIkCNZZvVC6LgruE2tgXh0F++wBcEzvCdvs/rDP6gvLxADYUwIV4uquysVe
O4sZ5o5JAbCNbwNrXAuYEvzgWjEKV78+gdvldoiVeE0+yj9UX3bD9dV7KN42
D/qFkdDGtYcmpBlMu2fh7g91iroaiC3cqbTDfWYfzDsnw7YuASUv74I+pT9s
y2Lh2LsIroOLYVoRA/vRNbDtmwvdpH4wTOoP87ZUmOaMUMweAnOkP4wTusKW
MRy6+I4oDm0NXbS/onFFivSDPsYfhkm9IeZya5WFef7G2A4whbRE0Yzh4IWh
ob4W4tXdMOWjMMIPxuAnkBPZDtpZY2B5ZiXcFz5D9bWraMoxr1cHatzQ5aHs
1H4ULExC1tSRyInsqohS5EX3RP74vrAcWQ/rweXQTBqCi4ObQzNlGEQnEjMi
PIa2xIXwziiaFY6CDEVe0iDkxnSH6dB6XHcWwvXGszBsW4CyD07Dff5jZM8J
R86MULjfOoicmWNQGN0ZuaPbIWusP7JH+OBCUBuY5sTA8dohVLv0aMo1ba9X
lsH0zklkzZyAT3u0hvvd1+C5ZmxdA5pynP98kf1IRkZGRkbmrx3Zj2Q/kv1I
9iPZj/4V2Y9kZGRkZGT+0vFaWXfNkouqrPdRX1uD+32TWK1UW1ePa9qLcL20
AfrZQ1H67EKUvLIRrtWhioUjYc3oo5g3AO49U2BfFwPXwmCUbp6AspfXofTl
DSg7vQO29VEwbIhH2akNME/tCteaMFiXBcM4wQf2LSkoOb0FtiXBsM/qB/eq
0bBN7QnTxADYUgJtohz9JE9j6qRSepMzVWGIbQHTpji4D81HcXpP2Pdk4PIn
R3HTZYD3TIB7DraXWuFKJW6c+wglB5fjZmUJvE9y6+ruwPHaERSmDIT92FpU
ff0KrLtmwzh7ONxH1sC2axEch5ZDN70/zPOHQr9uIgzr0+A+uhYlh5dBN3M4
tFP6wbpzOqpObIJ5UQh0s4bDMnsUtGE+uF9LErMdjCm9oI9pD+9HamP8IaaL
W14/Cs/Ui/o6iFda8dEripe3o9qUjbraavybj7DqdvU1VJ3/HMb963AxfYwi
qA1y+v0D3/f4nzDvXgjj+lk4G9wOeRHdkB2tKJw0FIZ16bBuy4BY56ZPH4Gc
Ia0hrriaPUKR2f8JaDJCodswBWK9XA4PTh+RO7EP8hYnwvLmMRTNDEfenGjY
3zwMy/HtsL+6G9aVE2E7dQA5GdHIG9ISopcVjeuBwon9cWFQC8XAJ3G2z99x
cZQ/NIsS4Hz3JVwrd8G7L92vO121GGB/5wxqb1TD85vhL3ndWNmPZGRkZGRk
/tKR/Uj2I9mPZD+S/cgrsh/JyMjIyMjIiDx4XU5DzS3c0Geh/OWtMC0LhTbR
F6ZxLWCNb42SFSPhWj8W7vXRsO9IhHtXMqzTe6Ls+Co4D2Sg8s2duP71Kyh7
bi6sy0bDtW8aKo4vhn3hYJhXjELZ8TWwrYmEeUmQIiUQ1undYdschcoTa1D2
xg64n82AZbwf7KmdFA8oRz/FndIJloR2sO1MROkra2Ed7wOnyj2+BYwJgdAu
iEDZyU24VvANam5eRcPdWtypV9TUN+C+B109L627fhWmY5tRlDoIBUk9YdqV
Ae3kwcgf3RrFs0bAuHce3MdXw5ExGvmjmiviO0EzsScKIv2gS+4N86IomNaN
h37GCBRNGwj7nhlwvbYTjmdXwXV8I4pj20MX4Qsxh1xcH9ZTkdTbjZO6wzSh
K8Tcb01se5jS+8CY2A25o1uh6psz8LxedXr5/T6UDXV1qK+vRV3tbVS7LHC/
/wo0a2fifGxfRb8nkdnrMWT3fxKZw1ur2iI3JBDGBeNQPC8OWVFdoEkZgOyx
gYqJ/ZCZMAD5yUHISxoG17PrUBjRFTmDWyJvpB8yBzwF7bJ4WHbOQc64nihe
loD8BaHIShgI446lcGyehexRvjg/xh8XhzSHfttMmFdMwtkR7ZAd5Ie84W2R
O6w1iiO7oGDiAFwc1AI5I/2QNcoX2UGtkdXv7zjX9zFcDO0E3dI0lL//Mu5U
OPBvfhF4XSH6rxnZj2RkZGRkZGREZD+S/Uj2I9mPZD+S/UhGRkZGRkbGE6+1
NPX1d1BtykLZ6U2wrRgFQ5I/THEtYJvYFtbUQNhSOihm9oLrmQzYlo6Gc9Eo
lH/8LCpeXgPLnP6oPL0eFa/tQMlbivL39qPk4Ey45g2Ae0M8Lp09BceaSJTs
SUPpiZVwbIiGbclwWJYFwbF0BErXRKDqsyMo/+Qgrl14G5bpfWBLCoBnBZ1w
TxXqqEj976wT28GW1gUVp7bA9sxcmBLawT6lGxxTu8M8vj30o55CweD/hdyB
/y+KN6SjSncBtbW34Fm61FAPsZqxob4OPzQ0QNSmSqsRpn0LoU3rC/20fjAl
dVWk9IE+zBeGZTFwH1kNw/wxMCX2QuG4jhA91JrYE2KCtyasDYqjfKBN7gbL
+vGofG07LCujYZjSG8ZZo1D+1kFYjy5FcWwgTCGtYIj2Nygr6BTaCF+YEnvA
GN8VuvgOsKT3hT42EJ6p3RE+itRBuH3zJjyfwLp6qMMb6jzr7tSjIe687rCh
YO1sfDe0Lb5p/z/wXdf/B+cHNUPWSH9kC+r1ZEUzujCgBfIS+0GTPgw58d3x
zfC2EFMU8uJ6oCCuO/KmBiM/aRAKw7sga4Q/9FODIHrW+T5P4EKwPwzrZkC7
XiHmM5R8eQrFK1LwfWR32PYvg+XkHugWTER+WDdc6PckdIkDkR/SGVmDWiJ/
eFvkBLVB1tBWyA/rBF3KEFwY3BK5w32RHdRGMVyRM8JHEewLMTsis+/juKDK
Cw+EZVkKSj88jVuV5fBcx7muFmL6+u/yG+gPEtmPZGRkZGRkZDyR/Uj2I9mP
ZD+S/Uj2IxkZGRkZGRkx5Fs9Y79U8CksG2Jhim8J69j/CXP0ExBXU3WkdoYz
vQtsQlIHxfwBqPxkPype2YDSrdEoeXYuxGo354ZolJ9cg4p396HswwNw7U3H
pVc3oOydLXCfXI7yt/bj0tcn4XhuLkwz+sK5OBj2jP4QV7CtOr0ZpTsnwboq
FLb9Gbj29VG4NsfAmtwe7pSOsCcGKCapRD9Kbg9zYjuYEv1gn+gL58yeqHpz
O8oOz4F5dn+I9uRODIAtvhVMEc0VCd1g2z4dVZ++gpsldoiJ1g0Ndar6hntX
MTVealdfVwvbqokoHusDQ0YQzMndYZo6COblMXCe2AzrzinQzRsFzYTu0E3t
C/eeOdBN6gltuC/00f4QMxNMk3pBO7Y1LHOGw7ohGbqJPVA8ti2Mi2Pg2DQJ
rpc2wb4iDvoIH3jW14W1gZjpbZkxAMaUHvCswYvwgzG2o2LkU6g4sR2eKQ3i
mqT3OTO/W18PscruzpXLqMo+B+vhdcifPBIXBrfB+V5/w8W+/0DOsNbIolxQ
MYa1hWv3QlwMCURBQn9Yds+CfkUStBkRMO5egMvfvgvXztkwzg6HdlYUdAvi
YFqWCs20cNhfWA/Hif1wvvUKLEfXo3huOOxr0mDasxL2F7Yhf34cjIuToZk+
BvmhnSFmjGcObonsEb4QzShXlT2kJfKC/WCYHozMoa2QM9wHnn7kaUnq1HGx
BXX1nYfoWX3+jrMB/zc+b/F/4bOhHVG4ZTluVl3GXTV/zckMIrIfycjIyMjI
yMh+JPuR7EeyH8l+JCL7kYyMjIyMjIyIOCW6c+s6brlNuFnwNa6+dwjl+zJg
XTwGlrQOMMS3hnFcCxgmtoElphlKt4xD5eeHYZ3WFe4NcSg/tQnu5+ai/Phq
VL5zGOY5QxXJ/nAvGwnd0lEofSEDZW9tQck7u+E8tkxxYCpKD82HY0UIdPFt
4dg9Be6XVsK5dxochxeg7MQqXPrkIEr3zoQr1Q82ihWm94J9UgdYp/VWLBgC
x/KRcB6YjUufPoOK/XPgnOgPc/Q/YJnoC/e8IJQdmo+r595GzSU3mnLM625d
x1WzBnW1NXX/nKnuta6s4qs3UBThj+KkXigc2wZFke1gzBgB0/zRMC+NhHZd
ErJHt4JpSTjMk4dAl9AN+oQuEG1FXNfVmNIHupgAmFfEo+zdgzCk9kZRQkcU
JnWDLqItnNtmwr5LoU3sAl1SV2gSe0I3vR/0c4NgCPdTRLaDuEqsfkwrWBaG
ob72Ojzn4V6v94bDgGpzEZr0wa27iRtFuXA+vx2F08NxboQPvuv+v1EweRRc
J3chZ2oQdBumw7BtNrLnhEG/ZDw0KybB8fR86FemwbhjLiz71sC4bZFi61yU
vXYI5Z+eguX1I3C9cQx5syNROCNENRZ5U0NhfWY9cjIikRvdE5kRnVGQPgw5
EV2RN7QNMge3UAxrrQhqi7wgXxhmjoVlzzxkDmqO3FEByKEKjfDNDWqLnEHN
kdX3cZzr+X9wsd+TyAwLhG5GGKzb5qHk9WO4XPg9bpVYcLe2Dn/lZiQi+5GM
jIyMjIyMiOxHsh/JfiT7kexHsh/JyMjIyMjIND236mpwza1H1YWPYXp5J8wb
kxQzBsGU3AXuPelwJgai/JlZcB1dDuemCaj65Bgq394Ny5yB/+RI7wJjckc4
tsbDviEKle8dQsnWBMX2Cbj06TGUfaRwnNmKy9kfoeTT4yh/fz+qv3ge5V+e
gvuTw6g4sxulz69A1dvrIKZDiD1xH1wG0bzKdqfD/coGWOb0hS7icZiXjkTJ
iXW4UvANam/dQFOOXt2VSly98Akce5fDtHI8iqcOxrWrVRCPvHu3AQ319Qp1
BZr1le0oGNsS2uj20Ix4AqX7F8G+NwO2VdFwbpoMQ1pf6FeNU6hTBURDMUzu
A02UP/ThbVE8oROKknuh/M1nYN44BTkJXWCMbQ/TzKEQ15DVxQXCcWAxdJtT
YFgSiorT22DfkATnsfWwTh4EQ5gPzBHtoI3thKsOLTyvVF1ZJ1bQiVucr+1B
bvATsC2JQunxrajWZkKsOXzwcVZnhdeXmgth++ZjlH6nuDA1AnkhgTjX+++4
0P2/YFyRgLyFMbgwNhCauRHISxwMy6oE5I3rjczgtrgwtDny4vvAtHsR8hfF
Q1zp1XJoNfRL4lGYNASmzTNhP7wB+gUT4DqwFJoN6YotM5E/O1qRNBjnI3si
c0wgciO7QJM0EGJrhauSkBXUFhd6/R981+8JnB/WBvkTBiJraQocpw6j8vsv
cPOSA/U/3K1/0BR/GSWyH8nIyMjIyMg0PbIfyX4k+5HsR3/uyH4kIyMjIyMj
8xPxrHqq9/KvFVD3y+3rlbiiu4Cqb99F6ekdqHh9FyopRJ8cK39rMwyLR8K2
YBBKlw+Ha1ZfOOLaKNZGwfn0JIgrxrpPrIZxUiAsKZ3hmNYT7iUhqDg8C46n
U1G2Kx2u6X3gXBKMy58eg3PhcDhWh8G2cIRidm845vRD6epwuFIDYY55CoZE
X7hWh+HSyxsgro175841PPg41KtuVbpR9vFpmLZnwP3hUeimDoV5Uk84D6yA
fvdc3LheiXveBPVtqFeHgN+5eQ2aqUEoDnoctsVj4Xx6NmxrEuB4fhGMyQNQ
8sxSWLekwTxtCIpnDIR9axrczyxCYUI36JN7oOTQYjgOKwzLoqFdMAbG+C4w
pPaB/fhquE5th337FBTNGALjjIEwpPeFKbk3rCsioF88Bqbk7tCObIayd47C
8+q8OtEPfPHj17bX9iN/xOMwhLZBbr//g8whrVGYPhKWZzeiMv8campu4sHv
SN1dxTWHBZUfnYFhRSrErIac1BEwrEtH0eSx0C9OQk5kT1wc9BSyIzriQp9/
IGdoW1g3Z0C3TaFdkw7jjlmwrE2BedMM5I/pAE3iAJieWYPCpZOQHdwOBWlD
YFmWANOeZTBsmgXL6Z0wbpqN7LRRyA/vgItj/OE4sQf6fatg2JoB92dncMVY
gJrbN3Dfyw43qM27tl6hHv+7DXVQa1P9g68Q/deJ7EcyMjIyMjIyPxHZj2Q/
kv1I9qO/ZGQ/kpGRkZGRkfk5EaPAG5QzLfXapp725PVvun/qLEtpDHUNtbhu
PAf3yXUoP74Krt3pcK4OhXtrHEoPZ8C9a6pi/TiYpvWFdbwvTOldYJk3EOZp
3eBeEwLrvIFwTukMV0I72GYPgH1HMhwLhsKW3AWOBF/Y41vDEdcc1kQ/uNfG
4vKZbbhtykJ9zQ00PgDeaVAPx02nDuUfnIB5XRryJ3ZHweinoAluBvu8UYpN
KRAr08o/egW6g0tx62o5PNusr0F9Q63qbv2PU69v5H0FXXxnlL61H4ULI2Ge
FQzr9qlw75oG6/oUuF5cD/2MIYqUXrAm9IQ+uR/yQn1hmDoYlkOLUJTaD9ol
4YqMETAkd4M2oQdcL61H0cJI6JeNg3nmCOgmdkdRbAAMyT2QH+0P3YxhKI7x
h3NzMhpf9VVMO/d8ltRYXt6FghH/gDGuI4rG+iMnyAcXBj6F7/v8DecGtUBu
4lCY9q1FxflvUHvtCprwOf6h5lIZqr76AI4zz0H7/7N33uFRVWvbP9/1vuc9
iqhACukQUkilg3QFpIP0jtIRCyKiqCi9inQIpJDQew+9o4D0TggpEHoHBalp
fPde90SXZ5ycgTTCee7r98ewZ80qz1p7eO65VtYe3hvED/sEnO75HthbrRA4
1rYKONrRIK5nI4OxfcHpno3AxQUTwNnwkeDEp01AzOAu4Mh7geBggwBwoEEx
cDboO3C6V2MQ3aoM+KXEG2B3QB7wS2VncKxNaRA3uS+4tnMduLx4Ovj9+C8g
+dED8Pf32R9X+ZRhkwMyoDHiWuWOzb9+Qj0fVvyRkvgjkUgkEolEzyLxR+KP
xB+JP3qZJf5IJBKJRCJRpkk/q1knXSU+fAQePLwLfr99FVwMHwLiv28MYjv6
G7T1BlHvFwU3Ir4ECUMag3MflQbXQr4A10O/BOe/ehckfFsfnP2qOrjyQ2tw
vrMfiG/lAWI+LAsuju0KbmyZCe5fiQHJT5OSjX1Yf6aMzCf1vDE1ORE8OHMc
3F45AZwd3AzEdS1m0MgNxNd1BbFNvEFM8wCDFor6hcHV2cPA9Z1LwPmZg8GR
LhXB/etXAFt5/PgeOLdwAjB1RnMQdxOiwdlZo8HxQR+As2M/AQmD2oHzwzqD
+C5vGfRrDaLblQIxTYoaNPIGpxp6gOMt/MCF+T+AS9MHgoSQfuDcD93A4brO
4NSg9uBMv5bg/KC2ILZPPXDs/bIg9tvG4OyET0D8qK7gzIhu4OQ3rUH8F03B
2TEfgYeX4oDuo387uQ/cPfQz0NfDxVkjwMnaTiC2RQA4UdcLHKzhYVDbExyq
4wUO1/QEh6q6gH3l7cGOSs7gUMsy4NyQT8H1HYvBk99vAWuWMJfsb9EHwbmF
08Cxfj0U7cHF+aPBkbblwakPKoPjnzYGp3o3AlHfdAYxfTuB6O/aGwxsAw5U
djJoVg6c/KYzODOlPzg67GNwpE8bEDtzIrixaxO4n3AKJD66B/7DDUfzbPql
QvX9v/507oxL/JFIJBKJRKJMk/gj8Ufij8Qf5XKJPxKJRCKRSJSt+svevPTc
U5Li8a3z4ObRn8C1X1aAG9vngItjPwRx3UqBUz1Lg7iOfuDK1F7g0vhu4PLo
98H1Of3BhZGtwa2fFoL7188Cbg1MSmsoSW06+qM3dCWPkx6C32L3g+sLhoEL
3zUC8R38DVq5gLNtPcCFToEgtl0AONXCF5xurmjmA6Kb+UarI7VBdPsy4PyS
CeDOnu3g6uwR4MlvVwFbZ0+iulUHCSvCQKrS06QnIEkRG/Q1SJjUF9xaOxOc
7loRnGzsBaKaeIDYeoVA/HteIKqRQUyrQIPmfuDGwnHg5oKJIO7z+uBCSH9w
NfgrcGlKX3C6b3NwcVR3cKZvMxDbrxGIH94enBvQAlwa/yE4078liB/aHsR+
3xqc6lwB/HbqADBFVe34SnryGJzo+g64vWkJ0Of94oxh4GgdJ3CqpT84UtcT
HKrhYfCuGTW9DGp7g4O1PA3ecQOHyhcEB8rbgf3vVwOXVs4Gt/bvAr+djQOP
nyY9NkyxsRJMUTdtQPtTiQ/vg7sX4sHlNYvA0Y41QfQ374OTfVuB/XW9wPF6
vgZfNAPHOlQGZ8b2BBdmjAJXNi4Dd6MOgNsxx8G9mxfB39wiJm9uoJ/0zrPQ
xQFltcQfiUQikUgkylaJPxJ/JP5I/NELLPFHIpFIJBKJclqpaUdZp+1r45kP
lkqnJoOkJw/Aw8ux4Le9yw2WTwRXZg4EN+aNBPcPrQdPfr0C/u5v0v9diQ/v
gd9O7ASX5wwD8f3eA7HvFwXnWrgZtPUGCZ0CDboWN+hSDFzoHAji2viCqGZF
AZ1Rmj8yONXCD5yo4wROf9sEXNk8D9zeuQg8+u0a0Pt3Y9ZQcHpgB8AzwxGa
1LRxPLgSD05+WAvEtSsF4juUBnFdyxl8UBJEty9l8EEZcOazGuDit43BzZmD
wJWI/uBUc19wpk9dkDC6B7i6aRY4GzEMJIz7zKBfM3B+aFdwacE4cHXhGBDX
tiSIbVgEHK/rBqLqeYAjNZ1A3PAuIPXxA5CSmAjY84tzfgTHq74J7u/bBPRZ
uBA6AJj8UQuYzYCjdT3B3zgjS9T0BIdre4NjdXzA3vJO4NQX7UDs4E7g2OQv
QdzSEHD3wmnw5N4dkJz0GPyx1P7NiZicy+NHIPHOJXB7/TxwZsCH4NzYL8Hd
k7vAvX07wKPrl4C+2v66DlWdasdmSvJDhXEuB8/c5jrXd3vK+QnZI/FHIpFI
JBKJclrij8Qf/SnxR+KPclbij0QikUgkEr3QUjmqaWeRFac9cKfcXyrQdivp
Svz1Kri7OxJcD/oCxH9eFcS19wJnW7uDhPeLggudixl0KQHOdy6mCPw3TP6o
rR+IauoDdH+kE9fMF8S38AdHGvmAC4Pbg8cPfgV6p8/98DGI7vY2uDRzOEh8
dBckp6Qkp8Xh2opgENumOIhu4gtONS0KEpr7gLPDu4PLod+D8yM7gYRhHcCV
heNB9Gc1wbmQvuBySH8QP6CNwcDWIPrT6uDiqG4gYWRXEDewAzjVux6I61rB
oJE3iGnpD+I/KAPiOpUH8d+0Ak/u3QbGHsYU05z8fmQTONG4CDhW3w3c27sR
6DN1YVo/cKK204k/z2fwBDyf4RlcksbhWl7gUA13cKBGYXCiW01wpEU5EPVV
axA9pDuI+fFzcHvvZvDo3h2Q+hQmxaJbp9LcqwX/oq/h1NR/R/SCSfyRSCQS
iUSiF1rij8QfiT8SZaPEH4lEIpFIJMqd+vsn1TLp1J0Uc9d7NxPA7Z3zwdUJ
XcHZj8uBhNaFDVq6GbT3BnRA+t65c50Dz5kZouf2R2n4gpj3PEHcB6XBo18v
gbTRGX7ubNCX4Ojn74KoAR3AnQtRwFRC7chiyYuh/UFsr9og4dumIP6LuuDc
zCHgSvhQkPB1CxDdriQ4/Xk9ENMiEMT1bmjQPADE1nMzqOsKznQoBeLaBBg0
9wLnP28AzvapbzC0AzjVrSqgV0ro+Q6Iej8A3N4bCUxDMY5AePzk9zsg7qOa
4HTToiDqPXdw98AmoM9rwuS+4GgtRxDXIiAuM/yRvu/u0LsGB6q4gEPV3cHe
cnbgYMdq4NLSMHD9p0hwadZkED++H0iYMQ7ci9oHkpLug7+uRmMWuPvRtC9O
7ZETB5QbJf5IJBKJRCJR7pT4I/FH4o9EmS/xRyKRSCQSiV4qaRnpncNbQMKI
TiD+4zIgpk1hcKa1O0jo4APOwf6ArorOAQad/iRBkTX+SKHOAI9u6g0exZ0A
fwwDXAr6AsS0LwESvm8Lzs8eC+6eiwGmPYMqJU+8dA7EdX8XnOpQDkR1eQtc
HPexwcQvwLkfPgRXJvUF8QPbg/Mti4HTHcuBmHbFwNnulcH5z2uBM18YXBvc
EUR3qgguh31nMPcHcG39QhA/sC2I6VwWnGrsBS6M+QyYxpCUBLizMSZ4FIiu
6wpi2xQD0e+5g98ObwP6BCZM6AOO1XECmeyPzM9wqOUNDlZxAad6NgFnlwaD
0+O/A6e61Qd7yzuA3YrjHWuCM7N+BHeO7wcPb14DnC+TtM1z2bfsRZkn8Uci
kUgkEoleKok/En8k/kiUAYk/EolEIpFI9FJJZabMyS8PawnONi4I6F8udC0B
zpMuxQz+k/GxEj4f9pn9kdplF93IEzyOPQn0oZwP/hqc6FYVxH9SA8R2KA8u
hgwAT5MTQWpSMmD5iytDwYk6zuBMSz9wun4hENXcF8R8UgdcWTAWnOnzHjg3
7nOQMLITiG7uB85+3xZcCf4GxPZvARLGfg4uLxgNzo/oBM4M7QgSfvwMxPdr
DU7XcQUnu1UDj+/eBCkpiYC9urVvCzhR3wPEtvA1aGkQ3agI+PX4bqCP+tzo
zwBPQef5DMfreIJM9keaSzr4tis43PZtcLRHA7C3oiM4UL0wOFzLAxyp5wcu
BA8Bl8MM4id+Bx6cjQFpS0/ZI1Eul/gjkUgkEolEL5XEH4k/En8kyoDEH4lE
IpFIJHr5xD+VvzK4NTj3vjcweaJMckOZ5o+4v66hB3gUewKw/zwp+nRQH5Aw
9TNw7uN3QHzfpiBhYi9wY8EoYCqvXBLPNo8Z0hmcauAKTOd+owlYpCYe4Hyv
2uDCD5+B0181A9G9aoDTnd4C8e3LgJON3AFPckjo3xyc/6o+uDj0AxD7RR0Q
3cgbnHjPw6B+YXBr/xZgmgD0JTkp6c41ENOlEohq5AlOtfAHaf7IA9w5sRfo
c3f+h57gRF0nkOX+SHNJ+6u5gwNvu4GjtbzBoZpeBjU8DdSpDkfqFQMnPqgJ
jvdpD+5G7QV/fcaxKHdL/JFIJBKJRKKXT+KPxB+JPxI9n8QfiUQikUgkekmk
ZacPH9wFMZ9XAxc+8AHnuxQ3eCH90emG7uB+9BHA/nN/4Okfe4DoarbgdFNf
cLJNKXCqcxUQ06gIeBB7EJieTKpOOH98+TSIbe1n0KwoON3Cz6BJURDXIhCc
Gd4VnGhTAkR3KAXO9KgC4ntUBWe+agR4KvjZXrVB3CeVwIWZ34CTH5QGMc0D
wKk6TuDKtG8Be5786CFIUQevnx3bC5ys6wJOtwwA0c18QUxLPxDVxAvcjj4I
9Gk8P+JjEFXXGcTCTLXwz3J/ZHJJXn9iuqhskeaPDlX3APuqeYKdxd8AcbMm
AtMCTE4G2bTaRVkm8UcikUgkEoleEok/En8k/kiUYYk/ylnpf8eXqsn8Xetr
yLreWmo9RSlne/J8yi39zC2yZg3n3lUtEolygTR/9PvtSyC6eylwvoMfONe5
mEGnwCzifEeD2DZ+4GQTHxDd1AqaGZyqXwj8enwvMA1FETv2MxBVxwWcbukP
oht7K4oCnr0Q83lj8ORxIuB52qzh9qZ5gN6Eu9TosKKbGJyqWwjQMZ2GlQON
/iSuhT+I6VAOnGhaFJxqbBDVsAiIbeoP4hp4gviPaoDkB78B/aSI6z+tACfq
u4PTLfxB2ngNf8SzIE408wG/xh4F+qjPDe4Oouq6gJjm/uBYbU9woIbHAWWR
spt3FfrrOj5gX/mC4MSY/sDUf/FHL4XEH+WsxB/lrHJLP3OLxB+JRKIclvgj
8Ufij0QZlvijl0+cl8dKWdeK5I2irJa+xriek5Qyt5VEJdZsaVXLaheJco00
f5R0/SK49GEpcLFrALjUrbiiWBZxuatBwvv+IKaFL4hvaQWt/EDse+7gxqEd
wDQUOoVJvUFsfRcQ1zrAoKUviG/hb9C6GDhd3xVcmzse8FPJSYnA5LBG9QJR
9QuB+NYBgCdsx7XyBzwngZhqbukHYlv4gDPNvMDZlj4goYU/ONvKIKGVH4hq
7AHundh774/TFbi779ZFEN2pAjjbwhcktAoApvrVeE09ae0P7p05AVhBsiJu
YGcQ854bONM6AJyq7wXoko6/AJyo6wtOVXAAZ0Z/DUwRgDkSf5T7Jf7o5ZP4
I9HLIfFHIpHomSX+SPyR+CNRhiX+KKfEfO+mEq/cU7qhxCuM6u9K+mcZeb6O
UYpXYskFSqeVLO1TSn//EncWWXpX1xklzvs5JV7fpcTM0/p2denvPlD6Rcm8
pKXeWvN6p9IjJUutW1/br0r7lFI1WT/29Ms8a53W12B9zem3wghwJfPKNSV+
S/DKVSV9DVP6PO5R4rwkKC1W0u8O66NnPjq9La5V3mu8EqfEVX1FyfxTzxol
kUiUPUpNSUlNu09vHt4PfnmnMNhbyxPsqemRpfxS0xNsfdsdrK3gBtZXKGRQ
MV0quYO1xe3Ama2rgT6iA8N6g8jAfGBD5SLA9CnWXKEw2FjJYHlpB3Bx70/A
FI2kFHD/1mWwpl4gWFvOBayvXBisq+gK1v4Nbn+wTrGeqBY3VikCVgbkB9Eh
wwHbSnnyxECdKbGxV1uwonh+sKmKJ9iIThpdNWrYULEwWG8Ex21DlSLg7plo
wHqSUw1+7t4crC1pCzZUcgdLSzqBeYGOBsWccpz5JVzBvCJvgvXd2gLT+Rip
6lwKUS6X+KOckvij9GvW3xV/pF+xvk7ra7C+5vRbEX9kKUoikSh7JP5I/JH4
I1HGJf4oO6VnTReVNirxykylTUq8skRJ90d0HHqdrIF5I7P9U0p6GX1XUvr7
7vQemrelv7tZaasSW6R/4UqIVNI/+0TJ2kiliX04q8S29J6cUIpWsqYt/To9
11ol85HqsrSny/xTJ5WYb+v9tFTD88XEUuuUue+wJEs5vKVe6TXrZXTXwBUY
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
ln3YBUwq5gemVywJvrXJA4a72IKBBV4BofUbAsZNlNsl/kgkyk6JP3oRJPEU
iV4+iT8SfyT+SJRZEn+UU9Kjxyv863s+65P522NNlv4anU/e5N/48wQAPnWU
J0Vbk41bejf9vJ1/287nh/L5p/q71tepX9HHZX0NeklLr60pqZdhPDlH5j2x
1HPzWHFG9Cexpj9qPkv0pJL5u+bi+klU4hWuH/1scD75NP3e8pm8vM6nBnMV
8Vm6mTsLegT0Z6fq5XndvAZL9fDJrZbiZk2f0x+dpevmPeH9yHmxFAFrahOJ
RM8sbX/dr+fOgJjxA8DGum+ByOKuYFmgC9jRqg448N0nYGkpN7A80BFk8v46
L3sQ4l4ALKgUCHb16wXCC+cDM7wLggjjcbEFZ/g4gam2/wf2jx0B9GFd2LAc
TMn3P2Bz1zZg04cdwPoP24O4edPBwaDRILy4B5juaQdCC+UHS1rUBju//xSE
BbiByMb1wKxAD7C8XTOQ8uQxSH2SaJCaYkCzlHQPsA/ntm0BQS5vgmneBQGd
EU9meFaXZPJHLq+DFY2rAd3b8myNOSU9QFgRG5A9/ohnLwx1zg9+9HAG+yeM
BLvGjQah1aqBqSUCwHAPRzDQ6U3Ac78HvPlPsLBtO5CiDKd8t+d2iT/KKYk/
Ykn9ivgj8Ufij0Qi0XNK/JH4I/FHokyS+KPslH6/XFbaqsQry5W2KPHKaqU7
SpbqZHme/8ynXh5Syrr+U4uVdittVlqjlBXtZqeYzWYkhnpmvlMp/bO7dTHD
5xng1tS/Q4mzTy82QYlem+eH88mzlmqjn1qmxCtch78qPevY05c+9qtKY5T0
Ea1QojtLv7aDSnzNXwP2KllqMSvEUfBXAl6h06SvzLp2RSKRuVKTk1PTfhe6
sH4l2NSsBois5AvW1ygJtjeoANbVM9jaoi5YGeAAMu6MzP1RWFEHMM0xL9jV
9xOw8P1GYKpzXsB9d3QWfL4q/dGeUYOBPq4LW9eAYKfXwPQAV7C6cXWDtg1B
RHF3sH/MEHBo/HAwxTEvmB3oDpZUKQWW16pqUK0cmFXOB0zzsgch3g7gxJxZ
gG0lJj4GySTF4O6dKyCiSkkQ5Po64BkRz7qn7m/8kXNesLxFbZD09OkfZ2H/
euUiiAgoBKZ72IIs90fOqNZmqJMtGFggLxjj4wlWfNgN/DR8KAiv3wCMKewG
+jvmB4OdCxg45gPjPZ3B7Ho1QdLDh0lpv3vTs2fL8hdlssQfZafEH734En8k
/sh6iT8SiV4ciT8SfyT+SJRZEn+UndKzNe5i4nNCuf8qSOm40i0lZrbcPbVN
iXljghLroSth+fFKzO1Z/3ol+qbDSvRcR5VYw34l1r9B6ZTSKiX2Rx8F53qT
Eq8wv2WOzbya9exRYpbO8mxdzx5ZhteZG99Qokeg82L2+7MSS7IV5vbs+Tql
X5QYAdbGnVrcY0Y3wZiwXebYkUqPlG4qsQ/sJz/F+vUMnK6HtS1RYqz0WWYM
9V1kjNUJpbVKHBff5YzToXCkMUr6+tHdBN0xo8FRhymxDKN3TYnrgauFrdBD
8Ump+5RilX5Q4qc4XrZCF8DeMmJcCVy9epQ4C1x1HAs9vh4ZvjtJiddZZrgS
e8VZYOvsOffRMc5DlU4rbVfijDNu+j3CaPM62+V1jpr1M1Zc+ayHq45946fY
B8aEEY5QmqdEr3RWifWzn1wDbIu7UumaGUO9n7IfQyTKiHR/dHTEILCmVjmw
qU4ZsLtbY7CvXzewsnQRsL9dE7A6wNGghCswnc8Q4Gig/E5kSTfwnPvrvAsC
PsV1S9d2YG7tyiCkiA0I87Y3UH4h1McRBNn/C2wf8A3Qx3Vh10YQ4pwXhPk4
gRVt64Ftn7YDIX7OYFHbemDbsG/Aisa1wJzSvmCCqw1Y3vhdsPWzjiCoiC2g
P5rmnh9M9S8MEo7sAyqbT01MfAT4jbS0d3cwtsA/QZiPAzB5Ou+CIIx42v1B
qKctoAOyxh+taFkbJD1NTUo71eDm+bNguq+LQbb4o6GO+cFoDzcQXLEUGO/j
BRZ36AjW9ukNNg3+Dnxv+yb4zjEfGFDwdTAp0AOM83YBP/oVAU/u3AJpi1L8
UW6V+KPslPgj8Ufij9hz8Ufij0SizJX4I/FH4o9EmSXxR9kpPf/R81JmtvRK
3GHFSDJHZVbG3JVXliox16IToVNYpMQ8f44SfRBnipFnlst8np8KVaKLof9i
rsg51XdeUewhc0LmjdxrxwycuR/7zIx3vhJzXe4+4q5CZq28wnc5Ln4qWImv
6S/Yf/osforZLHvIaDDf5n4z9oRZbpQSS9L1TFZiSWbXLElfRu/DTJgOiJ9i
fNhb5rd0rwuU6K0YJfaZubH57DOX5ikQjA/ngpFkzsy5XqiUaibWQ7fCtcE1
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
iV5MiT8SfyT+SJS5En+U22WeH6afxWV16y+CMqs/L864rMnJ0y+ZFa2/mDVn
/x1hTc3/4X9/C94qd8k88i/aWMz79uLs4xVlRLo/uv7LTrDmLW+wr3d3sLlx
dbC9fUNwclEIOLXA4MTYYWB/v15ge6emYEvNUmBj1QCwOtAFrAl0BquLuYBI
WCFQ3AWsLukGIovjn87LPPOBxZ4FwPb6b4OT04PAw+vXwF/6qdxQajJS/T/c
UIoFtE8pElOSQfKjB2DPxElgRpW3wMGpY8DW/r3BZIe8YKqXPQh2LwCmFHwN
zK1YHOzo2gbMrl4ezHnbYM+AXiCycXWw45vPge7OLu8/BDZ1aw/Wt20MIkr7
gx2DeoFp7gVBUFEXsLh8AJhdzB1MdnoDTLB/BYT5O4JVHVuBHSP6gfHuBUH0
6mUgLSZ6NKyYa965FvatxW3dDLb9OAJsGtgPfPqPf4BBNq+AUYXtwUhXWwM3
GzDawwGMKmwwvWk9sPmLz8Cab3uDpR93AqPLlgAren8Mtg7/Dixu0RBM9CkC
xvgaTPBRlCgB1vYfCPTePsNSFr0wEn+U2yX+yFzij7Kn9RezZvFHOSXxR6Kc
kvgj8UeU+CNRZkn8kSg7lZqucrp36Skr8u3nq+HFj5VIJBJlp/SdV5eWzgFr
fOzAhioBBqWLgJ8/7gBuHN0PYpfMA6fCJ4P1jd8Bx/p1Afu6NQHLvOzAqhKu
gDvrVhZ3AWtKFgJ8SuyqIvnAcl8nsLlzCxCzcSV48uQR0PvGTP4v5wxYawX+
OkbNA54/sB8sbFwTHJoRBE7OmApCPQuCaY6vgVAfF7D2sy5gXbd2YEnNKmBx
szrg2OzJYFGremBFO4OruzeAlKQngK3cjDoJQgMKg42tG4K5VcqC8NJ+YH75
ABBS2A6EeTqCOSW9QWT7BmBZvYpgUYUAsKxRHXB81kzw07gfwKPER8AUk7/f
VGhlUIzda6YIm21kuxZ/BqweNRKMCvQC39m8Doa7O4OxxX3AxFIBgB5nuLcr
mFa+OBjmVABMKhkA5rVpBI7OmALmtmgCZr5dBYRXLg8GudqBKcV8wPDCTiCk
9rvgSXIKeL5hiV4EiT8SZafEH1mqM6s/JRKJRC+rxB+JPxJ/JMpciT/KKVna
3WGe/TLOKWbiu4w8nz7J63yiJc8N1svrLVraZ5J+SV18+iefKss+8Jmt5rWZ
j8vca5iXND+7wLyH5jUwVnzSa/o9SX90rIfjuqekv6t/lqd8s4z5GM37n767
Sb+kfoX3nf5cVPaEz9g1XzmW4q/30DyePH2dzxo2L2/NWrI0Oj7rlk9WNX/X
0qj1cVlqi33Wv2f4xFg+9dV8FaW/QtIvyafE8qm4luaU4rxw1ClmYhme1XBW
Kf3Ypr+K0i9vPi5L0TaPifnsm0eez/blSPXVaP3KMe+VNb1Nf1VQjC1fc1Xz
6cN8anD6c20pepbWrSg7pfuj6LkRYF0VX4O3S4DdHZqBmAXBIH5BGDg6egj4
6dP2YHP98gYNK4AN75YEK30dQWTJQgo3sNK3IFhWKC9YXdoDHOr7EbixdxfQ
k3tm6SlJyeAv+X8mKSklJck41+UJ2NG/D1hcqxJY3a4R2PV5Z7C6TX1weOpw
cGb9ErCwbnWwsWsrsLp5TbC+Rzuw+bNOYHoFf3B8xhTwNDnRQOni4f1gjMsb
INy/ENjWsTmICHQH00t5gnAfZxDq4wpmFfMEK9o3Aus6NAdb+vUFR8KmgYvb
NoCHd64B1s+DGdKmMHOiRBdpvvvu3s0b4OCCeWBy7RpgUIH/A0PeMBhk/waY
4OMGxno6gvCKpcHWQd+C7QO/AVMrlAXfvJ4HjPYpAiaXCgCLWjYEIz1cwChP
ZzCmtD948NuvIK1bckpD7pP4o5zSs2aDlnIq8Uf6dfFH4o/EH6Vf3nxclqJt
HhPz2TePvPgjUfZL/JH4I1M14o9EmSTxR9kp/X/za0q7lXiF/1Pz7Ghe2a50
U8lSnXRDzEP4xFVeYbacdf1frcQnvfKkaz7JNP0a9PwkK8RR71Iyfzf9rFJ/
l+Nar8SRci7MP8Wzyp/v+a03lH5VSr+kXudhJfZqlRIzf3oNnppuTevWKEpJ
j+fz5YHmMWEWzQjzCjNqriVe4XpersQrR5TS9yOMD0vSKTNK5j4344pWov/i
FT7jeJ6SPq5lSvzOtFQbvxt54n3m9jN7tF/ppBLjoH+bPevK0cvzf5ZbSozh
TCX9Vxp+f1qqjf9P6WtphRLv3+cdseiFEZaKWi7g7I5NYOs7JcGuDo1AXNAo
ED0/Avz01ScG3VqDBf7OYKVHfrAq0NGgvBeIDHQDy7xswZIi+cDmGmVA9PhR
4MH5s0BvPDE50SDpCcgKT2Q+Ur68enAX2PN1T3Bk8Ldgc7+eYMPHncEvw/qD
FV3agXnVy4Pw0t4gLLAQmFXCG4SWKgrmVS0BtvT5BKSo4xJY/+XDe8Akd1sQ
5PImWFA+EES2rgdmVAoAq9rWBcvqVgaLK5UEGzu3BBveN9jUvjmIbPEeiNsY
CVISH4PUlCSDNNuQRaEy/XbB3XdaKykP7oOYyKVgYatmYIiDDRhTxBEMtMsL
5rxXG2wdNhDEbloJ5rVpDoY72IKp77wFFnVuCcYGeIKQquXAxDJ+YKi3K7h2
5jTQe5I1oxRllcQfZafEH4k/0iX+SPyRLvFHusQfiZ5B4o/EH5lJ/JEoIxJ/
lJ3S75FzSvQyjOREJT5v9L7SSiWWZ9bH3InR5nVm8rwyTYm5OjPDfUrMJ7nj
brNSghJroGdhuyxP78a29B0yFPcUrVMyH+NFJWanzFi4QjjeMUp0UsxtmFNx
5fAK62d/Tigx86cLYJ26p2BtLM9WHmhieX6W5bknjdeZ3+r956foPvTr85XY
7hFNNzQxbpxlxp/R0CPPK/RxwUqcQX7qjBJL6rva9JEy29ezR9ZGr828lO8y
thwp9z7pa4+v2U/2X19pPystVuK4+C7XKnuyRYkt6jWzBq5trmS+y2hzrpmp
MjL6KJi18soSJZbkiJYqcR+apfVMh8VcmjWsUaI/opc5rsS1zfjwCmvgePU4
cM38oqR7Yeb/+u5W+iC2yzL8xqO/ZvTYFudL91Z8zbXHKHENcG3wLmbM9d8Z
zHepMT68d/RVxzKsh9f1mWV8dL/A+WJtXD8cKeeU88u7gOXpdlmScdPbZXzi
lPjdot99vMfZK94F+rgilbhWOa5xSnyXseXa072SftczYnuV6OCmKHHUXMN8
l6uCrzkKRoB78Ng6x84WGU+W5DfYU1G2Sz+74Oy8GeCnri3AwU/bg1Pjvwc/
fd4NHB0xGERNGw92D/gSRE2eCH7p+xFY6mEDFnvZgvWt6oKYlQvA/d9uA/MW
09rN7r/C18cbtW4l2D34W7B90FcG3/UGW7q3B0HuNmCi65tgelFHMKe8H4go
6QkWlvAGi6qWBNu/7An0Vm6ePAxC/AuB8AA3sLlPd3Dr5EFwbvMqcHDsYLCl
ZycQ2aQW2NXzA7ChbUMws4QXWFS9Erh3+RxgzQxctkZM80rm78YdOQRWfdcX
DHJxAWP8fcDq91uBrYO/AvO6fQDGlC4NlndqBxY0bwBGFXICE0v5gUU9OoKp
1auB2wmxwNS6fjqHKJdI/FF2SvyR+CPxR+KPxB+JPxJlrsQfiT/6DxETfyR6
Rok/yk7p/+Pz/2tmsNzFxJ1RzDyZiTG74P/+utNhDsbI06cwJ5mhxMxwgRLz
EGb1zDqYkzDvZUY6VUm/zmyEOQMzUn0UzHCmKzFP4BWOLkyJGSCzHeaT3CvF
njOHoS9glstckbkWM0CW5FjClZiZMIdkDsxVR1/J/GqDEkfKvJo5zAVNHB1j
q7sejo6f5aiZKTHCHAXnhbun6Cn4Lser7w2ji2HeznqYlS1SYuQ5LubAHDvv
IPaTOba+ZhgT3XHo+RhdAFcFY3tUE3NXRp4RYM1cXVyN3EfHPrDnoUq6F+Nr
rg2u1YVKzCFDlLie2SJXLOeOPWQ06A3phVkznSlb54rSs1xGj2NhnYw852uO
EvNntsLI8DojzPKMIVcOx8ixcL8WR8F7h/cmYxKhxPJzlbhrTt/NyPLsOdcJ
y7D/cZp4n3Jlci2xP5w13lMcL1eRft/xfmHMzXes6f6I4+LKZM28Qgd6VRM/
y9Exz6drGKTE2tgrjoWR5Crlbzj8LO8+/r/ANcYI6D3kfHEsjDNnhyOiX+O9
qa983QVzxeoOhe/yLub9xfXMbzOWYc/5mq6WI+X/R5OVOCL2hzVwdHzNbwD2
mT0Zr8SxcLx8bf5tL8pqpaYloODUlDHgUN8eILJ8AFhbtSTY3ecjcH5zJLi2
Zxs4OW0SuLJ7K9jxSSfwU+9PwMUdGwD3gOmtpCQngaepyU9TLe6SzR6ZVpfi
0d1bYMeQgeDcrg3g4MRhYEaVkmB2aW8ws6QnmFXcHaxtWQfMrxIIltcoB/Z9
/zE4NGwA0L3er/Enwe5JQ8CWPh+BzT3agJ2DvwZxa5eCTR93ATOrlwVLa1cE
dFLTA4uAFe/VBLHrI4Gp55qzyzGpuPFMj+SUlOS/9ue3c+fA9h9GgbEBPmCo
eyGw8qvPQVidWiCiSV0wqGABMNnfC4RVLAMWt2sJlnZ4Hzx8eBdwZWa7gRZl
gsQfZafEH4k/En8k/kj8kfgjUeZK/JH4o2eQ+CORFRJ/lJ3S/8fk/8XM5ZhN
MTdgjs3/wZm9mO9kYxlmGtwHwjMc9L+G1vcpMW9kyY2a2KL+d828zjml56Jb
0VvnLNOvcTaZTdEv6B6BGaOenzDzYUn6Ml5nLs2ckFkWa2A+z/yHV7jSOFJm
LMzG+S6zFObG9IbMMJmncecScx7ux2N53XFwLuhN6Nr0cydYA1e+fp4Aa9B3
uPE1c/49Shwjy3NG9NjSVzLr42f1d/XMn1f03JitM1en+9A/y/yWV5gtc+eY
PuOcI71+rgE98hTnmrPPd/kprkC9PMtwTs3XMKOhj4Kx4qxxDTDj5RWW189b
0O8m/YQQfScbfQHLcN5TNXENME9mfs7R6XFgGT3vZU+4DjlTXAnMlrl+6BM5
Is4L7ybOr34qO3vLfFs/rYJ3Cu9Z9oqriBHW7259RLzC+vlZjoWzz3jOVtL3
E1L8NmD/+VlGnt6WrfO+468K/KVCv3P5LketR15fUfxO4Kj5KwT3rfG1pfMc
6FI579wByO8NXuH3JL/H9P3AurPmu+wbo8FvCf4uoX+HsDzHO0uJ8eSn+MsG
Z1Nf7YyV7jfFH2WrVMabpDg2bjj4qUUtsLlJdbCuRinwS58PQfymZeD8jvUg
du1ycPXAHnD79Onbfz1fiDOYlJwEklNTklNfuGd96l4jbsMm8NPQQWDvtLGA
z4RdUM4PzAl0B6HFDfaN6AtmFXUCS98pDVZ1agR+/qoX0Ou/fmgvCCnlDSIC
PcFsT0ewpMZb4PiUH8Gufp+ByT7OYFmNsmBOOV8Q2awWODx5OEj8/SZIewjs
i3jSddpWSWOe9euJv/8ODs2eA2a1ag22jBgE5rZuBL7LlweMcLQB63t2Bwen
/AgOBE8CRzetB3r9OTEy0fNL/FF2SvyR+CPxR5T4I9Ym/kj8kSgTJP5I/FEG
JP5IZC7xR9kp/X9M5j/DlegCmPuNUuK+Mu5J08/7ZS7H//d1h6Lv7eH+EGYg
zAGYz7BOZnTMjlgPdytxNvW/K2eGoOfSzFiYm5n/JTIzSWZNHCl3uDEnoRNh
SfaWmRizd5ahb2JGxxpYkjXzs/qOF+YnjBt3avGz+q4ejpdZHLN0rlVmZWxd
HwX7zHf166xfPzGDeSNHwSvce8OcjTVwtw9b5NwxE2MOxllgJLlri6+ZfXFG
WDMdEHeLsQzjo68Tzib3Seq9YpTYIu9QxplZHx0fPZ3ubZnJM0/mFWaGHJGe
gTPDpFfl/jf2Ta9ZjxtL6m1RnLUJSowtr/Mv8bmuGFV9lXLN6+6PEebvD8yr
GU99BXINcxXxdwbWwE8xl9bXsH7GCOeReTjb4h3KnW+cKa5DXuFI9dMb+Jq5
NFcL72K6Qrarnx/CnjPmvOv15wJwnfBTdFL0evxW4TwyemyXJbm/UT+fgT0P
UuJ3AkfH3zF4h+oOheuBs8b6uQ45at65+vcGZ42f5fzSOer3IHvOtaqvDe6U
4/eY/j3AXZG8wnc5CvaNLXKMjK1+1jo/xRFxdFzJnE1Gku3yG0b3pFz5XMn6
6OR8huyX/r/q/bu/gqWVS4ADPd8HF9cuBIe+7gV+6t4G7B07AFw+sBPgv5wH
aefSmGpjnmwccZ1rslk99972xcdgRkARML1wQRDsbgumutmAhVVKgZ97dgSL
3y4DZhbzAKPz/j+wpkNLoO+vu3l4L5jm8gaY7mkLQjztQJi/Cwj1cQCrG1cF
m3q0BUGu+cC8ioEg2N8NXDm6H5j380UWt2qan+SgHsybdOn0SbBhyFAwqlQp
MKlqebB1UD9wctk8MLFRbbB13LitaWfImHZminKVxB9lp8QfsaT4I/FH4o/E
H4k/EmVc4o/EH2WuxB+JKPFH2Sn9m5z5lf68QmatzD95hf/XswwzLmYU/B+Z
GR33NdHL8H9/ZjXM/XTXw7yOu2uYOzHXYm7AGWQ9bJ25pf50WtbPTJ5ZBB0H
e84cieXZLnMzjpo5HuvkPh9mKczemUUzJvr5yRw1fQczHPaZderOkVnuKU3M
fFgDfQTzZ2ZW7BvjwBqYe/M6I6xnnroPZXm6NmbUvMJ+6pHnbPK+4F4dzikz
SWaDvIOYD9PH6c5RXzMcO3M2josj1c8u4GyyXe5x0vdPMq9jBLijia6KM8sM
kzPC3uqzr+ecHBHPFmBsGQ1mkqxNP/GYa5hOgS6PUdLvDsafMWH0OAtcb/oe
SEaJK0o/lULfz0lnwd8K+FuEvq7o3RgZfdYYT9ag+xR+Sj8VnLXx1wPdRVKs
h2UYB3o0ug9GmLPAiNFT6OddM8K8U1iSV3j/8lO8I7iW+Clm9eZzRC/G8rxn
zc+j5vzScXDs+t5XfVycTf3sF0aA9wjXoe5x9N9VeH9xpel+kzPC7zeuYX3l
6yfG8ArHou8SpLvhtwpXPueUv2zoZzjo33L6dwh7zu8N9oTv8lvC/LuRs8CV
qT9DWXbWZau0/VoP7t8Du7u1BOurBIJtzWqCq5tXgtsnjoGHN64A00cVagNd
Ev9aP+eG8fzSfceVg7tASHEvML9sURDmYQ9m+LuC1Q2qg3UdmoE5NcqCKW42
YJLzm2BDl7bgb/yRuw2YXrSggbfCww6EuNsYeBcEc0p4gJAi9mC6fyGwf+xw
kJz4CLyYe+qskup52hNmU1P/ur/y1uUL4HpCDFg/ZCiY07gJCKn8FljxzdeA
JVOSklLkl5PcJvFH2SnxR+KPxB+JPxJ/JP5IlGkSfyT+KOsk/ui/WOKPcouY
+ehXmHVYs6ODZfQMMyPi//6PNZmfM2wultGfUsor5uPS+8ycimuMWZPeh/Rb
ZM3m8WE95jvosiKrYet6z3UxGnr0mMulP6eMht5/9lzfp2QebfN2za+znvTX
CWtOv4ylSFpq9/mUkTvCUg3Wy3xvmPmoeYXfkwc1mef/6Ys16NHja7oAzoVe
m75n1bwe/Ux166XXz7Wn16//nsAr5rOg7wA0r//5emUu9kpvne1avyrM78r0
Z0rcUM5Kj/+vFy+Bje3fA3uGfAWuHv4FPE16YmD6gEFqciJITn0C+Jf5uX0e
084WwKJN2fxNLzCjqCMIcn4drKhTHiyuUwUsqf4WWNO4OghytwMTHPOC9Z3b
gL/xR4ULgOne9iDMS8O7oAFfF7EDwR4GU30KgQdXLgLWk6zMZ87FJjOVapI6
tVvTnfPnwcEF88Ha3p+BZb37ANOncq37/m+W+KPcIvFH4o8o8UeU+CPxR+YS
f/TfJvFHlPij7JH4o/8eiT/KWVnKqawvn/EWs1+W+qBfZ77EHS/WfNaaFrN6
7Om3kvGZfdbVkpF2M17z88maMWZPu5bEXVX6bitLvw/odfJEAu5F1N991tnh
FToU86evWqrB+himXzKzIv989+Oz9i1z6xe9oNL2bv1+8xa4c+4C+GsZ5Ym4
Dy337vVKV/pavXvjCljWrinY1vcTsK7de2BaURcwo5QHiGxaDUz3cwXj7fOA
Z/ZHGhG+DmCS3b/AjsH9gTrkIPXl9gWmrzCzcyceJyaCi1ExwJpfj0UvpsQf
5aye9X/kjP9//SL8j29Nbib+yJoyz/cpa97NeM3PJ2vGmD3tWpL4o/RbtEbP
dz8+a98yt37RCyrxR0r6WhV/lD0yfYWJP3pJJf5IJMpqvdxZ1ss9OnPp3345
3ReRSPT3Sk15YsD8/M+U/yUXz6bm6/ifdoADI4eCgxMGg+Cy/mBxnUpg/Yct
wYKyfmCifR6wrksbYL0/Mp3V4O0AQgsVABHlA8H9W1cAuqJ6k5z6suysS18m
q2R2Krgo90r8kUiU1Xq5HcTLPTpziT8SiV58iT8Sf5SdEn/08kn8Ue5VxvPS
jOzw0a9Y/7fMz9fDjJfJurayf7yi3CiZWZEoy6X2zqX97bwiNe1U5v+Sm8+0
k1DFIDEJrP6gLVjwdlmw/L1aYG2z+iB28VwQFTIRTLZ/Fazv1Abold08vA9M
LVwA0BOFetqBEA9bwHO/Q7wdwRT718DpuWHA1BF1AsbT/6LQ/7tyy/NwRZYk
/ij3SvxR5rYo/kiUdZKZFYmyXOKPxB+9MBJ/lNsl/ihnxRimWpBekh4kfUfD
6+Z/D6hfz1w3kf7fHlpThjIfnaXPWjOK7IyDef16zXzNv8pPv930r6c/ImvW
jKWazctY06J+kjafuWmpP9bXZqkP+vWsmzuRSCR6OaRn5lcP7wazS/mAPd9+
CmZVLAU29/kUrOzaFswu4Q42dH8fmHyl0o0j+8BEt/wg2NsBhPk4gYjAwmB+
BX8QEeAKNnRuA1KTH4O07/n/Xmckejkk/ihnJf6IEn+U/vX0R2TNmrFUs/gj
kUgkepkk/kgkyrjEH2W/9OyOpwTfVHrWevipjOSKfLqr/sRG84w0UumOEq/E
Ky1VWqfEZ2XyW5FPwNRzZkvSW9mndFXpWUfBvulP6nxW8Zxk8ydUnlY6q8Qr
HOl1JV7ZpWTpr/WvKG1VstS6HoctSueUnm8sWSfzlcaVwLueV6zxwpZqE4lE
IlFmSX9i7M7hQ8GcqmXBrHK+YFGzWmB65RJgVrFC4NDwfuDp02SFoV9PHgEL
yxQFC8p6gYVvFQXzSnqAxaW9Qah7fnB5/8+An0pWhxTk3LhFosyR+KPsl/gj
vS2+Fn/E1+KPRCKRSJRxiT8SiTIi8Uc5JeaHN5SYVTKGzMmZebIkI3xIidFj
Jj9NKVqJTueU0kkl1s85Yiu8zoyd765SogNiK3p+y5rHKV1W4vU1SvoVeiVm
9ayNbuW80mGlB0rWxIF+J1YTS3I31xGlM0r3lSKU9ivxuZmM4XElPQ50lIzD
RSV9RMuUWCevcz0zqr8rDVHifrkEJd378BmgMUq8wt7SVR1T4tNF+a4ebc4L
o82e8zrLM7asgWPku4wbx6vHijWzPK/rO9P4+oIS/azuDS3Fn2LcONL1SowD
32WcuZIZN46Lo2A09P4z2rzOkvqaZ81cRayZzwtmz//DDSYSiUT/xdLP1v79
+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
R+lWzOVjTMt22M9PJ4yoi6+uTpO/O/Rrujajd64l3k3uBPLlhPE/s9R4Li3g
koR+TYPmDiG1Xp3XYjt0H65/7n7PHQzYDq/L1vL7z/M9M98r2gfXZPHVudPC
V5PifezpTfn9SSYk7BtzU+liPMqR8u8DfI745PKvGZ9PbkxYn2Nhrmze8uiV
/MtG8X2RJGlosR+pEfajZp9RNYf9KH/UfiRJ0q6zH6kRxfsz0G747W++Zix6
c8KajJeYz8bYlXsLM+K6O7kv4b4KjP0YKzJXipl7jL7Y5ryk+FvzzOdhdh9z
qGhbzFZiBhRr0rDYAo9y3fLoJ5L8jtCO9DpZcRYlnZclXEXMi2OO2SMJjzLO
p03Tnk5PmJnGLDU6ArMu2U4+f4w7KixP2CbXFfuQNxE+HczWy/ece4Ywa5Tl
fF7oR9yHhM8Un7spCXvC/nMNM9eUu3B/JWEJnyaaEcdFm+NZ/DsDd6LgzPDq
7AlnjC7GEubX0QHzeX3sFUed33eide+7JEmtYz9SI+xHrT7DGhz7kf1IkqTm
sh+pEfloh7/WOj7Db7Izp4gRFOszgqKPPJZwL+WHErbGb80zn4cl+Z0TmCmU
j4G53riK8t9b51HmCDHWZd/YAq+S35OZESm/7c6jbIE94ViKx65OU7wyuQJZ
wvcl3lPG/7z7PCtfn/l4+cxM5o9xv3pmY3JdcY9rtrAoyRsBrYrGxNXIcrbG
+myfPWFJca/Yc5bwqeHV87sicHeF/PszyzlS2kre3cDVzr8AzE1YzqeY9Xld
Pmt5d+MoWJJ/7ngW/3ZRfF8kSRpa7EdqhP2onPOsgbIf2Y8kSWou+5E6h2Mq
qRG1PikDXd7Io5IkjTT2I3UOx2lSI+xHkiS1jv1IA5XPUsvnBeWK6xefVXy0
1vZr7UMj+5bvYa29Kr66I8ahqP67Wf8aYEnxeiteS8Ut1NpmrUcb30JxH2rt
W61PUK3t13+01p40vs+SJA1d9iMNVD6+sh+pc9R/NxsZ1duPGvksNLLPkiQN
XfYjSZIkSYL9SJIkSZJgP5IkSZIk2I8kSZIkCfYjSZIkSYL9SJIkSZJgP2qb
vr5If9+OyO/6+40ZTH6XwrW0Y0ek3Zd1QdrP6r61/XSZoZ+driVJklrAftQ2
9iOz67EfmREW+5EkqdXsR23gT3ZJ2nV+L5UktYD9qA38mS5Ju87vpZKkFrAf
lSr7ad49e3pk/ic/Eplxyt9U8o7XGTOIzP7gOyNr7rw1Ur3S0oy7Nl/n2Wyo
5VdcHJn2lldFprz2JcYMIlP/5mWRhz/7iUjP6pWRna43SZKaxH5UKvuRaUHs
R2YkxH4kSSqH/agc/ZVbMVTHq90zp0W6XnxYZMzBT4+MO3LvSo54ljEDy5GV
jB21V+ShA58SWX75RZHiVdeuq33+WWdGxo7aM7Lw85+MLPvW140ZUJamLDn/
S5FJJx0XmfLq4yO969dGdrqBgyRJu8x+VA77kWlJ7EdmBMR+JEkqk/2oHNX7
eCcLzv5ohGY08YRRkQkvPNiYQafr+EMj44/ZPzLxZUdFetauiTx+8ZU3bsyb
0eZpkyJjD98z8tiYByLl7IOGtx3d3ZGul4yKLPvO+RGWd+j97SVJQ5D9qBz2
I9O62I80ctiPJEmtZj8q3/R3/HVk3FF7R6pD3Oc/x5hdTbqWxh29T2TTlK4I
11uZs+z6d/RG+Hr1LddHJr70qMjjj1ZGsP09PZX09hrTaNJ11bd9W4Rrad4/
fzAy54xTI/nVVc51Lkka3uxH5bMfmZbEfmSGa+xHkqQS2Y/KN/3tr4nwm/X2
I9O00I/SdbVp8oQI11vb+tHN10Um/sWRkZ3uN+7v0WtQqldXun6q/ehDp0Qe
f9R+JElqDvtR+exHpiWxH2lYsx9JksphPyqf/ci0JJ3cj/JOZD/SoORXl/1I
ktQ69qPy2Y9MS2I/0rBmP5IklcN+VD77kWlJ7Eca1uxHkqRy2I/KZz8yLYn9
SMOa/UiSVA77UfnsR6YlsR9pWLMfSZLKYT8qn/3ItCT2Iw1r9iNJUjnsR+Vr
Wz9Kr9X1wkMiE15wUCXF5W0f5A/kWJq8Tc4JWz7uwErafpgDPyf2o/JVz3B+
D/O6y5v2ujSCYXc+a7EfSZLKYT8qn/2oWcfS5G3aj3aZ/aiR5U17XfuR/UiS
1AL2o/KV2o8Y86eMPXzPSg59RmTCsQdEuiq16OBxo54ZqS7Pe1NnJu3huCP3
jow/Zv9IdfkuNZqDKknnZNwRe0Wq5+G4Aypp+yE3GPtRqfpTVB77kSSpHPaj
8tmPdv2I7EdPEPtRqexHZbMfSZLKYT8qX0n9KI3wxx97QCVH7xuZ/cF3RuZ9
7AORrhcfHhl7yJ9H5v3zaZGFXzw7Qu+ozrh70SH/K9W9zbLTozW6FS2sOKMv
P/bq7L58m4X5ftU2d9TekdmnvSPSPWt6ZMX1V0Q4n10vPqyS4v6kr9kCW67u
VWH7a27/fqR7zozI9Le+OjL+uc+OsOWd9rnusVdfKz9v9qPqSkO8HxX2/7Gx
D0Y2TemK5MvX/fzuyPrf/iJSfWoawxdT3ebvJ+PFW5Y/WmMfVt54dWTrogUR
llTPf3UL6ev+vkqGBfuRJKkc9qPy2Y/sR/ajcvanJexHbWI/kiSVw35UvrL6
USXjn7df5NG7bo8wjto0uSuy9eF5kYkvOyqy6AtnRVZcd3mk2o/SXLUxBz3t
96FJMfeMhsL+jzn46b9PdTZaoZUwf2/8c/eNVDtOem71DGTrjE0Z85zdI2MP
2yOSb42u8dD+fxph/L/qpqsjXS85vJKoPy84qLozaQvVV0zPouOw/8wkZPtd
xx8a4ehmfeDtkR1buiPT3vKqCOewum+cgfR1db5iWvL4a1W2X5zNyKPVOXut
bkn2o1Zjz1P6tnRH5p753sjMd7/595n38dMijNVXXHNpZOUNV0aavCN9OyKL
vvCpyKZJ4yPN3X5nsh9JksphPyqf/ch+ZD8qZ3+azH7UVvYjSVI57Efla3k/
esHBEZrO9JNfGWFc0XXCEZHRz35SZM4Zp0a6XjIqMvUNfxmp7tURz4pMetnR
kSXfOCfyyPnnRhZ86szIrH94S2TGO15XySlviCz8wqcii7/yuUh1Blq6y8GE
Fx4UoTUwhpn2hpdHxh6+V2TmqW+s5F1vjnCPhdkfPKWS9789svTir0Xm/dP7
I+OO3jfCWaLvMOdt+6oVkVW3XB+Z/IpjI3S6ReecHXnkm/8VmfLXJ0ToQRzj
rH/428iCT38s8vB//Etk3FH7RGiRq75/bWTbskcizEWcdvIrIzPf9abIonM+
HZn3sfdH6HELP//JyNKLz4vwWuwh/XHOGe+KLLvk/Mis9741ks9dtB+Vsz/N
RSvh6/W/+XlkymtfHMnX2dQ1NsIMt22LF1byyOIIj/asWhFZcdUlkdU/+F7k
0TtvjWxfvjSyZe7sShbMjay57abIo3f+IFLr7G2ePiXSt3VLZMfGxyKbp02O
bJo4PrL8iosi25YsihSfOxTZjyRJ5bAflc9+ZD+yH5WzP81lP2ov+5EkqRz2
o/K1vh/94c4ME084IrJ92SMRfk98+tteExnznKdGRu/9J5HVt94Q2XDvLyKj
93lShDHeoz+5o5I0N489p8WsvuX6SN+2bZHVP7gx0rPu0ciq710VGXvw0yPM
eWNu3uYZUyOLzv2PyP277xZ59K7bIut+dldkzCF/Huldvy7CDMBVN10T6du+
LfLw5/41wly18UfvE5nz4fdEdmzeFNk8fXJk5ntOjnB0LHn0x7dFetevjUx8
6VGReR99X6S/vy+yceK4yKJzPxOp3tUh3bGBLTBvioa15GtfiPT39kY2jhsd
obWtuvm6yIbR90aWX/mtyJa5syJ0PXrT1sULI0vOPzfCOHn2+98WGTdqr0hL
3nf7Uatlf+mV1jP5pOMii//rs5GeVSsj+eoLzv6nyJKvnxPp69ke4bP/yDe/
HJnzj++KTHrFMRGuloejtn/6Y5Ne+fzI4q/+Z2TSScdFVt14dYRtcjXy9dTX
/0WE+XVbFz0c4Qp8+LOfiMz96Psi/HtCf09PZAif+cR+JEkqh/2ofPYj+5H9
qJz9aTL7UVvZjyRJ5bAfla+k+zNU56RVZrhNe9OJEe423Ld9e6TaTdLdDFZc
fUlkzZ23RsYfd0BkR3d3hLsTcAeDbSuWRR468CmRR390SyU//mHk3t12iyz8
z09GuL8x2+T+4Xz92NgHIgs/f1bkgWf8UaQ6s+iOmyP0o20rl0eYk3bvH+0W
WXbZhZFNUydFuKMCezLm4KdFumfPiMw+410Rjm5H9+YIR/3gHrtFaHlLv/X1
CDPcetauiTCbLt/Ph57z1Mj8T5we6Z47K3L/U3eLLPnq5yO0ttH7/klk8l+9
MMKMprkfPy0y9c2viNDvuHf65qkTI8uv+k5k4suPjTz20P0RzvBDBzwl0vWi
QyP2oyEpn+E2dVKE2ZhdJ4yKcL3x6KIvnhVZceW3I9uWL40wz7P63CldkTmn
/32EJfM+/oHIsksvjLCE587/1zMi1Rfv7Ynw9cxTXh/h3wS2Lpwfmfr6l0by
nZ36xpdHti1dHCnu/9BiP5IklcN+VD77kf3IflTO/rSE/ahN7EeSpHLYj8pX
6t+HTf2Ie2I/tF8l/EY543nm4Sy98CuRdT+/K/LgXn8c2XD/ryu575eV3P+r
yLqf/Tgyep8nR9befUdkxXWXRR7c448jCz/7ichj4x6MFPsRM9O4H8J9T94t
svJ7V0X4zfRqP1q+LDLrfW+LPPjM3SKLv/wfEdpKfq7GPXffyJZ5syOMkeZ+
+D2R7pnTIjSphw74swiz4FbfdlNkzumnRrpnTo1wt23aFnf/Zh/Ywy3z50Q4
Y49c8OUIZ2P0vv8vMut9b430PrYhwqynNXfcEll987UR7jvBvq29584IcxHX
/PDGyPxPfiTC3RuKf53WfjTUcbcEZpYyo7J6h5MLvxLhqLlC+PcE/sbx8u9e
HGHmHn+pedWN10Sqdwi/6juRBWd9NMKr5P1oxjtfF6Efcd3OePtrI7xW76aN
kelvf21k2+KHI9UdHbLn334kSSqH/ah89iP7kf2onP0pk/2o1exHkqRy2I/K
1/J+xDg5/SVTxmDcuXryq18UmfCiQyLbli2JcCeBZRefF1n/659GRu/35Ai/
8c39gRmzMe+OeWvMzVt1y7WRB562W2TR58+KMCav9qPq/Rl2j2zqGhdZef0V
kfHHHBjhd8nX3H5zhG6yffWqyKIvnh0Ze8Reke4ZUyN0HLZDo6FfbF24IDL/
7H+KTHrFsRHuvTD7Q6dEaGe9G9ZF5v/bhyNzP/zuCHOQ8r9LW+1HaZ9pi1uX
LIyM3udPIksv/Gpk44QxEeYWTj7p+ZHeDesj9DLmyzHvjna2aeK4yMrrLo/Q
qia9/HkR7n/OfTNa0ojtR62W3Z+Bf09Y/t1vRXZs3BDpXbc2MvmVz49wpXGP
BfoRo/eZ731LhM8j11W++bkffW9kxTWXRViy/PKLIvP/5fQIS/J+NP0tr4ps
njYpQiuf9sa/jPAoM06nvunEyLZFCyLVlxmy599+JEkqh/2ofPYj+5H9qJz9
aTL7UVvZjyRJ5bAfla+k+3unmXX8dvZjYx+MbFu6JLJ1yaLI+l//LDL2sD0j
9COayOh9nxTZPLmrkpnTIuvv/WWEey/M+Ps3RLifw/LLLow8uOcfRxac9ZHI
ul/cHRlz6DMidAH+jur8sz4SYfRId3hs9H2R5Zf/d4Q2xF5tWTAvwr0XNnaN
jUw68XkR7lpcHf8fvU+Ee2vPP+vMCPu85LwvRGg3zDViHiD9izsnbHjgN5Hq
32nN+hG9Zv4nzohwN4mH9ntyhHuAr7379gj3GOddW3DWmRHOJ11y4/jRkerf
203nvHvOzMimKRMjzOtj9iB/gdf5deXsT5Ox5ym8szNOfWNk+t+9NsJfE2ZO
Jqs/csG5kRXXXBrhXZj25pMic8/8h8i8f/5QZO6Z741sX7k8sujcf4+s/uGN
Ebaw+vvXRhZ/6d8j1V3I7u9N6++eMyPCXUTmfOidER7dsaU7wr8YbF+6JLLT
UQxB9iNJUjnsR+WzH9mP7Efl7E+T2Y/ayn4kSSqH/ah8Zd6fgdloYw9/ZmTK
619ayetOiDBKp3fQZcYdtU9kxjv/JsJfO2Wm0ITjD4vwt1M3do2L0CYmvvjw
yITjDqwkHcUT3LM624fJf/WiyKQTj43QcegIXccfFuGvbXKvY/4m5oRj94+M
f96zI2wn33L1tVieQn+ZdOIxkSmv+4sIMwyZz1Z9rfp31X7BwZHqOum4Hn9W
pUPlR0rvYw4ho+LqbqR1xh+9byXpLuLTTj4pMvFlR0dYUjwW+9FQt23ZIxFm
XVYXpWPs79leSRq3868H8z72/ggz37hHCvdPWHbJBRHm7/X19ESqm0nvXa2R
f7UrZa0tb09PsM4QZz+SJJXDflQ++5H9yH5Uzv6Uw35UDvuRJKkc9qPyldSP
soZS/VuxjNufW0n1dbOxOp1lymtfEuHuB9ybmr/Tyt2zuSMBvWOncT7dgdQY
t9N0xh+zX6T66sfsH6EfMb+OGWhjnrN7pDoDrVabqL4WSY3phYdE2P4THGP9
PawmbS1fp8azeK0Jxx4QoVfutE72nvJodX5g65qR/ah8/X0phWPJ7uFQ/Euy
tOmlF30tsuQbX4ow/437gRefpZz9SJJUDvtR+exH9iP7UTn700L2o9LZjyRJ
5bAfla/UflTsSjVG6fQRxvOTX/mCCHchWHD2RyOPz1jbKzLIewvUffXqPLQT
jojstH5TX6XM89mG/bEftUs2w63mo8n25Usja3/yo8j63/ws0rdlS6S45qB3
JaX+kqHKfiRJKof9qHz2o+Kj9qMmxH7ULvajUtiPJEnlsB+Vr239qOExP3cS
GHvIn0f426nMWGvJXalTqrPU0oy19p+EIRr7USerf9Qj85wMkP1IklQO+1H5
7EfF2I+aEPtRJ7Mf7TL7kSSpHPaj8nV0PyL87dR0F4LqvQhKubdA+w98SMd+
1Pm4C3cayVffl5F8NgbIfiRJKof9qHz2o1pj+/Yf+JCO/ajz2Y92gf1IklQO
+1H5hkA/MkMxndyPatz1Wmpc9epK14/9SJLUOvaj8tmPTEtiP9KwZj+SJJXD
flS+Ge/468i4o/aO2I9M01L9K8D7RDZN6YpwvbWtH916Q6Taj6qPpnllPT2V
9PYaM6D0bd8W4Vqa9/HTInPOODWSX13lXOeSpOHNflQ++5FpSexHZljHfiRJ
Kof9qBz9fTsifD3/3/4xMuagp0UmnjAqwsi2y5jB5fhDIxOO3T/SdcKoSM/q
lZHHL77y5rPlXYw5fmMOeXpk/b2/jJSzDxreeh/bEOHfBJZefF6E5fYjSVKz
2I/KYT8yLYz9SCOG/UiS1Gr2o3Lk9/LtnjU9MvGlR0bGHLR7ZNwRe1Uy6pnG
DCzpyhl7+J4RrqXlV347stNV19ar/eHPfDwy9tBnRBacdWZkyde/WMl5KV83
pm7O+0MWfenTEWZsTnn9SyM969ZGqv8C4H0/JElNYj8qh/3ItCT2IzO8Yz+S
JJXOflSq7Cf41ofnRRad+5nIrPe+tZJ3n1zJe/425WRj6iZdJ+9+c2Tev5we
WffLeyLVKy2/n3bb9KdUrLr5usjM95wcmfbGl1fy5ldU8qYTjambV1TyxhMj
09/2msiSb5wT6V2/LvL4hWYzkiQ1k/2oVPYj07TYj8xIiP1IklQ2+1Eb+NNc
rePVpZHDq12S1AL2ozbwZ7pax6tLI4dXuySpBexHbZNmQFXvSZv/frExAwz3
Q+jU+xtXZtlV941Zf+0+XWaopvg9U5KkFrAftY39yDQp9iMzImI/kiSVwn4k
SZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIkSRLsR5IkSZIE
+5EkSZIkwX4kSZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIk
SRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4k
SZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIkSRLsR5IkSZIE
+5EkSZIkwX4kSZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIk
SRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4k
SZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIkwX4kSZIkSbAfSZIkSRKa1Y/WJfYj
SZIkSUNX4/2IBmQ/kiRJkjRc2Y8kSZIkCfYjSZIkSYL9SJIkSZJgP5IkSZIk
2I8kSZIkCfYjSZIkSYL9SJIkSZJgP5IkSZIk2I8kSZIkCfYjSZIkSYL9SJLK
15+0ey+GM84wP6favS/19GXavS+NGirnVpIGx34kSeWzH7XaUBnD248kqdPY
jyR1PsZjjCH7M8U1a402i8vzJfnWikvyfci/Lj6ruUc9OH0F7d6jRu16Z8y3
sCK5PWFJ/aui1vveCvme8HNzUlJ8NL/yy9zDovx1H0nuTIr7nK/f3uuw/vcK
SarFfiSp89mPGmc/4mv7UXPZjySNHPYjSWqu4piwN8mXrEny5bXGk7VGyAMd
cxY7Zr63xSW19qHWmsV1+Lp4jAM9h/X3rXiMfM3Pmu8l+XMH+uq1zkCt421k
b/MlP0vGJo3vZ61XLDaCWntb/7iK5zP/emHy/WSg57bWNht5x+u/I/XPeePX
niTZjySpuYojNPtR8bmNn8NGRr/5fvK1/ai4pNb6xeMqns/8a/uRpOHNfiSp
M+Xjmc3JxGRcsijJ19yW3JfcnbCE8TlLpiSMncYndyTrE7bG9ucl+f6w/oZk
WZLPiXowqTUGuy1ZlUxNvpuwb806Y90JM8puTvJRd/keytRfc20yIam1TiPj
23wd3qObEpbk9xPoSX6a3JIw2s/f09bJR++/SLjqWJJfFXMSjoJ3dklS3OY9
SX6M9c/YQB/Nl/Dp47zlR1TsUFcn7Nv25P86N/+3xpsO3zf4XAz0uZJGMvuR
pM5kPxoo+5H9yH6Usx9JGhz7kaTOxEiGMRXjKzrODxMax9yE9RkPP5DwKDOX
fpn8JLkuoaHQaHiUURzbuT65Mcn3h20yfmZc/bWEsf2VCWuOTvJewNbmJ99K
GBUvTxgbM55k+2yBMScz8WhnNAjW/G2SjzkZOV+a0Pi+mSxO+C7N8W5M6I98
32YcznbYB16RJYyHf5XQ8ti3GUlXwiiU7dMuOQOc8/sT2iXbzDsC63Pm2c60
5DcJe86akxNaMPufXy31+1H+ivz84txekXB0vPqshGuJ9Tlq3inOFe8m7wI/
1zjGvL/wftFS8+bSeD+iv/864Wq5KOH95Urm/ZqdcG1wnjkbLOEdzLfD9h9O
WM6a+c9olvBTvn4/4ujydb6azEw4V7yPvGK+na0Jn2WuxvxfJzjbvOO8Lyxf
nfAZ593h1VmHf0u5Ibksyc+JLUlSffYjSZ3JfmQ/sh/Zj+xHkspnP5LUafLR
C98x7koYKzKm5XsOY8visxhN8SjzpniUES/fqViT0de1CeswNvtBkm+TsShz
nGhqjPx5FRoNI+SbMrQw7oTMlukv7MlVyTUJ42q2842E0TXPpTtcnvC6PItR
PXtII7gwYfusz4iUBsfWOF7ODPuTvzqvRWdk/M/4ljl7lyTcPfszCWeG/eH8
MFbn2Fmfdnlrwlllhht7zvbZNzrX+QnvOM9lbiRjXbZMR+gvyM9GrX6Uf832
F2doTLTanydcD8yKZE/OS2ju5yZ8zXvK+PzLCevnx5t3pfr9iG3+T8I67BWd
9EsJjSDfW/o7d+GmI9A+8neQI6Vtcd2ynxw7M9O4NhrpR8X5dez5fye8v3TP
byesz2uxn19JuN7YK9rZfyX5co6Fa5vj5esFyecSzg/vPu/aY4n9SFIj7EeS
Oo39yH5kP+Jr+5H9SFL57EeSOk0+emEuECNnRsuMgvL5Qvlz+Q7DuIsljFf5
mlEW852YncV4m7ET6zCWY0Sab5nROON2xn5jEsbA9As6BXPeGGHSNWgNKxO2
zOwgRt2PJuwDo2XuSp3PDOS5vCJ9hPEt54Q9ZJzJmJZRKONkGiXjT8bAzEpi
ffaBc8JYmr2lYzLO53XZN0bX9Mr8r68yEs7PGD8RmKeXn43iO857yrvM0fFc
mgKtijbHmo1cOY30I9ZnnM/55JzT9Thq9p9ZnbxTvHf5sdM3+Zrn5u8m7xFn
gHUa70e8U1zPvCO0DPYqb8f0X34W04N4Z+mqbJ+tcZVyXeVbwI8Tznn+7w/5
PtfqR8V3gXPFPE9abX5XcK5zelA+o5VzyzWQvwr7z5rsIcs5Uh7la5ZzdMzJ
LO6nJNViP5LUaexH9iP7EV/bj+xHkspnP5LUmRhl8X2GHvSjhJEqYyTGwKzP
SOxfEx5lphZjPMbJjCF5Fn2B0T6/4U4DYjzGb5fz/Sof7zGjjPsG0DtOT9hP
lvPqdA3G2OwzI3+2zwiT8SG/Xc7cNvoaY0jaDa2BOUWM99gmdzBgy+wb8+h4
XfaZcSndjVlGNERGpPzuPOfn4oQROKN9RtTMo2MuGa/O/D3mdDHTjzEn55a5
aoxI6RqcE845x8Xr5qNWxvAcC8uZwchPFloVTY32x3wwnpV35MHNr+P9ovHx
vvAqvCP8Xj/b4VF6Je8dbYX16TV0GbbGO8V9PPJ7DuQNqH4/4pov3vmc+ZPM
O+WomXvGo3SEcxJ+RnO18w7SZNkf3nf2gauCTwGfo/zndf1+lD/KvzzwXvNO
fSehm/OJ4/3lU0b351rNr0aWX5BwLbGc65lPCi2Pa5tzznXI+8tZ4llcS86v
k9QI+5GkzmQ/sh/Zj+xH9iNJ5bMfSep8jHYY0TEq5q7a+TqM6xhFM55kTR7l
XtPMoWL8OTHDyI05UfxmN/OX8jshg7HZpoTvgcz4ykdcvDrbYQktg3E1bYh7
GrOcrzlGnsX+MDJnfb7TctQsZ74WY0hehe3wKizha+7mzbMYITO+5dXpF3zN
s2he+Wwuvm8z2uccsjzvp+whPwWYo8g7wk8H9o1jYR4UI1uey/nkUfaW7sk7
lR8RHZM94Wzk93wu9qN8NletOWAcO6/LEq40mh1Hkb8LjP+5Ntgme8g2eV3O
NuPz/Dos7gkj//xu6nnXoPVzDvM5gewVZ4k1eV/4mlfP/4YyX3Pe6EH5s/Ij
5YriLvTsSbFTsLV8hlvx/gycE44uvw8/nxe6J58mjo7WxhljHzjP9CN6Vj5+
YK4jVy9fsw/5/dW5fnit/FzZjyTVZz+S1PnsR/Yj1rQf2Y/Yjv1IUuvYjyQN
XY5zmquc88kIOf/rro1oZN/ydfhZk98RopHfzS/nDOR7wizK/K8Jl3MPgeKR
8jOd+0vkna7Yj5jJmd9RYVfOLU2fe540stxPvaRWsx9JGrocKTWX/ch+ZD+S
JPuRpKGiL1McI7Gk1jq1lhTXb+RVituptZ/FZ+XPLW6/+OrF9WttrbjN4prF
Ldc/M8VzW/9YGlmn1vvbyLPqn58c/Suff1hrzcaPpf55Lm6teCaL6zNLML/D
fK2tNbLPjR9RcXlxP2thtmT9c9vIKxaf1fjy+ttvZJuSVIv9SNJQ0UhzqbVO
/RaQP9rIqxS3U2s/i89qZCxXa2Re3E6tPay1fnHL9c9M8dzWP5ZG1qn1/jby
rPrnJ2c/qn9ExeXF/azFfiRpeLMfSZLK5Ei18/keSRrJ7EeSpDI59u58vkeS
RjL7kSRpuOr8cX6tGXSdbyjusyQ1wn4kSRquOn8Mbz+SpE5jP5IkSZIk2I8k
SZIkCbvej7jPp/1IkiRJ0lDXeD9an9CG7EeSJEmShh/7kSRJkiTBfiRJkiRJ
sB9JkiRJEuxHkiRJkgT7kSRJkiTBfiRJkiRJsB9JkiRJEuxHkiRJkgT7kSRJ
kiTBfiRJkiRJsB9JkiRJEuxHkiRJkgT7kSRJkiTBfiRJkiRJsB9JkiRJEuxH
kiRJkgT7kSRJkiTBfiRJkiRJsB9JkiRJEuxHkiRJkgT7kSRJkiTBfiRJkiRJ
sB9JkiRJEuxHkiRJkgT7kSRJkiTBfiRJkiRJsB9JkiRJEuxHkiRJkgT7kSRJ
kiTBfiRJkiRJaFc/kiRJkqShyH4kSZIkSbAfSZIkSRLsR5IkSZIE+5EkSZIk
wX4kSZIkSbAfSZIkSRLsR5IkSZKEWv2oL9mWbEgeTBYn7d5rSZIkSWommg6t
hwZEG+rL2I8kSZIkjQSN9KPtyaZkRjI+sSVJkiRJGh4WJTSdmQkNiDZkP5Ik
SZI0cjTSj/qT3mRLwu8oTU/uT+6VJEmSpCHugYT/D6L10IBoQ/0Z+5EkSZKk
4a3xfsS97Ph/pe6E9VcnyzUcPaJhZ4mGo8Uadtp9Takl2v0TQM3X7pGaWoJ2
Q9Oh9dCAaEP2oxGu3d911HztHh2oJdo9llfztfuaUku0+yeAmq/dIzW1RCP9
6HdJsSXxP038vtIGDUfrJA0FazXstPuaUkus17DT7pGaWoJ2Q9Op9T9H9qMR
q90/SSQ1pN1jeTVfu68ptUS7x/JqvnaP1NQSA+1HeUvid5R41jYNR1s17GyR
JLVJu38CqPnaPVJTS9BuaDq1mpH9aMRq93cdNV+7RweSNHK1+yeAmq/dIzW1
ROP9SJIkSZIkSZIkScL/B0gdhSo=
     "], {{0, 456.}, {560., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{144, 144}],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
     MetaInformation -> <|
      "Exif" -> <|
        "ImageWidth" -> 1120, "ImageLength" -> 912, "XResolution" -> 144, 
         "YResolution" -> 144, "ResolutionUnit" -> "Inch", "Software" -> 
         "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
         DateObject[{2021, 8, 2, 13, 55, 27.}, "Instant", "Gregorian", -4.], 
         "TimeZoneOffset" -> -4|>, 
       "Comments" -> <|
        "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
         "Creation Time" -> 
         DateObject[{2021, 8, 2, 13, 55, 27.}, "Instant", "Gregorian", 
           None]|>|>],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{560., 456.},
   PlotRange->{{0, 560.}, {0, 456.}}],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "ExampleImage",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->244557913,ExpressionUUID->"b27b7e69-709c-44c0-8b61-259211bfe55d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source & Additional Information", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source & Additional Information"},
 CellTags->{"Source & Additional Information", "TemplateSection"},
 CellID->871630328,ExpressionUUID->"11667467-dd93-4288-bd19-379119b78701"],

Cell[CellGroupData[{

Cell[TextData[{
 "Creator",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Contributed By", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter the name of the person, people or organization that should be \
publicly credited with contributing this paclet.", "MoreInfoText"], 
        Background -> GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
        GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoContributedBy"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "3c9f1fc8-4bcf-49f7-abbe-11fd3d2cb43a"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Contributed By"},
 DefaultNewCellStyle->"Text",
 CellTags->{
  "Contributed By", "ContributorInformation", "Creator", "TemplateCellGroup"},
 
 CellID->57534933,ExpressionUUID->"0d88e023-50a8-4aeb-85b9-7119af29b15a"],

Cell["Christopher Wolfram", "Text",
 TaggingRules->{},
 CellID->93340411,ExpressionUUID->"2b9f4563-6c54-4f1e-96c5-ac1a2523df91"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Source Control Repository",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"SourceControlURL", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "If this paclet has a corresponding source control repository (e.g. \
GitHub), you can provide the URL here.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSourceControlURL"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "2901efa9-b48b-42f4-9a7b-10fcfcb08625"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "SourceControlURL"},
 DefaultNewCellStyle->"Text",
 CellTags->{
  "Source Control Repository", "SourceControlURL", "TemplateCellGroup"},
 CellID->221376991,ExpressionUUID->"e04edbc4-a428-4409-8a0f-f424af809185"],

Cell["https://github.com/UserName/MyPaclet", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->75689085,ExpressionUUID->"2290eed4-3587-40d4-97a4-43a8bf124064"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "License",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"LicensingInformation", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Choose a license to specify the terms and conditions regarding how \
your paclet can be used, modified, and distributed. If submitting to the \
Wolfram Resource System, this also includes the terms outlined by the ", 
           Cell[
            BoxData[
             TagBox[
              ButtonBox[
               StyleBox[
               "\"publisher agreement\"", "Text", ShowStringCharacters -> 
                False], BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://resources.wolframcloud.com/publisher/publisher-\
agreement"], None}, ButtonNote -> 
               "https://resources.wolframcloud.com/publisher/publisher-\
agreement"], 
              MouseAppearanceTag["LinkHand"]]]], ".\n\nSee the ", 
           Cell[
            BoxData[
             TagBox[
              ButtonBox[
               StyleBox[
               "\"style guidelines\"", "Text", ShowStringCharacters -> False],
                BaseStyle -> "Hyperlink", ButtonFunction :> 
               Symbol["DefinitionNotebookClient`ViewStyleGuidelines"][
                "Tag" -> "ChoosingALicense"], Evaluator -> Automatic, Method -> 
               "Queued"], 
              MouseAppearanceTag["LinkHand"]]]], 
           " for additional information about choosing licenses."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoLicensingInformation"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "339ac491-5ea2-4b4e-9293-a29abbef7252"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "LicensingInformation"},
 DefaultNewCellStyle->"Text",
 CellTags->{"License", "LicensingInformation", "TemplateCellGroup"},
 CellID->279656547,ExpressionUUID->"370a2df9-43fb-4648-8637-47a2ab111a48"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            RadioButtonBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "RadioButtonValue"}]], {
             "MIT"}], "\" \"", 
            TemplateBox[{"\"MIT License\"", "\"\[ThinSpace]\"", 
              
              TemplateBox[{
               "\"\[RightGuillemet]\"", 
                "https://resources.wolframcloud.com/PacletRepository/licenses/\
MIT"}, "HyperlinkURL"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            RadioButtonBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "RadioButtonValue"}]], {
             "Apache-2.0"}], "\" \"", 
            TemplateBox[{"\"Apache License 2.0\"", "\"\[ThinSpace]\"", 
              
              TemplateBox[{
               "\"\[RightGuillemet]\"", 
                "https://resources.wolframcloud.com/PacletRepository/licenses/\
Apache-2.0"}, "HyperlinkURL"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            RadioButtonBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "RadioButtonValue"}]], {
             "CC0-1.0"}], "\" \"", 
            
            TemplateBox[{
             "\"Creative Commons Zero v1.0 Universal\"", "\"\[ThinSpace]\"", 
              
              TemplateBox[{
               "\"\[RightGuillemet]\"", 
                "https://resources.wolframcloud.com/PacletRepository/licenses/\
CC0-1.0"}, "HyperlinkURL"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            RadioButtonBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "RadioButtonValue"}]], {
             "None"}], "\" \"", 
            
            TemplateBox[{
             "\"None\"", 
              "\"A license is not required for personal deployments\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            RadioButtonBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "RadioButtonValue"}]], {
             "Other"}], "\" \"", 
            InputFieldBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "SpecifiedLicenseID"}, ""], (
              CurrentValue[
                 EvaluationCell[], {TaggingRules, "RadioButtonValue"}] = 
               "Other"; CurrentValue[
                 EvaluationCell[], {TaggingRules, "SpecifiedLicenseID"}] = 
               Replace[#, "" -> Null]; Null)& ], String, FieldHint -> 
             "Other License Name or ID", FieldHintStyle -> {FontSize -> 12}, 
             ContinuousAction -> True]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJylVE1PGzEQBfLBV4QAtVKPq6jXJLTqqSfCBkokCihOe+jN7M4SC6+99djA9tRrf1Nv/\
Sn9JR3vJpvQElUtl5V3bL958+Z5+lsd1mA2l8CaF85mznbYejiB6AbiZAXrZwIp0hhaSDFplP/\
JGtZHTkKyirWRvktqZZhtvx+\
OgzMRgUJgtZ9fv9HBzdM8AyOFumFrP76zw4m1Gb7t9QygdiYC7N5pmRieRlK7uBvptHfJIwl2BJlGY\
bXJe7KExB7hsxp9lhHY72c8msCMQ/\
C6e7CEx7sn8SjTdDz81ny9jNXL0AC34haCUKepVhh8AqOD21fdg+\
CDorhBLpfwHDyJZxgedCgLNbRcLDDcGPG7I30PSLHtMaSZ5BYo4I8UrJvtc62gzd60+\
8EUMBAYKG0DA5+dMBAHiTYBsUWtuAxiyKTOU1AW2+z5pQFr87HW0opshs/\
qHrNi0cCtoSLHnQiQMUXXB7niqYhIuVbojCGoj1w6IB/uHN/SilTUKgQpZyyxNebX10Jdezxk+\
yyDSCQC4qkDhgO24os9cSrydwl5n5qQaafi4/uMREUfXcMaA2/r/0u7O+\
Kx0EfOWq2Km6xxYSdgnor7SDleJeq05JFvYp1JbcPVmaCM3uu5k3L6bTJrCGu2i5uFzqdCWfai4Fe9\
k3OeQkC9LPDLwzvzw344+\
GSLT58k1bQlvkDYqmK7IcWEctphv5Ab62NTqdFhG5dGk11szp6VmYndUJGJ0kIJGjwXWXFt9nTm2Y5\
jYfkVrRonXCLMaxoAef+xnQdS/k7/UWnJdZVRSdcl8k/\
RB5BwJ8uGlnpXe3tDOmt8IZXtFi1Ytc0PWi1dqtCvd4bKgiFL2kIMttlXOXNXCH4gT7P9QXGPUfmR/\
SvDB1PzHwi2RtOxM6apxJrlpOmwevHbWrA9/gKDZjDH", "RadioButtonValue" -> "MIT", 
   "SpecifiedLicenseID" -> Null},
 CellTags->{
  "LicensingInformation", "LicensingInformation-RadioButtons", 
   "RadioButtonsCell"},
 CellID->42282576,ExpressionUUID->"df49cbad-a30c-4b94-a521-18ce32a05098"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Keywords",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Keywords", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List relevant terms (e.g. functional areas, algorithm names, related \
concepts) that should be used to include the paclet in search results.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoKeywords"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "d08649b5-2b83-4f38-a9e6-8599a12019cd"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Keywords"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Keywords", "TemplateCellGroup"},
 CellID->913860664,ExpressionUUID->"d34d838c-bea2-4ef8-ba78-cbec682d078e"],

Cell["keyword 1", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->560424104,ExpressionUUID->"6d06165a-7458-488e-98b5-d84bcbe61219"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Categories",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Categories", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Choose categories that best represent your paclet. These choices \
determine which pages your paclet will appear on when published to the \
repository.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCategories"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "42cfe60c-7343-40df-b833-ceb0587a965e"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Categories"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Categories", "TemplateCellGroup"},
 CellID->651640710,ExpressionUUID->"52d1bc55-94bd-4cd6-94b8-77c37fce1a26"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Cloud & Deployment"}], "\" \"", 
            "\"Cloud & Deployment\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Data Manipulation & Analysis"}], 
            "\" \"", "\"Data Manipulation & Analysis\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "External Interfaces & Connections"}], 
            "\" \"", "\"External Interfaces & Connections\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Geographic Data & Computation"}], 
            "\" \"", "\"Geographic Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Graphs & Networks"}], "\" \"", 
            "\"Graphs & Networks\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Images"}], "\" \"", "\"Images\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Machine Learning"}], "\" \"", 
            "\"Machine Learning\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            False, {False, "Scientific and Medical Data & Computation"}], 
            "\" \"", "\"Scientific and Medical Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Sound & Video"}], "\" \"", 
            "\"Sound & Video\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Symbolic & Numeric Computation"}], 
            "\" \"", "\"Symbolic & Numeric Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Time-Related Computation"}], "\" \"", 
            "\"Time-Related Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Visualization & Graphics"}], "\" \"", 
            "\"Visualization & Graphics\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Core Language & Structure"}], "\" \"",
             "\"Core Language & Structure\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Engineering Data & Computation"}], 
            "\" \"", "\"Engineering Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Financial Data & Computation"}], 
            "\" \"", "\"Financial Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Geometry"}], "\" \"", "\"Geometry\""},
           
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Higher Mathematical Computation"}], 
            "\" \"", "\"Higher Mathematical Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            False, {False, "Knowledge Representation & Natural Language"}], 
            "\" \"", "\"Knowledge Representation & Natural Language\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Notebook Documents & Presentation"}], 
            "\" \"", "\"Notebook Documents & Presentation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Social, Cultural & Linguistic Data"}],
             "\" \"", "\"Social, Cultural & Linguistic Data\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Strings & Text"}], "\" \"", 
            "\"Strings & Text\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "System Operation & Setup"}], "\" \"", 
            "\"System Operation & Setup\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "User Interface Construction"}], 
            "\" \"", "\"User Interface Construction\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxVT9EKwjAMFHG6ifgn+4gxFQbCxuIPdF3mil1bmvShf2+\
HIPqUI3eXu1R5CRlw1Aj7NrALXMKhnlG+\
cJw2tLsrSpusYVyIiiqwXQQrWULeeevQc4RjLRif1iuk5G0dK2to2n686+\
yDRsqvo2IxJJTdhCb8EsUFNf4yawGrw2L+A8+NYfTOJ+\
2aAEVlIoSBMPU79Ug2eImP6NIjnZDp5Bu0Gkuz"},
 CellTags->{"Categories", "Categories-Checkboxes", "CheckboxCell"},
 CellID->969880382,ExpressionUUID->"72b2cc7a-daec-4c24-b7a8-cd3fe2d42451"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Resource Objects",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Related Resource Objects", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List the names of published resource objects from any Wolfram \
repository that are related to this paclet.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoRelatedResourceObjects"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "3fcf4b5c-078a-42d3-b132-aff2314ad92e"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Related Resource Objects"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Related Resource Objects", "TemplateCellGroup"},
 CellID->280622473,ExpressionUUID->"4d5914f0-dfce-497d-a0f7-9a65816bbc0d"],

Cell["Resource Name (resources from any Wolfram repository)", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->694609509,ExpressionUUID->"7ac254ed-72c0-4431-a6ad-d6a32c6eccea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Original Source References and Attributions",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Source/Reference Citation", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a bibliographic-style citation for the original source of the \
paclet and/or its components (e.g. a published paper, algorithm, or code \
repository).", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSourceReferenceCitation"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "68bea295-bbef-42c7-8c17-47262ae409ce"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source/Reference Citation"},
 DefaultNewCellStyle->"Text",
 CellTags->{
  "Original Source References and Attributions", "Source/Reference Citation", 
   "TemplateCellGroup"},
 CellID->687116677,ExpressionUUID->"f0d428b5-fe71-4505-8fb0-65d9c8f5ed03"],

Cell["Source, reference or citation", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->702019342,ExpressionUUID->"8ba0ab57-70fc-4daa-ba7c-1bb2a4116dfb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Links",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Links", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List additional URLs or hyperlinks for external information related \
to the paclet.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoLinks"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "fef49c34-85ec-4038-a5ec-ceed050322a1"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Links"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Links", "TemplateCellGroup"},
 CellID->179193585,ExpressionUUID->"225f7168-d088-4e1c-b9e7-14240209d57e"],

Cell["Link to other related material", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->938599834,ExpressionUUID->"06086788-1250-44ea-8e59-7ac354f098b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Compatibility",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Compatibility", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify any known compatibilities for your paclet to ensure it is \
discoverable on the correct platforms.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibility"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "1690f7b8-7e61-41e7-8e4a-013419e6ccfa"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Compatibility"},
 CellTags->{"Compatibility", "TemplateCellGroup"},
 CellID->31633819,ExpressionUUID->"9dff4017-0d0d-4169-be43-3daf3a7ead74"],

Cell[CellGroupData[{

Cell[TextData[{
 "Wolfram Language Version",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityWolframLanguageVersionRequired", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter required Wolfram Language Version (e.g. 12.1+).", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {
       "SectionMoreInfoCompatibilityWolframLanguageVersionRequired"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "fef432ce-a9fe-4071-8ff4-28c5e3f191a8"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{
  "TemplateGroupName" -> "CompatibilityWolframLanguageVersionRequired"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{
  "CompatibilityWolframLanguageVersionRequired", "TemplateCellGroup", 
   "Wolfram Language Version"},
 CellID->267876551,ExpressionUUID->"5a03231a-13e7-4afc-b4a4-25814caf18fa"],

Cell["12.1+", "Text",
 TaggingRules->{},
 CellID->1946756107,ExpressionUUID->"9e34c558-5110-491a-8d33-6e074cba9257"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Operating System",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityOperatingSystem", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Select all operating systems where your paclet is expected to \
function properly.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityOperatingSystem"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "46e61772-4754-4b1f-b99e-a0f00483c6e2"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityOperatingSystem"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityOperatingSystem", "Operating System", "TemplateCellGroup"},
 CellID->54346056,ExpressionUUID->"34823b9a-3989-4c15-8908-775dc522f28d"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Windows", {False, "Windows"}], "\" \"", 
            "\"Windows\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["MacOSX", {False, "MacOSX"}], "\" \"", "\"Mac\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Unix", {False, "Unix"}], "\" \"", "\"Linux\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxNkN1qwzAMhWFJ2hTKnmCvkIco2QaFjpRqY7t1EnUTdWxjyax++\
6mDhN5JOkeffnZ1AxVItgirLklI0sC6/cHhguO54PJALLD+JDf6X4bVmxk6+ILyw9FVG/eCE8+\
28wOXp6SgxT4Hi1Jo/wxZitWBXLrOzPoYfcAoGZ5aPwUj1JMlyZ0WNXHfkFmn6pZdEPLuH34/\
nuuXkcT0GlWvxjIuwuYZLd4rt1O9TZPjtmjgce8EY4hquYFhs3MZUs+\
oL9mekH2KA77noJ86mkFJfw1ma4c="},
 CellTags->{
  "CheckboxCell", "CompatibilityOperatingSystem", 
   "CompatibilityOperatingSystem-Checkboxes"},
 CellID->82653162,ExpressionUUID->"5c8ae2ae-efbe-4337-8e53-57fa4b6a13bf"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Environments",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityEvaluationEnvironment", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Select all evaluation environments where your paclet is expected \
to be compatible. See ", 
           Cell[
            BoxData[
             StyleBox[
              TagBox[
               ButtonBox[
                StyleBox[
                "$EvaluationEnvironment", "SymbolsRefLink", 
                 ShowStringCharacters -> True, FontFamily -> 
                 "Source Sans Pro"], BaseStyle -> Dynamic[
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                   "Link"}]], ButtonData -> 
                "paclet:ref/$EvaluationEnvironment", ContentPadding -> False], 
               MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], " for more details."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityEvaluationEnvironment"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "e7427d99-110d-4e50-9bf7-90f392865f6e"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityEvaluationEnvironment"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityEvaluationEnvironment", "Environments", "TemplateCellGroup"},
 CellID->701114648,ExpressionUUID->"89a6862a-2e65-4c33-ac25-60ea374c1ae4"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Session", {False, "Session"}], "\" \"", 
            
            TemplateBox[{
             "\"Session\"", "\"Local or cloud interactive session\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["WebEvaluation", {False, "WebEvaluation"}], "\" \"", 
            
            TemplateBox[{
             "\"WebEvaluation\"", 
              "\"Cloud evaluation initiated by an HTTP request\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["BatchJob", {False, "BatchJob"}], "\" \"", 
            
            TemplateBox[{"\"BatchJob\"", "\"Remote batch job\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Script", {False, "Script"}], "\" \"", 
            
            TemplateBox[{"\"Script\"", "\"Script run in batch mode\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["WebAPI", {False, "WebAPI"}], "\" \"", 
            
            TemplateBox[{
             "\"WebAPI\"", "\"API called through an HTTP request\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Subkernel", {False, "Subkernel"}], "\" \"", 
            
            TemplateBox[{"\"Subkernel\"", "\"Parallel or grid subkernel\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Scheduled", {False, "Scheduled"}], "\" \"", 
            
            TemplateBox[{"\"Scheduled\"", "\"Scheduled task\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxdUdFqwzAMhK1tEtj2EXvPR3RZBhmDhmqwZydRialjG0su5O/\
nlMTJ9uSTTtzp5GOawx54VAiHk2frOYek6LG9YndJaPcliSEBJJJGwwFaJy1DBr65otOo4PkHm/\
ImlBd8nwjlsa7CRNtj5xV2kL4JbvtP0wSninGgRffyQLtzGFn1FxCZxXB+Y3+zwAoj+2+nv+\
WqPa86vxvtuPoKIxvTbHOltTMWHY/wWpjBBp9GKsnj6lrqm3RGD6inA5/\
s1KNJdHsISstOsmgC2n8IRRiJ7B0Vbpnpl4zyg6biMYeXSjM668LIPXF21GM4C2EwezojGe9a/\
B5tCF2LNij9AojVrVE="},
 CellTags->{
  "CheckboxCell", "CompatibilityEvaluationEnvironment", 
   "CompatibilityEvaluationEnvironment-Checkboxes"},
 CellID->991332972,ExpressionUUID->"232d4257-2235-4c90-bd5b-3c3ee24a7751"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Cloud Support",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityCloudSupport", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify whether your paclet is expected to work in the public \
cloud.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityCloudSupport"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "33a535ee-6574-4b51-894d-00fa567fb60c"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityCloudSupport"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{"Cloud Support", "CompatibilityCloudSupport", "TemplateCellGroup"},
 CellID->677592290,ExpressionUUID->"312d3c0d-9653-4855-a234-0b0c1bd55d72"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[True, {False, True}], "\" \"", 
            "\"Supported in cloud\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxNj0EKwkAMRVFarSAu3LnzAj2EVoWC0NJ4gbFNcXA6GSaZRW/vFKy4C/n/v/\
ycshxSkNEgrKogLkgO6+\
KF7Ru7fsHJXbNw8vABo68UHHje9ktOmhBzewjOkRfsjtoeW0OhmxNZ7cmhlxEOBQ1OiX5qo2UsJtM3\
Fu9VTjRZnoj/\
ZM6unRb1jFN6U4bxJ2wuaPBfmUqTCYPlYpHDrrSC3vlomcCwPhMZVDaHbYNMwbf4GF38uFZt5HwA7D\
xZoQ=="},
 CellTags->{
  "CheckboxCell", "CompatibilityCloudSupport", 
   "CompatibilityCloudSupport-Checkboxes"},
 CellID->92922911,ExpressionUUID->"d2a945c2-b542-4577-ab03-c7345fec289c"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Required Features",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityFeatures", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{"Choose any other features that are ", 
           Cell[
            BoxData[
             StyleBox[
              StyleBox["required", "TI"], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], 
           " in order to use your paclet."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityFeatures"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "f545bb7b-93b0-447e-9f84-9d66c0127127"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityFeatures"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{"CompatibilityFeatures", "Required Features", "TemplateCellGroup"},
 CellID->666988317,ExpressionUUID->"8c982e0a-8f16-4664-bd1c-37a5a77dd08f"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Notebooks"}], "\" \"", 
            "\"Notebooks\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Parallel Kernels"}], "\" \"", 
            "\"Parallel Kernels\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Cloud Access"}], "\" \"", 
            "\"Cloud Access\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxlUMtqwzAQLE3c2BBKL73nB/wRxm0gtDQm6g/\
I8piKrCWhXR3891VaMC697Tx22J2mrFWhZCaoh3OSkKRWu/YL5ophvOPtu+XMFCfBxOPmF4/\
3vL2kvFF9eEHv/ZVX46I+dTpqItDhDdGB+D+zePct+TQcGmPA/BfVquyiD4gyq+fWT0GL7S1ZmY/\
QkiKyY3cOYr37yVtfyOXrYEX3eSqOmhiLUL2AsFZub3tKk+\
N2U6vHkxPEELPlFqyqxs0q9Yxcxv4C9ikafM4ht9Zpk5O+AVJDcOo="},
 CellTags->{
  "CheckboxCell", "CompatibilityFeatures", "CompatibilityFeatures-Checkboxes"},
 CellID->716444359,ExpressionUUID->"530867e7-758e-4087-9386-2b1ed29153e4"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Disclosures",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Disclosures", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Contributors to the Wolfram Language Paclet Repository can include \
a list of disclosures with their paclet. These disclosures tell users how to \
expect the paclet to interact with their environment.\n\nDisclosures should \
be selected if your paclet interacts with the environment in ways that are \
not otherwise obvious to the end user. For example, if your paclet needs to \
write information to local files somewhere to store persistent settings, you \
should choose the \"Local files\" disclosure so that users are not surprised \
to find files that they didn't expect.\n\nFor cases where the interaction is \
inherently part of the paclet behavior (and clearly documented as such), the \
disclosure is unnecessary. For example, an exporter function that's clearly \
meant to write files in a place specified by the user would not be necessary \
to disclose.\n\nFor each disclosure item, additional details can be added by \
starting a new cell under the cell containing the checkbox. Use this space to \
clarify how your paclet interacts with the environment for the corresponding \
item. For example:\n\n", 
           Cell[
            BoxData[
             FrameBox[
              StyleBox[
              "\"MyPublisherID/MyPaclet utilizes the local file system to \
cache data by writing files in the directory \
$UserBaseDirectory/ApplicationData/MyPublisherID/MyPaclet/Cache\"", "Text", 
               "DisclosureDetails", StripOnInput -> False, LineIndent -> 0], 
              Background -> GrayLevel[0.9], FrameStyle -> GrayLevel[0.8], 
              ImageSize -> {Full, Automatic}, StripOnInput -> False]]]}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoDisclosures"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "26818b02-91cb-4f4f-a50c-c028b60d361c"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Disclosures"},
 DefaultNewCellStyle->{"Text", "DisclosureDetails"},
 CellTags->{"Disclosures", "TemplateCellGroup"},
 CellID->376414000,ExpressionUUID->"80877d87-852b-498f-9758-1d9d8d968ee5"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "LocalFiles"}], "\" \"", 
            TemplateBox[{"\"Local files\"", 
              TemplateBox[{"DisclosuresLocalFiles", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                   "Choose this option if your paclet directly does any of \
the following during loading or normal usage:\n\[FilledSmallSquare] Creates, \
deletes or modifies local files\n\[FilledSmallSquare] Imports data from local \
files\nFile operations related to normal paclet installation and loading are \
excepted.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
                   20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, 
                   ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {"SectionMoreInfoDisclosuresLocalFiles"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJyNVM1uEzEQhpC0SRu1F+DAyUIcCQ/\
ApWq2LURq1SrOC7jr2cSq17PyT5vtlYfgZXgEeAnEEfEMjJ3spqmKxF5sj2fG33zzzR73R7zHfa2B7\
1wGXwU/4rvZAvIbkMUz1z1Xjiy9iYfSFc9X56LjutOggc4vpngXj9HM988xF5oVSkP07U/F3RiXtO+\
4/RmUlRYeyFB01/6vTpTLNbpgwaXQsxTZc90MtKYMu+R9Irwodlz/zIoyRXdW1/xLJ1sgOmB+\
oRzDyis0TBWsxmBZJXINnkllIfe6ZhLBMWFqhgX5AytQa7xTZs5ksHHRKGRc0TKDtqQyghNz+Lj38+\
s3llkg6O49k0BZKRN5lShVoWivN0Un50lZofWOSQLOCovllkcskcCCFRGvYxYiK5J5bN5dQ1fGeaF1\
ciPkskUoLDBY5lBR2Ac+vEALE1PgDJZtY9zeWOQ3c4vBSKJx8MmK+hxuQdsifX+\
OWs9h4vVC2Dk9mL3cZEj2JIztDD++x+/\
3JsPBND5DyKaEL7is194MJiVRyNU9NBKhVDucyAC5zvPryA2Og8eS6sz/UczgJLIurmnbndkA7UU/\
6mAm5q0w+TtO7SbCmjxPC6yJ34/x69JbhOs1G2fjdn+YHdITw8+\
oZYakY9IAzcbB6a3QITUoCfJNplV+\
Q9KK4qAmKQJgy3TP306MVgYaXJcVGLDj4D2aZjL43gbiiPevbFSJr7fNu5dJ566Zof+\
qhRphFmAVCebBtq2u98i44vZUqhXnvTOhHTzVjUc3bTv46we8j7bgZ6hDadyDpo/\
4wcR4sJWlrImrwbGpebh2QD+e4RQczXMOs7qiP9RVmo2/3+2uwg=="},
 CellTags->{
  "CheckboxCell", "Disclosures-LocalFiles", "LocalFiles", 
   "LocalFiles-Checkboxes"},
 CellID->457873603,ExpressionUUID->"5e2f74e4-e0a6-4a0d-b3bd-74ec0d6374f0"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "WolframAccount"}], "\" \"", 
            TemplateBox[{"\"Wolfram account\"", 
              TemplateBox[{"DisclosuresWolframAccount", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                   "Choose this option if your paclet directly does any of \
the following:\n\[FilledSmallSquare] Requires, uses, or records any \
information related to user\[CloseCurlyQuote]s Wolfram ID\n\
\[FilledSmallSquare] Interacts with the user\[CloseCurlyQuote]s Cloud account \
or Wolfram account\n\[FilledSmallSquare] Creates, deletes or modifies the \
user\[CloseCurlyQuote]s cloud objects\n\[FilledSmallSquare] Creates or \
executes cloud deployed scheduled tasks\n\[FilledSmallSquare] Uses cloud \
credits, service credits or Wolfram credits\n\[FilledSmallSquare] Makes \
WolframAlpha calls", "MoreInfoText"], Background -> GrayLevel[0.95], 
                   FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
                   RoundingRadius -> 5, ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresWolframAccount"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJyNVE1uEzEUhjZpkzZKN2zoymLFglyATZVMWojUqlUcxNq13yQmznjws5sOK26BWHERjg\
CXqFgizsAbJzNNWyoxi8R+P9/7+577rR5vcl8Y4DvnwefB9/huMgM5B5U+\
wcapRpI0Rx4WmD5d3dMtbIyDAbpvj+2yvJZifvDemtSJBRNS2pB50rfGYjmw14BktD+\
BRW6EBxKkjbXP86FGaSwGB7h276+9m9hIwBhC2SWPofAi3cHWCVlEhK2Vmn/bTmbWIjA/\
08hs7rXNmE5ZYYNjuZAGPFPagfSmYMoCMpEVzKZkDyy1xtilzqav926+fGdj+BjIFF+\
xgOWvdYwcrVMrJ52l1i1EjOCgLEUxb0tbd/P5K7Kq/tEwoo0yD05Ij2yp/\
SzGq00TY4OqGlXGude7CJA4oBiUhwKqgjInu4VVOtV0vgMnI5y9/\
EBl4qZv6QLXIEN5XlkpyI0tKHWUM1A0RypC4Hzl9g5rO+lAaU/RKciVllAJNrNdi6LrmZhD3YO+\
yWeCSWEM8s6ZdTCi3k3guiYP7g2EnE8dFatoxO03ThSncAXGpfH7c1RbduLMz4Sb6gyTZ7cIUR7Jex\
fh54/y+32L0B2XYWjMY6F0wKRZa9qjhZgC15+\
gojFB7XBKHNQa59cRtvvB23Lw8pFi2sNyQuKSjo2JC1ArWiVHJ2JaLw9/yWlGxKAK5/EFqDD2S4x1+\
XWW6/9kkAzq80FyQGE6b61RiaVdI87QDnePr4QJkbVxYQ4To+WcqF+SycEmq/\
mLUWZ0BlVu5zlk4AbBe5tV28u7d9Ps8daFszk4XzxU7Z7HfcRq3/+rJhpKNgOnab02jnWVzXvCVZ+\
PiYex/80TYRD+NZl7mno0/\
HBjBr0HJSTWhEWGGyTo8W7c7dwRcuxbu58VPFwikENnDEhvj4RJkdOrehGfoL+70fkG"},
 CellTags->{
  "CheckboxCell", "Disclosures-WolframAccount", "WolframAccount", 
   "WolframAccount-Checkboxes"},
 CellID->243056593,ExpressionUUID->"24db0526-4476-4a51-9689-7a22c98731c8"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "ExternalServices"}], "\" \"", 
            TemplateBox[{"\"External services\"", 
              TemplateBox[{"DisclosuresExternalServices", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                   "Choose this option if your paclet directly does any of \
the following:\n\[FilledSmallSquare] Makes requests to external services \
(http, ftp, ssh, etc)\n\[FilledSmallSquare] Creates or uses service \
connection\n\[FilledSmallSquare] Send emails", "MoreInfoText"], Background -> 
                   GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
                   GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresExternalServices"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJyNVF1u00AQpiVOkzZqi8QT8LDiCVBzAV6qxG0hUqNU3lxga4/\
jVda7Zmc3rbkId0EcAS6BeEScgbETuyUqCD/YuzM73/x833rUG/\
KAu1IB7868K7wb8r0wg3gJSfoIO5cSyRJMHOSY7qz36S52Iq+A9o8jc1NtKzN/\
cn7rwGqhGIJdyRiqiF4kbsbmlta7eDCHvFDCARnSzibq+\
ZnEWBn0FrAB4E18gJ0QlCKcPYo5E06kXexdWJHXGLtrN/+\
8E2bGIDCXSWSmcNJoJlNWGm9ZIWIFjiXSQuxUyRIDyIQumUnpPLDUKGVupF683f/+\
6QubiiX5LXzwgA6ZMwy222KvMueKE5ZWL8TshIGLX9fRoQXqj2qwzCN9NyEsNlpTeqqrPsZBJwxyIR\
XywdRYmOjUzClRM1vcH4t4ubDG64S677+zoryEFSib1s+v0/bkoB7HVNiF1Bg+vUOo7TW3fyJ8+\
1o9P+8QDqMqDU0gEon0GAatpz/JxQK4/AgNywTV5bFQkGxwfpxif+SdyYWT8V+a6Z8BUSCuadmZWw+\
to1fRNxeLVlv8DV+\
PqcH5lzoalIMKZTOAts7NNxyH43Z9FB5RosF7o5LQkBTBAYn88HwllBdV1lpNz0Il4yXpwrKcqmCSy\
rB57ecvJ1pJDU11swI02LF3zuhG3Px4u9Ah711ZU4B15UPOvVktWGyuxH/\
1RdToDKx0kNxbtp0GW8b1tM8TuWYhuBAK4SF+\
tjwtQfzFPSaGDzQRGuVzjffEMOSHE03nCkvY9fT6I11yf41A/5RBBEjXM4Z5WdDP56q+\
pb8Bk6mkSA=="},
 CellTags->{
  "CheckboxCell", "Disclosures-ExternalServices", "ExternalServices", 
   "ExternalServices-Checkboxes"},
 CellID->105278940,ExpressionUUID->"8528ec12-6fa9-4519-a391-f8a9f01b477a"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "WLSystemConfiguration"}], "\" \"", 
            TemplateBox[{"\"WL system configuration\"", 
              TemplateBox[{"DisclosuresWLSystemConfiguration", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                    
                    TextData[{
                    "Choose this option if your paclet directly does any of \
the following:\n\[FilledSmallSquare] Creates persistent local scheduled tasks\
\n\[FilledSmallSquare] Modifies WL system or environment settings\n\
\[FilledSmallSquare] Modifies ", 
                    Cell[
                    BoxData[
                    StyleBox[
                    TagBox[
                    ButtonBox[
                    StyleBox[
                    "$Path", "SymbolsRefLink", ShowStringCharacters -> True, 
                    FontFamily -> "Source Sans Pro"], BaseStyle -> Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/$Path", 
                    ContentPadding -> False], 
                    MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"]]], ", ", 
                    Cell[
                    BoxData[
                    StyleBox[
                    TagBox[
                    ButtonBox[
                    StyleBox[
                    "Directory", "SymbolsRefLink", ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"], BaseStyle -> 
                    Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/Directory", 
                    ContentPadding -> False], 
                    MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"]]], 
                    ", or similar\n\[FilledSmallSquare] Installs additional \
paclets or dependencies\n\[FilledSmallSquare] Creates or imports non-public ", 
                    Cell[
                    BoxData[
                    StyleBox[
                    TagBox[
                    ButtonBox[
                    StyleBox[
                    "ResourceObject", "SymbolsRefLink", ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"], BaseStyle -> 
                    Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/ResourceObject", 
                    ContentPadding -> False], 
                    MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"]]], 
                    " content\n\[FilledSmallSquare] Makes FrontEnd \
modifications\n\[FilledSmallSquare] Internal handlers"}], "MoreInfoText"], 
                   Background -> GrayLevel[0.95], FrameMargins -> 20, 
                   FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, 
                   ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresWLSystemConfiguration"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJztVr1uG0cQjmRSImWBCgwZ+ak2QRCkMOEuhYsQ4lG0CUigwCUiBCmc1d0cueHe7mFnj/\
L5MdLkAQKkSZEXSJU6eYC0Qbr8PENml+SJJCwkhQoXZsP9mft25vtmZ+\
ek0eZ17koFfG9YuLxwbb4fTSGeQZK+hbUzibRSHzjIMN1ZzNNdrI0KBTS/NzLXfuqX+\
TuXZwxLJFMWG53KSWGFkzTawcZIXHfNC0Ayvj+\
GLFfCAS2kteW3rCcxVgYLC3h5xgNKtAFSx1oEShHYPn3YE06ke9joW5EFoN1quzGGFy7s7y/\
Bf9yJpsYgMDeVyEzu8ZhMWWkKy3IRK3AskRZip0qWGEAmdMlMSvbAUqOUuZZ68uTg929/\
YpEFch1ZDhYJG7RjysRCMYynkBArCXMCZxiMz00iU0nWN8wYy0DPpTU6898iOEfYW+\
ae6e1g72Ej6LQIdm8sJgv+mt3COaMXk8qE1z+\
6EG7KW7zMrozCEaRnUs9W0uExn5pr7iydHU2FFbGjeLA2tgVUNgd9o11fZFKV/\
IgTVzEwLjSyC2sqo2ZXIIRTvbO9UpN9TM4e9k8vrJwTV18NUto6jAprKeLPhSqAN89NgTCcg62yp7b\
hX9OfHRllrA989LQbxvblpz98dvnlnx37ifj+7+df/Nax737M699983NnlZxbOAcLdjyD/\
O2F1E8spI8DO5VVi1LNS3khksSrUe8LhT6gB8HPkzwH4kjHQKzzhj/gmdDJnZHJdx/\
dheTNXshhY8s3sq/Jfrwme8XQayP980e+\
JKCkXWFDFRhodEIpKkLkkS9VVFwWIaA3TSAHnYCOqVBsVCTak1luLJlpo9t5caVkfBd51RoBBq+\
HV18Te2+Say253ltLrk2aXpsM6/jX2DuweGPEjHKlT++\
PO9UJy8KTE4cnFpfpRwf4nJuSF4rO4ofnxsJAp8Y/rGssiHg2saYgX3ew+\
dSK8gzmoGwafv90KsvD8EifCzuRGqPjNa/9+krnNYRff/G/v24QWiN/\
DDEwEoksMKrfaDrIxAS4fAkr0Qlqj9ODDMkS548ONk8KZzIKMr4lmGYPSEVxRcNNZhv+\
7pAwVfPDH3MSl9ha4fxn47KCuu+hlixUzi7/o27UrcZH0ZFP7mdGJZGhVgkcUCvWOp1TmgdID8Tfj+\
h6z6g9sSSiBSbJF5uFff7hQCupYeXikCoG2EXWrpov/vCV3rZ5g3KGmhtX3mqxPwwdFK6at/\
8VISmlp2Clg2RtWMVc31pckH9KBTCIsrwzr5Bra6fSi3+\
wJkz7tkioAhSZxrUEafNWuAG5pQMCmc0TXfLiijq1Nj9c3fFxmVPHfBEu/78U+Qce"},
 CellTags->{
  "CheckboxCell", "Disclosures-WLSystemConfiguration", 
   "WLSystemConfiguration", "WLSystemConfiguration-Checkboxes"},
 CellID->423568193,ExpressionUUID->"e00de562-82fd-44e7-8c2a-82e08b9aee08"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "WLSystemSymbols"}], "\" \"", 
            TemplateBox[{"\"WL built-in symbols\"", 
              TemplateBox[{"DisclosuresWLSystemSymbols", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                   "Choose this option if your paclet directly modifies \
definitions of built-in symbols such as those in System` or other internal \
contexts.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
                   20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, 
                   ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresWLSystemSymbols"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJyNVM1y0zAQpiW/\
NJMc4FQuGm4czCt0EqeFzKSTjpWZXlHsdaKJLHm0UlvzBDwcvAVHhmdg7cRuSAuDL17taj/\
t7vdJ417A29wVCnhn4V3uXcC74QbiLSTpC2zNJZKnPXOQYXqyW6en2Iq8Alq/jMx9uSzd/\
PXtnK28VC6QmmGRrYwqc3qRuJ+\
YB0DaeLaELFfCATnS1j7vfCoxVga9Bbyd8wLpML5Pb2MrBKUIpkspU+FE2sHelRVZBXG6C/OvJ+\
HGGATmNhKZyZ00msmUFcZblotYgWOJtBA7VbDMJDKVgCyBVGpZ7qWc9EntDH28YQIJtISmwK62z8xY\
ZtwGLPkcWC0Uiw1ZDw4/8MG1sTDTqVnSuh4VvpqIeLu2xuuEeul/\
tKKYwx0om1bfr4tm56Bq7lrYtdQYvnlEqPwVVX8ifP9Wfj8fEYZReYzU60gk0mPYbiL9WSbWwOUXqE\
kjqA6PhYJkj/PjAvtj70wmnIz/0kx/CjRQsSKztbQemkCvJGMp1o1U+HtOM6cB1zj/\
oLoGOStB9v03Ze7/4SScNPYoHNE5g09GJaEhWYEDkuzw8k4oL8pDK2mch0rGW5YSZxkVQZSRmVVx/\
m6mldRQF7fIQYOdeOeMroXKR0d1Brx3Y00O1hXPxLqLSntYi/u/uiJeNKlJOkgOzKbP9pFzN+\
rLRO4oaF8JhfAcOUeRhh3+9oCG4GkPoVE+\
03gghIAPZ6XUc0vQ1ej6Y11wv0Kg52EQAdJFi2FZ5PSO3FT37TdcdY6p"},
 CellTags->{
  "CheckboxCell", "Disclosures-WLSystemSymbols", "WLSystemSymbols", 
   "WLSystemSymbols-Checkboxes"},
 CellID->349939228,ExpressionUUID->"692d8b4f-15a9-4999-9b5d-3ffc00b8d2be"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "PacletDependencies"}], "\" \"", 
            TemplateBox[{"\"Paclet dependencies\"", 
              TemplateBox[{"DisclosuresPacletDependencies", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                   "Choose this option if your paclet directly installs or \
updates any additional paclets. Paclets that are included with the Wolfram \
system do not require a disclosure.", "MoreInfoText"], Background -> 
                   GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
                   GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresPacletDependencies"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJyNVM1u00AQpiVpExq1EnBCAq04k75ClTgtRGrVKhuJ89Q7TlZZ75qd3bbmfXgbeAuOiG\
dg7MRuKAXhi2dnPN/8fN961BvKrgylQbl3GUMRw1DuJ0tMV6iyJ9Q518Se7jRgTtnO+\
pztUmcWDfL56czdVsfKLV9cQWowCIUFWoU21Vjl9GZwO3Z3bO/\
SwRzzwkBAdmSdTd7riabUOIoeaQ0x2UboUidBYxhpn7MmECDbo96Zh7xG2V2H5ZedZOkcoQhLTcIVQ\
TsrdCZKF70oNp1pj2kwpdCWAhjD33kRC8UNkQBbClBKV4lgNil0LNYtEeNCEOCRk1MTFSpxq8OS3Sg\
+OpNxP4JK4kUJ5YR1QXj8FLmgAK7bDHgsBxfO49Rmbo537Srp2RjS1cK7aBUP2n/voTzHGzQ+q5+\
fJ+2Xg3ryC/ALHiJ5eY9Q+2sqf0f49rV6ftwjHM6qMtouZqB0pKTbRvrTHBYo9WdsSGWoPZmCQbXB+\
X5C/VEMLoeg078M058gbwyu2ezMfcQ20KuYmsOilZJ8J5kQXniD828pNDgHFc5mBW2nm3cyTsatfZQ\
ccanBB2dU4lh5GJBVfXh6AyZCVbeWzqvE6HQlMhZD7mqC2czruHw7tUZbbPq75G7Qj2MIzjZals//\
bHUoe1feFehD+Xh4/7JWKDW34L9mY4LsEr0OqLbMdtruA+\
d656cs6ZqL7hkYwsdYehBpaZJvtvgYPjpG4kzMLW2JYigPpzagLzyj1zvsj2wp4zUh/0oGMyS+\
kSnOy4L/OWvMX7ZnntY="},
 CellTags->{
  "CheckboxCell", "Disclosures-PacletDependencies", "PacletDependencies", 
   "PacletDependencies-Checkboxes"},
 CellID->175258687,ExpressionUUID->"f2ce00d7-bf6d-4e62-8a6e-4b71479e2e24"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "OSConfiguration"}], "\" \"", 
            TemplateBox[{"\"OS configuration\"", 
              TemplateBox[{"DisclosuresOSConfiguration", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                    
                    TextData[{
                    "Choose this option if your paclet directly does any of \
the following:\n\[FilledSmallSquare] Modifies OS settings\n\
\[FilledSmallSquare] Makes any use of ", 
                    Cell[
                    BoxData[
                    StyleBox[
                    TagBox[
                    ButtonBox[
                    StyleBox[
                    "SystemCredential", "SymbolsRefLink", 
                    ShowStringCharacters -> True, FontFamily -> 
                    "Source Sans Pro"], BaseStyle -> Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/SystemCredential", 
                    ContentPadding -> False], 
                    MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"]]]}], 
                    "MoreInfoText"], Background -> GrayLevel[0.95], 
                   FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
                   RoundingRadius -> 5, ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresOSConfiguration"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJytVb1uE0EQJsFO7GA5CFGgpDlRICgsOooUWPElJpYSOfJYIEQBm7s5e+\
W93dPuXsLxGDQ8ABINr0BFDQ9Ai+j4eQZm73wXx/yIgmu8uzM7+\
833zYx3Gx2og80EwtowtUlqO7DuTzGYYRhdMrVDbuikPrAYm2il2EerpjZKBdL+\
8kidua07hqtD8AIlIz5JNbOcViumMWJnPfUcDXldGWOcCGaRDqLa/\
NLWHjeBUCbVaIbgX7heNzUfhaAw63Rlj1kWrZlGX7M4D7FamRtjfG5ze4nF+\
lOlDHp2yo2nEhfO45GXqVR7CQsEWi/kGgMrMi9UaDwmM09F5I9epIRQZ1xOdjY+\
v3rnHamQR5xcKD2D1pLBFAY2m19M6SW67AhaBnzZNHJ6C8BrYzYpsm/\
2UmuVLDaVC1yFzBDXvsYQpeVMQBuy+EQJM8LokMtZSb65DlN1BlYTHH/\
KNAssamNqY51i5bPRV9L2WcxFBptAuQfoAZPGO9aqcmr2mMEcgMO9l0nyDwh3q79/\
rPkp6fVsEJGp5adaE6iHTKQIzSNFWQ9PUVec1y7ga7q3fSWUdhyMHvTytX5x7+39R0++\
dvVt9ub708efuvrGLai/fvm+\
W5bXUpyNgihHJmwX0u1ojO4uE1VdaFMRWTo7ZmHotKr3mTAut2s55N0kQaJLBkhaQMO9dcBk+\
N94hdaR0jiQkXJFuZAGC2YTrVJ6asU0H2iWHeIpCh3l349u5dnKC/yI6QmXxr++8Kg7L4VaiPDxg/\
u+nUdoj9wzlMCIhTw1fv1clEHMJgj8BZaqUag1CJjAcB7nS9c0d1OrYurB4A/\
JNPeQZGAntLxITMOVP/FazQq4A9Rk1H1lnL+0exnkigsyz7+COf/1e36vWm/\
6m64uD5QIfUWjBS3SzGrvn1KF5iFdINjyBQ9m1NXaiwmExwmFjnM73BxIwSWW4IYJStRFwZXDCjaXc\
HagQTInqG32G9v6MB82phxw/5QV6SKnqLnFcGFZ5VlfOiyo3g95IcG8wH8jzpKlUge2F2To/\
JoDtWoaS7NQCB1oD6irdKIpdE5dc1dmkJ7QROxAa4Qm74JxltAfyXHepT8BfMZDMg=="},
 CellTags->{
  "CheckboxCell", "Disclosures-OSConfiguration", "OSConfiguration", 
   "OSConfiguration-Checkboxes"},
 CellID->147266719,ExpressionUUID->"c0f4d14f-2e8f-4227-83b3-d1f43746daa9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "LocalSystemInteractions"}], "\" \"", 
            TemplateBox[{"\"Local system interactions\"", 
              TemplateBox[{"DisclosuresLocalSystemInteractions", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                    
                    TextData[{
                    "Choose this option if your paclet directly does any of \
the following:\n\[FilledSmallSquare] Executes Shell or RUN commands\n\
\[FilledSmallSquare] Uses external evaluators via ", 
                    Cell[
                    BoxData[
                    StyleBox[
                    TagBox[
                    ButtonBox[
                    StyleBox[
                    "ExternalEvaluate", "SymbolsRefLink", 
                    ShowStringCharacters -> True, FontFamily -> 
                    "Source Sans Pro"], BaseStyle -> Dynamic[
                    FEPrivate`If[
                    CurrentValue["MouseOver"], {
                    "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                    "Link"}]], ButtonData -> "paclet:ref/ExternalEvaluate", 
                    ContentPadding -> False], 
                    MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> 
                    True, FontFamily -> "Source Sans Pro"]]], 
                    "\n\[FilledSmallSquare] Interacts with external libraries\
\n\[FilledSmallSquare] Reads or writes to streams or sockets\n\
\[FilledSmallSquare] Launches parallel kernels, subkernels or GPUs"}], 
                    "MoreInfoText"], Background -> GrayLevel[0.95], 
                   FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
                   RoundingRadius -> 5, ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {
                  "SectionMoreInfoDisclosuresLocalSystemInteractions"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJytVT2PI0UQvb21d+\
09y4vQSRyQtA4JEWAhEoILsNaz9p4lL2u5vSBEAO2ZGrvlnu5RV4+9c+GFhCT8ACQS/\
gIRMfwAUkTGx2+gesae9VrsiQAn7o/q169eva45a3R4nbtcAT+6ylyauQ4/\
DhYQLiGKH2BtJJFW6kMHCcYH5Tx+iLVJpoDmhxOz9lO/\
zN8cmVAohjlSNJPagRWhk0b7k42JWPfMDSCFP5pCkirhgBbi2ub003OJoTKYWcACiBc4w12YOtYCUI\
rgjunouXAiPsLGwIqkgHpYbTemcOOK/cMN/\
NcHwcIYBOYWEplJPSCTMctNZlkqQgWORdJC6FTOIgPIhM6ZiSkeWGyUMmup589Ofvv2R9a/\
gTBzFMIXdB0zlk2uP2GhSRKhIyxCrpG2iQNYTZLASqhMOGORraRgXsj9PA6xUZShzONoKualOM1e5p\
zR5aQK4a/1N9j9Ehp4m+\
fJzCicQDySerktEj7mC7PmzhL7YCG8lGARa1ObQRVzMjDaDUQiVc5POSkSAuNCIxtbUwU1ewKhIOB5\
n+ea4kPi3Rr0x1auiMNXw5i2WkFmLWj3KRED3rw0GcLVCmzlk9odfk1/d2CUsV6DyUWvGNsXH/\
3w8Wdf/NG174nv//ry81+79sm7vP7dNz91tzbcwzkphfJi8rfLgj6zEH+\
wL1R1oB3QxcRzLKKIxMH6QCj0ub1eUD5LUyC5dAhUC97wdz2n8v5vuvKXB4VTtgZHtpZucesZJWdWW\
AmlnyYgIvROW1vpnecMQ2dBJMUiGnqvrowciUyHCwpJiZRSoNiSAEHh+\
wyz2WbsD12Mr5G3Lo2FoY6NfzA7WopwObcmo3wPsHlhRT6CFSgbF7+/\
u1Vkq3h8l8LOpcbg8U7mfn3rlh2EX372vz9vEdoTfw2pOBGRzDCo3zpjmIg5cPkCttYhqCNOrQGiDc\
7vXWyeZc4kwsnwnmSa50BeEDMa3q1Ow79BKm7V2PiHHIpOs8X5Dy1pC/bIg210qOhu/\
oNe0KvGp8GpfyTPjYoCQ20QyJIPsL2xJ2F6IP5WoGS4pMZjWUJkqJvSMCn2+\
dOhVlLDluRVChps6f5tY+Vv3MO3wxvkvRSsy18Rc3yVltnV7nb8V2ZJ9dIL8PaMdoZV3vW9xbIE/\
UiWpdm8vn8p2t5OVTX+\
zk55OvfnQv0kSzTuGKXD20VMaumKQtLmmc55NkOgj11rAlg81Wme0ldxXLSSfwBBkJQ9"},
 CellTags->{
  "CheckboxCell", "Disclosures-LocalSystemInteractions", 
   "LocalSystemInteractions", "LocalSystemInteractions-Checkboxes"},
 CellID->890059680,ExpressionUUID->"05d6f5cf-251a-43ca-874a-357ccf8200b5"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Other"}], "\" \"", 
            TemplateBox[{"\"Other\"", 
              TemplateBox[{"DisclosuresOther", 
                Cell[
                 BoxData[
                  FrameBox[
                   Cell[
                   "Add additional text as needed in a new cell below to \
document any additional disclosures that are not listed above.", 
                    "MoreInfoText"], Background -> GrayLevel[0.95], 
                   FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
                   RoundingRadius -> 5, ImageSize -> {
                    Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> 
                 True, CellTags -> {"SectionMoreInfoDisclosuresOther"}, 
                 CellMargins -> {{66, 66}, {15, 15}}], 
                HoldComplete[
                 EvaluationCell[]], "Click for more information"}, 
               "InlineMoreInfoOpenerButtonTemplate"]}, "RowDefault"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJyNU9uO0zAQhaXpha26IPHECxbv5RdWbboLlXbVVdwfmMaT1qpjR760m/1G+AseEd/\
AJG3SsoCEXzyey5mZM+NJf8wj7kuFvLsIvgh+\
zHvxBtMtiuyF69xJR5po7jF32cvDO7twnSQopPerxOyrZ6Xm0cJv0JK2n8B+\
ah7RkelyiXmhwCMpss7R881MulQZFyy6Q1DkOjEqRcE9cpyBh6zr+\
rcW8jrw4mDmbiIEAyGkl0aDYh4fPQPHNKJAwaRmQPKepeTMVqjMnnnDhElDjpo8dXkeLU5VML8Bslt\
k2nimqEiCg5XZ4Sc+\
vDcW5zozS8rWNO9eTyHdrq0JWlDVg88WyjvcobJZfX5et57Duo17sGupXfzuhFDra/J/R/j2tTo/\
TgijpEoj9ToBIYOLo9YymOewRi6fsBkDQXV5CgrFEef7tRtMgjc5eJn+\
o5nBDBV6WJHYWdqAraFf0b6EdTt8/\
oFjWvHX4Pwxyib0sgo9dt0Wd7zjaTxt5av4itCHX4wSsaFlQY+\
0eqObHagAVap69O9jJdMty4xlOaWmWZOY13b+ca6V1NiUtChQo50G741u1u+\
4nWPef7CmQOvLVtNbFBWKa9bzvzog5jVFS9qTM7HtKXqmPJB5Q6tXkxzdgnL4N/qfWVr++\
dszosdN5bFRIdfubMBjPpprj7awBFiTM5jokoeVQ/rIwwSdCTbFZVnQj3+AlPL+AvvNa/8="},
 CellTags->{"CheckboxCell", "Disclosures-Other", "Other", "Other-Checkboxes"},
 
 CellID->635776107,ExpressionUUID->"ccfe7e6b-3a04-4463-b53b-fef5cc0b693f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Author Notes",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Author Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "This section, when used, will appear near the bottom of the \
published resource. Content displayed in this section can include background, \
possible improvements, additional information and/or implementation details \
that are otherwise beyond the scope of the paclet documentation.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoAuthorNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "0bce2ad3-0889-42c6-a661-73c0d170963f"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Author Notes"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Author Notes", "TemplateCellGroup"},
 CellID->951557313,ExpressionUUID->"9059e381-ec4d-4b44-bc8f-e47e32a06638"],

Cell[TextData[{
 "Does not support uses of ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Condition", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
    ButtonData->"paclet:ref/Condition",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "f05774f2-78f2-4434-bc0a-060d70641f08"],
 " inside of function bodies that cause functions to return unevaluated."
}], "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.882454815564192*^9, 3.882454849008613*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->908162033,ExpressionUUID->"6ae75d52-ccef-4ee1-961f-0d01247261b4"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1059.375, 824.25},
WindowMargins->{{43.875, Automatic}, {Automatic, 43.125}},
WindowTitle->"PatternErrors | Definition Notebook",
DockedCells->{
  Cell[
   BoxData[
    TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
   CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
   RGBColor[0.33333, 0.33333, 0.33333], CellTags -> {"MainDockedCell"}, 
   CacheGraphics -> False], 
  Cell[
   BoxData[
    TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
   TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
   CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
   CacheGraphics -> False, CellOpen -> Dynamic[
     CurrentValue[
      EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]},
TaggingRules->{
 "ResourceType" -> "Paclet", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> "2022.09.16", "CreationTimestamp" -> 
  3.882314278768791`16.341665678380874*^9, "UpdatedTimestamp" -> 
  3.882314278768914`16.341665678380885*^9, "CompatibilityTest" -> HoldComplete[
    BinaryDeserialize[
     BaseDecode[
     "OEM6eJzVWFtv2zYUri+\
5IPEyNECB9a0PeciCbR2GAduaXerJSeohSZPQ6XNo6UgRTJMqSaXxv98hJTm2I7mS7WCdHxJapL7z8\
dz40X5N7TpiGImYe0f3kQSlQsH9mlq7jEPQfj13uq7qXR//\
Ntrcw39rRx9jytTO3geQZv48HvZBSt9+9t+aFYQO4RIHLSeWErj+QFkM/\
jO1e3SHI6rNW0JDX4gBrmqehkqrVo8GQciDq5iBIq0rUCKWLvRGEZBmh2qKNJvvuQuFLNf+\
ZsIdmGUJ4J4juIZ7fUH1rd8o2vk5gKfIfmaPjJSGocNCpH3TAT/\
k4STdm4dXXhlS2Wt5S1XzPGYMif3weDI1cAUBUgWJTP0wiKV1zXi7f5UldQWRUKEWcpQAJjgqBWrY+\
NXU5jENWSwxMjX11QV1GeguV5oyRr4pYuivL+Lshdza6ompyGwRLTEf/hGhsdc4o5HdQ8xd86a/\
llgmLwuda8lRZdJ6O8EiEQu1eUyY0E6N1G5I/c0fEw/qh1uWPOavIt+WJX/\
gNwu81CBg7G11xCdui0Cp38qiZoP3scYwgmcKagsjzagLbcyrFcJum6LrAKMj8BB3+\
51gHgYSE5OrP8sCX8jwDgFv7pK2cCIBv0m1cc1V2g5yvNGpik6jCLh3zW8p9xh4DjCm5jpmVRbm+\
Ai/VvaSi7DY8VIE8rwHQ9yABmPuRIo4Wh4Ua7fVZmaE7eAOE/\
qFg4sCIUNQ3zu34A764h4f7zw8NtZJK5uz33bQHo2ZtvXNdQ5T8nX2iEBSm7mhLt3NxoFQg564jjwc\
p32/OMorAJ8KcAMfbGQlsHnCRJ+\
ym1tzpE16VP1S1uwJ6Heh5wFPGlH5cj2m3B05tyJ0oRNSJoJJYq2UmNR4SuL5ik2Z8kEedYqzz+\
2sOZMIfIwBd012Uw8wLzN4icfFeL/\
TBibAsiNlrSdjW9pLdokqh102yJIulSHqp6oUeL9KjaVSZtbqlIcyf57Dp7E/\
c32cFIg6q0p5L1ZwCgF1R92AC5l0pyzWqmmikV98h2Ut5eDOFN68MlzSzLweW1frp/\
imbYzHVf0WgM7a2LTFlZUSlsQ2Mgfsi1SBegq6hdWIEtqq5nWzutsxdWn5qY0u9uwAM3Wzy62x0Wec\
3BizLth4Cly672U7UuOT4RFs/8HbY/MTNmvqqPIxSLngoUvZhRQRoLesnluU8wTR/\
EtEPW2GrbZSwg2t9r5U7cq1HaVsyQjpj4YmhzbbVoz0xGrgbJqQHWKBzkBTz9wP0hsY2XRCnVxAXiY\
rXl+BD9Jk96ts6qG7rCYqE0ZnaCW3p/EdKrmCNk/R54+uns/s5+\
At3gmWuazMuUlU0PcHhSjVBH01nHkK/udCJLwEDmgAxMWAVNPt14WYyWmXlweJsYWF/JOZnK/\
sS3qvjJ5fCOoLU/EXy0ehgqx/CmuL6Pz9Qh6zwr64bP8nSn6hboEAP362X81KZ2fp4FoF/\
7oQ5ikkezHpKfcsLNS/K8RfTplXxS0rxX8v54//VoAvRfILkt2/\
Fu6DuJJG2H9mK2QZ3X1Y8rjKVdsLU11Qbnfn/Mae/TiO1RZHs2bny+6Vwq5Sfi8TnHKi+1+K4NOh"]\
]], "DefinitionNotebookFramework" -> "DefinitionNotebookClient", 
  "RuntimeConfiguration" -> {
   "Contexts" -> {"PacletResource`", "PacletResource`DefinitionNotebook`"}, 
    "DefaultContentMethod" -> "Tagged", "HintPods" -> True, "LoadingMethod" -> 
    "Paclet", "PacletName" -> "PacletResource", "SourceID" -> 
    "92ce7a395baccd06b35bc67811577346991d7e35"}, "ToolsOpen" -> True, 
  "StatusMessage" -> "", "SubmissionReviewData" -> {"Review" -> False}, 
  "AutoUpdate" -> True, "TryRealOnly" -> False},
CreateCellID->True,
DynamicEvaluationTimeout->60,
FrontEndVersion->"13.2 for Linux x86 (64-bit) (November 18, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], WindowToolbars -> {}, DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.33333, 0.33333, 0.33333], CellTags -> {"MainDockedCell"}, 
       CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    PrivateNotebookOptions -> {
     "FileOutlineCache" -> False, "SafeFileOpen" -> "IgnoreCache"}, 
    CellLabelAutoDelete -> False, 
    CodeAssistOptions -> {"AutoDetectHyperlinks" -> False}, 
    AutoQuoteCharacters -> {}, PasteAutoQuoteCharacters -> {}], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontSize -> 14, FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.62744, 0.62744, 0.62744, 1.]}, StripOnInput -> 
             False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.62744, 0.62744, 0.62744, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.5, 0.5, 0.5, 1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "]]}, {
              FaceForm[
               RGBColor[0.5, 0.5, 0.5, 1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.99998, 0.99998, 0.99998, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
            "\"Click for more information\""}, "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
           "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.85], 
                 Thickness[
                  NCache[2/45, 0.044444]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    RawBoxes[
                    TemplateBox[{
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], True -> GraphicsBox[{
                    RGBColor[0.98824, 0.41961, 0.20392], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "\"Click to copy to the clipboard\""},
                     "PrettyTooltipTemplate"]], 
                    RawBoxes[
                    TemplateBox[{
                    GraphicsBox[{
                    RGBColor[0, 
                    NCache[2/3, 0.66667], 0], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "\"Copied\""}, 
                    "PrettyTooltipTemplate"]]], UpdateInterval -> 1, 
                    TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain", StripOnInput -> False], 
          Background -> RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8, 
          StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], 
        Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain"], Background -> 
          RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8], 
         "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Template Input\"", "Text", FontFamily -> "Source Sans Pro",
                  FontSize -> 11, StripOnInput -> False], 
                "\"Format selection automatically using appropriate \
documentation styles\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2790153672590285854; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Template Input"; 
                    DefinitionNotebookClient`TemplateInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2790153672590285854]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.33333, 0.33333, 0.33333], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83333, 0.83333, 0.83333], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKtsSV+1ZfuH66ccf336FICAbKAIUB8oC
1QBVYjUEaD7EhAXNe96/+oI19IDiQFmIOXD3IBsC8QVQDcGIgJgDVI9mCDDE
IL7A5QY090D8BQlnuCHAkAcKAn1N0AQIAKoEqgfqQjYEGINAQWDoEWkIUCVQ
PVAXUC8kNQIZwJQAFATGApGGAFUC1QN1QQwBAsoNoYpL/lMvTKgSO1RJJ1RJ
sdTKO1TJxdQqT+CAwpKNDEAwIv4TV9oDAHfUai0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKptjVswo3764bd/ayUchCMgGigDFgbJA
NUCVWA0Bmg8xoTdr3dpJRzfPOomJgOJAWYg5cPcgGwLxBVANVu3ICGIOUD2a
IcAQg/gClxvQ3APxFySc4YYAQx4oCPQ1QRMgCKgSqB6oC9kQYAwCBYGhR6Qh
QJUg9R17gXohqRHIAKYEoCAwFog0BKgSqB6oC2IIEFBuCFVcQsUwoUrsUCWd
UCXFUivvUCUXU6s8gQMKSzYyADHFODGlPQBkA8lD
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlM0KgkAUhaU2Ldu17iWibcsgEIweQMmkjYEm0dv4Qr5LIKgIUV/dGiTM
JpwDyvXOmeO5d36m3sHZDSzLike8HPe0iCL3vB7zsQnjfRD622V49AM/mntD
kpPX84hvv6DDAZd++CaS53lZlnVdX98gJkNeU6Sqqg7bjHaL8CN+SqYoijRN
kyRZvUFMhjyjcJqWPkREIcsy27ZnbSDPqOi0ikgVcFqnNyE6qi4lgj2p4puH
Dz9SlxSlROg8AVX/VBDAhM+spggrSED3NEVgwmcWc2U3qpayCpoiMFV7rSf6
ixhxYrAnRlbHyD4xsmNNnR1Tp9jIfdK01PNm+xcdthV0bvs7VDZhuw==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Literal Input\"", "Text", FontFamily -> "Source Sans Pro", 
                 FontSize -> 11, StripOnInput -> False], 
                "\"Format selection as literal Wolfram Language code\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4138174468017918531; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Literal Input"; 
                    DefinitionNotebookClient`LiteralInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4138174468017918531]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.33333, 0.33333, 0.33333], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83333, 0.83333, 0.83333], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKtsSV+1ZfuH66ccf336FICAbKAIUB8oC
1QBVYjUEaD7EhAXNe96/+oI19IDiQFmIOXD3IBsC8QVQDcGIgJgDVI9mCDDE
IL7A5QY090D8BQlnuCHAkAcKAn1N0AQIAKoEqgfqQjYEGINAQWDoEWkIUCVQ
PVAXUC8kNQIZwJQAFATGApGGAFUC1QN1QQwBAsoNoYpL/lMvTKgSO1RJJ1RJ
sdTKO1TJxdQqT+CAwpKNDEAwIv4TV9oDAHfUai0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKptjVswo3764bd/ayUchCMgGigDFgbJA
NUCVWA0Bmg8xoTdr3dpJRzfPOomJgOJAWYg5cPcgGwLxBVANVu3ICGIOUD2a
IcAQg/gClxvQ3APxFySc4YYAQx4oCPQ1QRMgCKgSqB6oC9kQYAwCBYGhR6Qh
QJUg9R17gXohqRHIAKYEoCAwFog0BKgSqB6oC2IIEFBuCFVcQsUwoUrsUCWd
UCXFUivvUCUXU6s8gQMKSzYyADHFODGlPQBkA8lD
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlM0KgkAUhaU2Ldu17iWibcsgEIweQMmkjYEm0dv4Qr5LIKgIUV/dGiTM
JpwDyvXOmeO5d36m3sHZDSzLike8HPe0iCL3vB7zsQnjfRD622V49AM/mntD
kpPX84hvv6DDAZd++CaS53lZlnVdX98gJkNeU6Sqqg7bjHaL8CN+SqYoijRN
kyRZvUFMhjyjcJqWPkREIcsy27ZnbSDPqOi0ikgVcFqnNyE6qi4lgj2p4puH
Dz9SlxSlROg8AVX/VBDAhM+spggrSED3NEVgwmcWc2U3qpayCpoiMFV7rSf6
ixhxYrAnRlbHyD4xsmNNnR1Tp9jIfdK01PNm+xcdthV0bvs7VDZhuw==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Insert Delimiter\"", "Text", FontFamily -> 
                 "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                "\"Insert example delimiter\""}, "PrettyTooltipTemplate"], 
              ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1887802176716758884; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Insert Delimiter"; 
                    DefinitionNotebookClient`DelimiterInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1887802176716758884]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.33333, 0.33333, 0.33333], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83333, 0.83333, 0.83333], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKtsSV+1ZfuH66ccf336FICAbKAIUB8oC
1QBVYjUEaD7EhAXNe96/+oI19IDiQFmIOXD3IBsC8QVQDcGIgJgDVI9mCDDE
IL7A5QY090D8BQlnuCHAkAcKAn1N0AQIAKoEqgfqQjYEGINAQWDoEWkIUCVQ
PVAXUC8kNQIZwJQAFATGApGGAFUC1QN1QQwBAsoNoYpL/lMvTKgSO1RJJ1RJ
sdTKO1TJxdQqT+CAwpKNDEAwIv4TV9oDAHfUai0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKptjVswo3764bd/ayUchCMgGigDFgbJA
NUCVWA0Bmg8xoTdr3dpJRzfPOomJgOJAWYg5cPcgGwLxBVANVu3ICGIOUD2a
IcAQg/gClxvQ3APxFySc4YYAQx4oCPQ1QRMgCKgSqB6oC9kQYAwCBYGhR6Qh
QJUg9R17gXohqRHIAKYEoCAwFog0BKgSqB6oC2IIEFBuCFVcQsUwoUrsUCWd
UCXFUivvUCUXU6s8gQMKSzYyADHFODGlPQBkA8lD
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlM0KgkAUhaU2Ldu17iWibcsgEIweQMmkjYEm0dv4Qr5LIKgIUV/dGiTM
JpwDyvXOmeO5d36m3sHZDSzLike8HPe0iCL3vB7zsQnjfRD622V49AM/mntD
kpPX84hvv6DDAZd++CaS53lZlnVdX98gJkNeU6Sqqg7bjHaL8CN+SqYoijRN
kyRZvUFMhjyjcJqWPkREIcsy27ZnbSDPqOi0ikgVcFqnNyE6qi4lgj2p4puH
Dz9SlxSlROg8AVX/VBDAhM+spggrSED3NEVgwmcWc2U3qpayCpoiMFV7rSf6
ixhxYrAnRlbHyD4xsmNNnR1Tp9jIfdK01PNm+xcdthV0bvs7VDZhuw==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               TemplateBox[{
                 StyleBox[
                  
                  TemplateBox[{
                   "\"Tables\"", 
                    "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\
\[FilledDownTriangle]\""}, "RowDefault"], "Text", FontFamily -> 
                  "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                 "\"Table functions\""}, "PrettyTooltipTemplate"], 
               ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3216557251994556740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> RGBColor[1., 1., 1.], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.33333, 0.33333, 0.33333], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.83333, 0.83333, 0.83333], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["

1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKtsSV+1ZfuH66ccf336FICAbKAIUB8oC
1QBVYjUEaD7EhAXNe96/+oI19IDiQFmIOXD3IBsC8QVQDcGIgJgDVI9mCDDE
IL7A5QY090D8BQlnuCHAkAcKAn1N0AQIAKoEqgfqQjYEGINAQWDoEWkIUCVQ
PVAXUC8kNQIZwJQAFATGApGGAFUC1QN1QQwBAsoNoYpL/lMvTKgSO1RJJ1RJ
sdTKO1TJxdQqT+CAwpKNDEAwIv4TV9oDAHfUai0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKptjVswo3764bd/ayUchCMgGigDFgbJA
NUCVWA0Bmg8xoTdr3dpJRzfPOomJgOJAWYg5cPcgGwLxBVANVu3ICGIOUD2a
IcAQg/gClxvQ3APxFySc4YYAQx4oCPQ1QRMgCKgSqB6oC9kQYAwCBYGhR6Qh
QJUg9R17gXohqRHIAKYEoCAwFog0BKgSqB6oC2IIEFBuCFVcQsUwoUrsUCWd
UCXFUivvUCUXU6s8gQMKSzYyADHFODGlPQBkA8lD
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlM0KgkAUhaU2Ldu17iWibcsgEIweQMmkjYEm0dv4Qr5LIKgIUV/dGiTM
JpwDyvXOmeO5d36m3sHZDSzLike8HPe0iCL3vB7zsQnjfRD622V49AM/mntD
kpPX84hvv6DDAZd++CaS53lZlnVdX98gJkNeU6Sqqg7bjHaL8CN+SqYoijRN
kyRZvUFMhjyjcJqWPkREIcsy27ZnbSDPqOi0ikgVcFqnNyE6qi4lgj2p4puH
Dz9SlxSlROg8AVX/VBDAhM+spggrSED3NEVgwmcWc2U3qpayCpoiMFV7rSf6
ixhxYrAnRlbHyD4xsmNNnR1Tp9jIfdK01PNm+xcdthV0bvs7VDZhuw==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> 
               RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
               ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
              Directive[
                RGBColor[0.94118, 0.94118, 0.94118], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert table with two columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5800166344906378520; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with two columns"; 
                    DefinitionNotebookClient`TableInsert[2]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5800166344906378520]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Insert table with three columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    533841403879783297; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with three columns"; 
                    DefinitionNotebookClient`TableInsert[3]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    533841403879783297]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Add a row to the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4413051590217973467; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Add a row to the selected table"; 
                    DefinitionNotebookClient`TableRowInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4413051590217973467]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Sort the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    9150037060110806081; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Sort the selected table"; 
                    DefinitionNotebookClient`TableSort[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    9150037060110806081]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Merge selected tables\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2347719643166780208; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Merge selected tables"; 
                    DefinitionNotebookClient`TableMerge[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2347719643166780208]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               StyleBox[
                
                TemplateBox[{
                 "\"Cells\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3216557251994556740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> RGBColor[1., 1., 1.], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.33333, 0.33333, 0.33333], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.83333, 0.83333, 0.83333], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["

1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKtsSV+1ZfuH66ccf336FICAbKAIUB8oC
1QBVYjUEaD7EhAXNe96/+oI19IDiQFmIOXD3IBsC8QVQDcGIgJgDVI9mCDDE
IL7A5QY090D8BQlnuCHAkAcKAn1N0AQIAKoEqgfqQjYEGINAQWDoEWkIUCVQ
PVAXUC8kNQIZwJQAFATGApGGAFUC1QN1QQwBAsoNoYpL/lMvTKgSO1RJJ1RJ
sdTKO1TJxdQqT+CAwpKNDEAwIv4TV9oDAHfUai0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKptjVswo3764bd/ayUchCMgGigDFgbJA
NUCVWA0Bmg8xoTdr3dpJRzfPOomJgOJAWYg5cPcgGwLxBVANVu3ICGIOUD2a
IcAQg/gClxvQ3APxFySc4YYAQx4oCPQ1QRMgCKgSqB6oC9kQYAwCBYGhR6Qh
QJUg9R17gXohqRHIAKYEoCAwFog0BKgSqB6oC2IIEFBuCFVcQsUwoUrsUCWd
UCXFUivvUCUXU6s8gQMKSzYyADHFODGlPQBkA8lD
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlM0KgkAUhaU2Ldu17iWibcsgEIweQMmkjYEm0dv4Qr5LIKgIUV/dGiTM
JpwDyvXOmeO5d36m3sHZDSzLike8HPe0iCL3vB7zsQnjfRD622V49AM/mntD
kpPX84hvv6DDAZd++CaS53lZlnVdX98gJkNeU6Sqqg7bjHaL8CN+SqYoijRN
kyRZvUFMhjyjcJqWPkREIcsy27ZnbSDPqOi0ikgVcFqnNyE6qi4lgj2p4puH
Dz9SlxSlROg8AVX/VBDAhM+spggrSED3NEVgwmcWc2U3qpayCpoiMFV7rSf6
ixhxYrAnRlbHyD4xsmNNnR1Tp9jIfdK01PNm+xcdthV0bvs7VDZhuw==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> 
               RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
               ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
              Directive[
                RGBColor[0.94118, 0.94118, 0.94118], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Mark/unmark selected cells as comments\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3646530685697756512; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as comments"; 
                    DefinitionNotebookClient`CommentToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3646530685697756512]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as excluded\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1866935765212102190; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as excluded"; 
                    DefinitionNotebookClient`ExclusionToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1866935765212102190]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Insert comment\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8817953515714839566; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert comment"; 
                    DefinitionNotebookClient`CommentInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8817953515714839566]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               StyleBox[
                
                TemplateBox[{
                 "\"Documentation Tools\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3216557251994556740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> RGBColor[1., 1., 1.], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.33333, 0.33333, 0.33333], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.83333, 0.83333, 0.83333], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["

1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKtsSV+1ZfuH66ccf336FICAbKAIUB8oC
1QBVYjUEaD7EhAXNe96/+oI19IDiQFmIOXD3IBsC8QVQDcGIgJgDVI9mCDDE
IL7A5QY090D8BQlnuCHAkAcKAn1N0AQIAKoEqgfqQjYEGINAQWDoEWkIUCVQ
PVAXUC8kNQIZwJQAFATGApGGAFUC1QN1QQwBAsoNoYpL/lMvTKgSO1RJJ1RJ
sdTKO1TJxdQqT+CAwpKNDEAwIv4TV9oDAHfUai0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4ANlAJchNy8+3Lv6/OKOvT2Z6yAIyAaKAMWJMeTN67cb
Zx9riFyGCwFlgWrwGHL32pNJhZuAKptjVswo3764bd/ayUchCMgGigDFgbJA
NUCVWA0Bmg8xoTdr3dpJRzfPOomJgOJAWYg5cPcgGwLxBVANVu3ICGIOUD2a
IcAQg/gClxvQ3APxFySc4YYAQx4oCPQ1QRMgCKgSqB6oC9kQYAwCBYGhR6Qh
QJUg9R17gXohqRHIAKYEoCAwFog0BKgSqB6oC2IIEFBuCFVcQsUwoUrsUCWd
UCXFUivvUCUXU6s8gQMKSzYyADHFODGlPQBkA8lD
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlM0KgkAUhaU2Ldu17iWibcsgEIweQMmkjYEm0dv4Qr5LIKgIUV/dGiTM
JpwDyvXOmeO5d36m3sHZDSzLike8HPe0iCL3vB7zsQnjfRD622V49AM/mntD
kpPX84hvv6DDAZd++CaS53lZlnVdX98gJkNeU6Sqqg7bjHaL8CN+SqYoijRN
kyRZvUFMhjyjcJqWPkREIcsy27ZnbSDPqOi0ikgVcFqnNyE6qi4lgj2p4puH
Dz9SlxSlROg8AVX/VBDAhM+spggrSED3NEVgwmcWc2U3qpayCpoiMFV7rSf6
ixhxYrAnRlbHyD4xsmNNnR1Tp9jIfdK01PNm+xcdthV0bvs7VDZhuw==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> 
               RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
               ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
              Directive[
                RGBColor[0.94118, 0.94118, 0.94118], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Open Palette\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1266981032716546660; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "DocumentationTools"; 
                    DefinitionNotebookClient`$ClickedAction = "Open Palette"; 
                    PacletResource`DefinitionNotebook`OpenDocumentationTools[
                    ButtonNotebook[]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1266981032716546660]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"New Function Page\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7312678540702684447; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "DocumentationTools"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "New Function Page"; 
                    PacletResource`DefinitionNotebook`NewFunctionPage[
                    ButtonNotebook[]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7312678540702684447]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"New Guide Page\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8084030535806498779; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "DocumentationTools"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "New Guide Page"; 
                    PacletResource`DefinitionNotebook`NewGuidePage[
                    ButtonNotebook[]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8084030535806498779]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
          AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              RGBColor[0.94118, 0.94118, 0.94118]}}, 
          GridBoxFrame -> {
           "Columns" -> False, 
            "RowsIndexed" -> {1 -> RGBColor[0.94118, 0.94118, 0.94118]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.5}, 5}, "Rows" -> {{Automatic}}}, FrameStyle -> 
          GrayLevel[0.75]], "Grid"], ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{
                  Thickness[0.0025], {
                   FaceForm[{
                    RGBColor[0.96078, 0.50588, 0.19608], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{205., 22.66}, {205., 212.11}, {246.02, 235.8}, {
                    369.07, 306.84}, {369.07, 117.39}, {205., 22.66}}, {{
                    30.929, 306.84}, {153.98, 235.8}, {195., 212.11}, {195., 
                    22.66}, {30.929, 117.39}, {30.929, 306.84}}, {{200., 
                    410.23}, {364.07, 315.5}, {241.02, 244.46}, {200., 
                    220.77}, {158.98, 244.46}, {35.929, 315.5}, {200., 
                    410.23}}, CompressedData["
1:eJxTTMoPSmViYGCQAWIQ3fo6cIdcZ7nDwyqRde5/ix0YQCAgE8J3rXJIAwG5
TIc3QGWtwVUOs2YCwcMMOB+sfkMGXP3z3ys/Xso1h5uXL9R84NRDU4friwts
ud4XQ+TfmjgU2nJdX3wFwQebswONvyAGzgcpL9CNgZu3BGjc9cPRcPuqgdY9
7IqGu+dzX3CJSrgyxJ4TGQ6m7y1c3YuUHEDKqp5kOMi8fmQmxaAEUc+QCeeD
/SWN4Pcf+qoRY54J1w8LH5j5sPCD2R8E1P56YTncfWD5jeVw98P4MP+h8IH+
h/Fh4QMzDxZ+6PEFAOibv7E=
                    "]}]}, {
                   FaceForm[{
                    RGBColor[0.55294, 0.67451, 0.81176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{43., 198.67}, {107.71, 161.31}, {107.71, 
                    86.587}, {43., 123.95}, {43., 198.67}}}]}, {
                   FaceForm[{
                    RGBColor[0.31373, 0.4549, 0.61176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{182.78, 198.67}, {182.78, 123.95}, {118.06, 
                    86.587}, {118.06, 161.31}, {182.78, 198.67}}}]}, {
                   FaceForm[{
                    RGBColor[0.78039, 0.86275, 0.94902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{112.89, 245.}, {177.6, 207.64}, {112.89, 
                    170.27}, {48.174, 207.64}, {112.89, 245.}}}]}, {
                   FaceForm[{
                    RGBColor[0.6902, 0.58824, 0.81176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{130.03, 350.12}, {194.8, 312.72}, {194.8, 
                    237.93}, {130.03, 275.32}, {130.03, 350.12}}}]}, {
                   FaceForm[{
                    RGBColor[0.46275, 0.36078, 0.61176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{269.93, 350.12}, {269.93, 275.32}, {205.16, 
                    237.93}, {205.16, 312.72}, {269.93, 350.12}}}]}, {
                   FaceForm[{
                    RGBColor[0.88627, 0.80392, 0.95294], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{199.98, 396.48}, {264.75, 359.09}, {199.98, 
                    321.69}, {135.21, 359.09}, {199.98, 396.48}}}]}, {
                   FaceForm[{
                    RGBColor[0.66275, 0.80392, 0.56863], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{217.61, 199.14}, {281.9, 162.02}, {281.9, 
                    87.791}, {217.61, 124.91}, {217.61, 199.14}}}]}, {
                   FaceForm[{
                    RGBColor[0.43137, 0.60392, 0.3451], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{356.47, 199.14}, {356.47, 124.91}, {292.18, 
                    87.791}, {292.18, 162.02}, {356.47, 199.14}}}]}, {
                   FaceForm[{
                    RGBColor[0.8549, 0.9451, 0.8], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{287.04, 245.16}, {351.33, 208.04}, {287.04, 
                    170.93}, {222.75, 208.04}, {287.04, 245.16}}}]}, {
                   FaceForm[{
                    RGBColor[0.66275, 0.80392, 0.56863], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    356.47, 215.77}, {296.28, 250.59}, {356.47, 285.27}, {
                    356.47, 215.77}}}]}, {
                   FaceForm[{
                    RGBColor[0.66275, 0.80392, 0.56863], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    217.61, 114.06}, {277.79, 79.24}, {217.61, 44.566}, {
                    217.61, 114.06}}}]}, {
                   FaceForm[{
                    RGBColor[0.55294, 0.67451, 0.81176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    122.17, 78.363}, {182.42, 113.07}, {182.36, 43.614}, {
                    122.17, 78.363}}}]}, {
                   FaceForm[{
                    RGBColor[0.55294, 0.67451, 0.81176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    103.52, 249.47}, {43.272, 214.76}, {43.335, 284.22}, {
                    103.52, 249.47}}}]}, {
                   FaceForm[{
                    RGBColor[0.6902, 0.58824, 0.81176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    120.87, 350.62}, {120.8, 281.08}, {60.68, 315.87}, {
                    120.87, 350.62}}}]}, {
                   FaceForm[{
                    RGBColor[0.6902, 0.58824, 0.81176], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    278.37, 281.22}, {278.44, 350.75}, {338.56, 315.96}, {
                    278.37, 281.22}}}]}}, {
                 ImageSize -> {Automatic, 32}, 
                  ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.25], ImageSize -> 50, 
                  ImageSize -> {Automatic, 35}}], 
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    "\"Paclet Resource\"", FontFamily -> "Source Sans Pro", 
                    FontWeight -> "SemiBold", StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    GridBox[{{"\"DEFINITION NOTEBOOK\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]UNDER DEVELOPMENT\[VeryThinSpace]\
\[VeryThinSpace])\"", FontSize -> 10, FontColor -> GrayLevel[0.5], 
                    FontTracking -> "Plain", FontSlant -> "Plain", 
                    FontVariations -> {"CapsType" -> "Normal"}, 
                    PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], 
                    FontFamily -> "Source Sans Pro", FontTracking -> 
                    "SemiCondensed", 
                    FontVariations -> {"CapsType" -> "AllSmallCaps"}, 
                    StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "ColumnsIndexed" -> {
                    2 -> RGBColor[0.33333, 0.33333, 0.33333]}, 
                    "Rows" -> {{None}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Grid"], FontSize -> 24, FontColor -> 
                 RGBColor[0.33333, 0.33333, 0.33333], StripOnInput -> 
                 False]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", 
            TemplateBox[{
              StyleBox[
               TemplateBox[{
                "\"Paclet Repository\"", "\" \[RightGuillemet]  \""}, 
                "RowDefault"], "Text", FontColor -> 
               RGBColor[0.33333, 0.33333, 0.33333], StripOnInput -> False], 
              "https://resources.wolframcloud.com/PacletRepository"}, 
             "HyperlinkURL"]}, {
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{
                 TemplateBox[{"\"Open Sample\"", 
                   TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                  "RowDefault"], 
                 "\"View a completed sample definition notebook\""}, 
                "PrettyTooltipTemplate"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 1898445052439169298; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[1898445052439169298]]& ,
                "\"View a completed sample definition notebook\"", True}, 
              "OrangeButtonTemplate"], {
             "\"Basic\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3934291920460873112; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Open Sample"; 
                    DefinitionNotebookClient`$ClickedAction = "Basic"; 
                    PacletResource`DefinitionNotebook`ViewSamplePaclet[
                    "Basic"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3934291920460873112]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Advanced\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7566953809767785517; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Open Sample"; 
                    DefinitionNotebookClient`$ClickedAction = "Advanced"; 
                    PacletResource`DefinitionNotebook`ViewSamplePaclet[
                    "Advanced"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7566953809767785517]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            
            TemplateBox[{
              
              TemplateBox[{
               "\"Guidelines\"", 
                "\"View general guidelines for authoring paclets\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 5906117565281445171; (
                DefinitionNotebookClient`$ClickedButton = "Style Guidelines"; 
                DefinitionNotebookClient`ViewStyleGuidelines[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[5906117565281445171]]& , 
              "\"View general guidelines for authoring paclets\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              TemplateBox[{
                TagBox[
                 GridBox[{{"\"Tools\"", 
                    PaneSelectorBox[{False -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{5, 2.5}, {5, 7.5}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 12, 
                    PlotRangePadding -> 1.5], True -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 12, 
                    PlotRangePadding -> 1.5]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[0.05]]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
                "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"],
               Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 5074018684552945401; (
                DefinitionNotebookClient`$ClickedButton = "Tools"; 
                DefinitionNotebookClient`ToggleToolbar[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[5074018684552945401]]& , 
              "\"Toggle documentation toolbar\"", False}, 
             "OrangeButtonTemplate"], 
            TagBox[
             
             GridBox[{{"\"\"", "\"\""}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
              False, GridBoxDividers -> {
               "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
              RGBColor[1., 1., 1.]], "Grid"], 
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{
                 TemplateBox[{"\"Check\"", 
                   TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                  "RowDefault"], "\"Check notebook for potential errors\""}, 
                "PrettyTooltipTemplate"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 1898445052439169298; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[1898445052439169298]]& ,
                "\"Check notebook for potential errors\"", True}, 
              "OrangeButtonTemplate"], {
             "\"All\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8900916902137752067; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Check"; 
                    DefinitionNotebookClient`$ClickedAction = "All"; 
                    PacletResource`DefinitionNotebook`CheckPacletNotebook[
                    ButtonNotebook[], All]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8900916902137752067]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], Delimiter, "\"Definition Notebook\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4301941258590251066; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Check"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Definition Notebook"; 
                    PacletResource`DefinitionNotebook`CheckPacletNotebook[
                    ButtonNotebook[], "DefinitionNotebook"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4301941258590251066]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Paclet Files\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1312802444570235546; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Check"; 
                    DefinitionNotebookClient`$ClickedAction = "Paclet Files"; 
                    PacletResource`DefinitionNotebook`CheckPacletNotebook[
                    ButtonNotebook[], "PacletFiles"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1312802444570235546]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Documentation\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    6325522174070009817; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Check"; 
                    DefinitionNotebookClient`$ClickedAction = "Documentation"; 
                    PacletResource`DefinitionNotebook`CheckPacletNotebook[
                    ButtonNotebook[], "Documentation"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    6325522174070009817]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{"\"Build\"", 
                 TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                "RowDefault"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 1898445052439169298; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[1898445052439169298]]& ,
                "\"\"", True}, "OrangeButtonTemplate"], {
             "\"Documentation\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1579518736508902704; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Build"; 
                    DefinitionNotebookClient`$ClickedAction = "Documentation"; 
                    PacletResource`DefinitionNotebook`BuildPaclet[
                    ButtonNotebook[], "Documentation"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1579518736508902704]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"All\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5625167833203047250; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Build"; 
                    DefinitionNotebookClient`$ClickedAction = "All"; 
                    PacletResource`DefinitionNotebook`BuildPaclet[
                    ButtonNotebook[], All]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5625167833203047250]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{"\"Deploy\"", 
                 TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                "RowDefault"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 1898445052439169298; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[1898445052439169298]]& ,
                "\"\"", True}, "OrangeButtonTemplate"], {
             "\"Locally on this computer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8714502586816766511; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Locally on this computer"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "Local"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8714502586816766511]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Publicly in the cloud\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5593410685219912767; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Publicly in the cloud"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPublic"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5593410685219912767]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"In this session only\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2850084946728613817; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "In this session only"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "KernelSession"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2850084946728613817]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            
            ItemBox[
             StyleBox[
              DynamicBox[
               ToBoxes[
                CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
                StandardForm], Initialization :> (CurrentValue[
                  EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
                "")], "Text", 
              GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
             StripOnInput -> False], 
            DynamicBox[
             ToBoxes[
              If[
               CurrentValue[
                EvaluationNotebook[], {
                TaggingRules, "SubmissionReviewData", "Review"}, False], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit Update\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit changes to update your paclet submission\""}, 
                   "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    3196298050911436087; (
                    DefinitionNotebookClient`$ClickedButton = "SubmitUpdate"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepositoryUpdate[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   3196298050911436087]]& , 
                  "\"Submit changes to update your paclet submission\"", 
                  True}, "OrangeButtonTemplate"]], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit to Repository\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit your paclet to the Wolfram Language Paclet \
Repository\""}, "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    3704832848557640569; (
                    DefinitionNotebookClient`$ClickedButton = "Submit"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepository[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   3704832848557640569]]& , 
                  "\"Submit your paclet to the Wolfram Language Paclet \
Repository\"", True}, "OrangeButtonTemplate"]]], StandardForm], Evaluator -> 
             "System", SingleEvaluation -> True]}}, 
          GridBoxAlignment -> {
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
            "Rows" -> {{Center}}}, AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              RGBColor[1., 1., 1.], 
              RGBColor[0.33333, 0.33333, 0.33333]}}, 
          GridBoxFrame -> {
           "Columns" -> False, 
            "RowsIndexed" -> {
             1 -> RGBColor[1., 1., 1.], 2 -> 
              RGBColor[0.33333, 0.33333, 0.33333]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.9}, 5}, 
            "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 0.25}}, FrameStyle -> 
          RGBColor[1., 1., 1.]], "Grid"], 
        ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{
               Thickness[0.0025], {
                FaceForm[{
                  RGBColor[0.96078, 0.50588, 0.19608], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
                  1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{205., 
                  22.66}, {205., 212.11}, {246.02, 235.8}, {369.07, 306.84}, {
                  369.07, 117.39}, {205., 22.66}}, {{30.929, 306.84}, {153.98,
                   235.8}, {195., 212.11}, {195., 22.66}, {30.929, 117.39}, {
                  30.929, 306.84}}, {{200., 410.23}, {364.07, 315.5}, {241.02,
                   244.46}, {200., 220.77}, {158.98, 244.46}, {35.929, 
                  315.5}, {200., 410.23}}, CompressedData["
1:eJxTTMoPSmViYGCQAWIQ3fo6cIdcZ7nDwyqRde5/ix0YQCAgE8J3rXJIAwG5
TIc3QGWtwVUOs2YCwcMMOB+sfkMGXP3z3ys/Xso1h5uXL9R84NRDU4friwts
ud4XQ+TfmjgU2nJdX3wFwQebswONvyAGzgcpL9CNgZu3BGjc9cPRcPuqgdY9
7IqGu+dzX3CJSrgyxJ4TGQ6m7y1c3YuUHEDKqp5kOMi8fmQmxaAEUc+QCeeD
/SWN4Pcf+qoRY54J1w8LH5j5sPCD2R8E1P56YTncfWD5jeVw98P4MP+h8IH+
h/Fh4QMzDxZ+6PEFAOibv7E=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.55294, 0.67451, 0.81176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{43., 198.67}, {107.71, 161.31}, {107.71, 86.587}, {
                 43., 123.95}, {43., 198.67}}}]}, {
                FaceForm[{
                  RGBColor[0.31373, 0.4549, 0.61176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{182.78, 198.67}, {182.78, 123.95}, {118.06, 
                 86.587}, {118.06, 161.31}, {182.78, 198.67}}}]}, {
                FaceForm[{
                  RGBColor[0.78039, 0.86275, 0.94902], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{112.89, 245.}, {177.6, 207.64}, {112.89, 170.27}, {
                 48.174, 207.64}, {112.89, 245.}}}]}, {
                FaceForm[{
                  RGBColor[0.6902, 0.58824, 0.81176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{130.03, 350.12}, {194.8, 312.72}, {194.8, 237.93}, {
                 130.03, 275.32}, {130.03, 350.12}}}]}, {
                FaceForm[{
                  RGBColor[0.46275, 0.36078, 0.61176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{269.93, 350.12}, {269.93, 275.32}, {205.16, 
                 237.93}, {205.16, 312.72}, {269.93, 350.12}}}]}, {
                FaceForm[{
                  RGBColor[0.88627, 0.80392, 0.95294], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{199.98, 396.48}, {264.75, 359.09}, {199.98, 
                 321.69}, {135.21, 359.09}, {199.98, 396.48}}}]}, {
                FaceForm[{
                  RGBColor[0.66275, 0.80392, 0.56863], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{217.61, 199.14}, {281.9, 162.02}, {281.9, 87.791}, {
                 217.61, 124.91}, {217.61, 199.14}}}]}, {
                FaceForm[{
                  RGBColor[0.43137, 0.60392, 0.3451], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{356.47, 199.14}, {356.47, 124.91}, {292.18, 
                 87.791}, {292.18, 162.02}, {356.47, 199.14}}}]}, {
                FaceForm[{
                  RGBColor[0.8549, 0.9451, 0.8], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{287.04, 245.16}, {351.33, 208.04}, {287.04, 
                 170.93}, {222.75, 208.04}, {287.04, 245.16}}}]}, {
                FaceForm[{
                  RGBColor[0.66275, 0.80392, 0.56863], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{356.47,
                  215.77}, {296.28, 250.59}, {356.47, 285.27}, {356.47, 
                 215.77}}}]}, {
                FaceForm[{
                  RGBColor[0.66275, 0.80392, 0.56863], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{217.61,
                  114.06}, {277.79, 79.24}, {217.61, 44.566}, {217.61, 
                 114.06}}}]}, {
                FaceForm[{
                  RGBColor[0.55294, 0.67451, 0.81176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{122.17,
                  78.363}, {182.42, 113.07}, {182.36, 43.614}, {122.17, 
                 78.363}}}]}, {
                FaceForm[{
                  RGBColor[0.55294, 0.67451, 0.81176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{103.52,
                  249.47}, {43.272, 214.76}, {43.335, 284.22}, {103.52, 
                 249.47}}}]}, {
                FaceForm[{
                  RGBColor[0.6902, 0.58824, 0.81176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{120.87,
                  350.62}, {120.8, 281.08}, {60.68, 315.87}, {120.87, 
                 350.62}}}]}, {
                FaceForm[{
                  RGBColor[0.6902, 0.58824, 0.81176], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{278.37,
                  281.22}, {278.44, 350.75}, {338.56, 315.96}, {278.37, 
                 281.22}}}]}}, {
              ImageSize -> 12, ImageSize -> 50, 
               ImageSize -> {Automatic, 35}}], 
             "Wolfram Paclet Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentReplyIcon"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.076923], 
         FaceForm[{#, 
           Opacity[1.]}], 
         FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{1.5, 7.5}, {6.5, 11.5}, {
          6.5, 3.5}}}], 
         FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJw9U2tIVEEUvq5iVkttZmdfuo/ZbQukJGKVqPBLUTGJ0h9hVLIJRYhUVJj2
AjGRWCKiF0llZWRCSEnZExEJ06CotaiQyH7EIrthT3u6NXPn3jswnDlzzzlz
vu8711u9vWJzsqIoSXwv5tuk6IsgrQvOnLf+1CRC5ZKbg3WJAIJV90rNJoJF
XOR6sebI6W3pyXq8DxccIoGwa+uxj/v/McxNbTxZOJ3w4Rkb+ZVgWGk2ZbcQ
Yfm0V+07Jhm6St7vzVhI2JfBT78ZCkI8cj2hqe/xxaIJJm0PoWEssCgtzvCc
lzlYYwXP5iUYHpXlHV4xasXLeh4wyKCWX2fDqcJwbfQ+w4F83vGQDT1fJ1/U
dzJ842bsih1XB3hiI0NzrPyOq9mBPb1tjpyNDBXci5U7MVQnLhji4nMsE+9W
c6ARL3i3XSWbXNiiLi8EzPxbbqydsaD73LgHJ2wp/OiFoKVJ8Ui+Chha6M3T
H8NZUMPm+XB9p8h0QtATjvtxqUh0SBgV76QHZN+lszReA5pNQ66o1+8HV6O3
rdWCBIcTuKHxHJ4NQdO1sx4Nxxy4VYBug2dVt4lMnB/vGCi7TSgWz/504Etk
VbXlNSGkCmWHqFYbJXziYXlT7VKXEdLq2DDMwyvvksTZZ5W4OgiCjmCVFTUP
dh+3HSKJ8y9hqUogIfqn83PkCUndQoTLQsZ2gpperL3fQJLXIMEn5F5GaD3D
l50g2O3OIkhiCUf7v8/fMJOMuRPTmT2FjLlU+0ghY471+dV93epzr/sPPaJz
u3Ev65sNX/8//gP5Ei2u
          "]]}, AspectRatio -> Automatic, ImageSize -> {13., 13.}, 
        PlotRange -> {{0., 13.}, {0., 13.}}]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11], "\[SpanFromLeft]"}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9], 
            ItemBox[
             ButtonBox[
              TagBox[
               StyleBox[
                TemplateBox[{"\"Reply \[RightGuillemet]\"", 
                  StyleBox["\"Reply \[RightGuillemet]\"", "HyperlinkActive"], 
                  BaseStyle -> "Hyperlink"}, "MouseoverTemplate"], FontSize -> 
                9], 
               MouseAppearanceTag["LinkHand"]], BaseStyle -> "Hyperlink", 
              ButtonFunction :> (SelectionMove[
                 ParentCell[
                  EvaluationCell[]], After, Cell]; 
               DefinitionNotebookClient`CommentInsert[]), Evaluator -> 
              Automatic, Method -> "Queued"], Alignment -> Right]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
        ButtonBox[
         StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
          "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
          Dynamic[
            FEPrivate`If[
             CurrentValue[Enabled], 
             GrayLevel[1], 
             RGBColor[0.80294, 0.80294, 0.80294]], Evaluator -> "System"], 
          StripOnInput -> False], ButtonFunction :> 
         With[{RSNB`nb$ = ButtonNotebook[]}, 
           If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
             ProgressIndicator[Appearance -> "Necklace"]]; 
           With[{RSNB`$cp$ = $ContextPath}, 
             Quiet[
              
              Block[{$ContextPath = RSNB`$cp$, 
                ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                False, DefinitionNotebookClient`$ButtonCodeID = None}, 
               Internal`WithLocalSettings[
                DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                   ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                   "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                 Annotation[
                 DefinitionNotebookClient`$ButtonCodeID = 3145484069433207908; 
                  DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    #2[]]]], 
                  DefinitionNotebookClient`ButtonCodeID[3145484069433207908]],
                  DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
               Null]]]; 
           CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; 
           Null], FrameMargins -> {{5, 5}, {0, 0}}, 
         Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqAIJQygMsQf39/d3d3BwcHSxgAsoEiQHFiDAkJCXF2djbD
DYCyQDV4DAFaZG1tjccECACqQXYSsiFA84kxAW4O3D3IhuD3BVZ/oRkCdB5J
JkAAxFNwQ4AhT4YhQF3IhgBjkAxDgLqAeiGpEcgApgQyDAHqghgCyhoUG0IV
l1AxTKgSO1RJJ1RJsdTKO1TJxdQqT5CdREnJRgYgphgnprQHAMBNTEU=
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlM1Kw0AURoPduHTnui+hDgOSksW0GwMxWWSZYFqKkEJaiO4EX0J8AF9T
T7gahmjs0MxlWqbffHN67/zNy12yPguCYH/OV1K0i6Ypnu8v+JHV++2mrh5W
9aHaVM1NOUO8/P50/c9j4eIhsmkxBonj2BgThqH6Cfoo6C6QNE2jKLoaD0bx
/APhj7TWONW1zs3j9u71KXuXRh8FnVE8dko2BL4QlrdJm7295B+/Gzqjwunz
sSFSBZ4/p9tNOPgHENKTKsZyGOQjdUlRPYSVR6TqowRpOPEzy4awg4isniME
J35mMVdOIx1OAiK74AjB2ZWvlEC6qzEZ4iUTj2viZXe8nBMvJ9bX3fFyi329
J3ZKU162E8LlGXd57b8AKuPmMg==
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlD0OgkAQhYk2lnbW3sLW0lazDZ1G/KHAZDURr8AxuAANp6DmCJT2lPqZ
0Y0xChvZl2ges29fZmZnd7w6zDc9z/OOA/7my/NU6+VlMeRDRcf9NgrWs+gU
bAM9WfUJjp6/B7+1wUYDVDf8MonjOE3ToiiuL8CJELcx8X0/z/OGtFlF02Ci
ta6qikhd11mWJUmyewFOhDiraFB+NcFfHMqyDMPwa/nEWRUfk8+7iVSBprWT
4oP+w4SOSRW/cvjIR+qSPhsTOg+h6lYHAUr07Ho34QQhdM/SBCV6dsFlGiFM
AoRTsDRBiZ5dYvK4Gp1NnGTisCdOTsfJnCgXE6sc3R3l4habfDq+JwYdX7Y/
0JC2gc1rfweIxIKt
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True]}, Background -> 
         RGBColor[0.33333, 0.33333, 0.33333], Method -> "Queued", 
         ImageSize -> {All, 23}, Evaluator -> Automatic], FrameStyle -> 
        Directive[
          RGBColor[0.33333, 0.33333, 0.33333], 
          AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> False, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              RowBox[{
                AdjustmentBox[
                 TemplateBox[{
                   ActionMenuBox[
                    TagBox[
                    PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                    MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                    Method -> "Queued"], "\"View suggestions\""}, 
                  "PrettyTooltipTemplate"], BoxBaselineShift -> -0.5], 
                " "}]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -0.5}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.055556], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh8qXaoYcOfoO
m+a+X37stKZDTP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4Pw5RxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA/Dn+d
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.1753, 7.4169}, {
             7.7969, 11.308}, {7.7969, 13.38}, {10.12, 13.38}, {10.12, 
             11.308}, {9.7415, 7.4169}, {8.1753, 7.4169}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQFKDg+rRNa5P+RzKPOXE8vSVYTz8z+0ngxpVHCA
qBNwmPd++THv7/IO8q2vA3fICTpUvlQz5Hgj52DLdX1xga2QQxoYyDmcYLed
HTpfGM6/k8GQ3+giCue7M1dwq7wQg+vnmbyyKdBTAm6+tsTUK5wZknD7Pec2
qB1qk4K772Y8iCXtAHM/jP/bquBcxyUEfyJ/ldnqOmW4/qw9JZMlWFTg5tfa
m8bt6lSB23/2DAiowN0H48PcD+PD/AfTD/M/zHxY+MDsh4UfzH2w8EUPfwD5
N5G6
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["FormEditValuesButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TemplateBox[{
         TagBox[
          PaneBox[
           PaneSelectorBox[{False -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1: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
N3kqZvY=
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, PlotRange -> {{0, 50.}, {0, 50.}}],
              True -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1: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
DcvuuIyle//vxt/PCE6d
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, 
               PlotRange -> {{0, 50.}, {0, 50.}}]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], ImageSize -> {Automatic, 15}, ImageSizeAction -> 
           "ResizeToFit"], 
          MouseAppearanceTag["LinkHand"]], "\"Edit values\""}, 
        "PrettyTooltipTemplate"]& )}], 
   Cell[
    StyleData["FileManagerBMPIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{16.5, 2.}, {4.5, 2.}, {
            3.6719479999999995`, 2.0009000000000015`}, {3.0009040000000002`, 
            2.671949999999999}, {3., 3.5}, {3., 17.5}, {3.0009040000000002`, 
            18.328052}, {3.6719479999999995`, 18.999096}, {4.5, 19.}, {16.5, 
            19.}, {17.32805, 18.999096}, {17.9991, 18.328052}, {18., 17.5}, {
            18., 3.5}, {17.9991, 2.671949999999999}, {17.32805, 
            2.0009000000000015`}, {16.5, 2.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
            13.57129, 13.35693}, {12.979560000000001`, 13.357063}, {12.49995, 
            13.836817}, {12.49999, 14.42855}, {12.50003, 15.020283}, {
            12.97972, 15.499966}, {13.57145, 15.50001}, {14.16318, 
            15.500053999999999`}, {14.64294, 15.020443}, {14.643069999999998`,
             14.428709999999999`}, {14.64252, 13.837011}, {14.16299, 
            13.357481}, {13.57129, 13.35693}}}]}, 
          FaceForm[
           RGBColor[0.9451, 0.76471, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {
             1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQHaDhBaBUrLwflMqqxiB1xkHfqslzZ//a/swDGp
nC91hozDK6c1/ziMVRzk9CzfTbGTcXDybGQ1aFVxMD/16+yRJ9IO0/3DeMKv
qzj49F44f+W1tMOvuqw9JdaqDiElKtP/B8g4cF9fXGDbpepQ7sX++r+PosOa
7tsZDPlaDlpmz0qPFCo6LLn7ItluhZbDCuWG2UdXKzoc+zk7oOOClgPLpuu7
7d8pOqwFqb+v5dA0cbrpRgMlh7hMyZXf32g5ZBpWzPhWquTwQsBCKOOBloPc
wy0PXNcrOahcexTMsEfLQazH6xXLFhUHG6B36vM0HWb3ZzsfvaHmYPF5taXD
Bm2H0KxvDtoC6g4Nuutj8l9rO/yrWB81M0HdIUQimqOIQ8eh91rgVZaN6g7M
IHf803boWTgnI5xRw6HF+/ic9C/aDpogh3poOEREub2yPart8N/u8aHGAg2I
/+q1HSZyJXM73tOGuL9e1WGzZnjFdG4dhzh+taPH9VUdOIoCDvkA+TbZ22Mz
zqk42Knvza+5q+2w7MOCm6X1Kg5FdzRl16zXdhAo6wptNlBxOM+v3OIere3w
xJB56kdg/KDHJwAEHLkm
             "], {{8.415530000000002, 11.}, {12.638179999999998`, 11.}, {
             11.68506, 12.668}, {10.791059999999998`, 11.72708}, {10.62513, 
             11.553912}, {10.36001, 11.522025000000001`}, {10.15775, 
             11.65091}, {9.221229999999998, 12.254909999999999`}}}]}, 
          FaceForm[
           RGBColor[0.29412, 0.83922, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBWIQLa1/V4WNUd+BAQyUHE4vdN32+a8onN8kXsuaWSbq
0Dcp/LkEkB/vLrOp8YuIg1PC0wtK0koOK1Zbi92eIuLwJrN9v5q3ksNH/ugq
E1MRB5UzW/5qVys5HBENWLH8v7CDSnqiv/UeJai5IlBaGZXfYABXP0nJaM2j
hQZw8wQLOEKzDhnA7TsRva4u55YB3D2K9tI78z4ZwN173f9/5Of/Bmj+MXRA
9a+hQ4sCu+oZF324ei/5XQv2terDzcuMsRCYtFUfbl/LzG31qU/14e4pfOjg
IcZgAHcvxFwDuH9Q+ED/wtTDwgNmHiy8YPbBwhPmHlh4w9wLiw/0+AMALQSV
4A==
             "], {{5.996060000000001, 10.}, {15.00394, 10.}, {15.00394, 
             16.}, {5.996060000000001, 16.}}}]}, 
          FaceForm[
           RGBColor[0.7098, 0.80392, 0.87451]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0,
              2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
             0}}, {{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{
             0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQEiDhBawAGVr+Cwm1VIxP6ZBJyvW3ExfIKZlEPU
lJsKk3kUHNbt4rs6pUXaYdetrr+p2+UdTN5buLpPknF4tX098/M3cg56xw5Y
9eXLOszamGFlLSnnwPR3X/3nR7IOLM97NN6+lXGoSH+7jfusrANbyvry+j3S
DvZPZ+i8Oy/rkLYqISSIXdrhdFOnfdcsWQcfpitXNoVKOWQJq3+3NpF16Ftv
u1nlgKSDuxWzsv5pGYcaz+QtfVqSDg/fi29WtZZxWBTbOmX+FgmHrI+aDMcm
Szu8yWzfr5Yt4TDNuTvnebSMw6EPgoaqRhIOZ8/z+t7kBJqfY7eOd6u4Q+hH
t2cT62Ud5jg9Ny3jFHeI32r0cPovWYcgvy2rJwSJORTlCb+bainnsOOHCMPj
SlGHxcHhdqeN5Ryivu681TVXxOGVbF57m6ucA9eXThvPKGGHU1YysUtPyzo8
uaB0+6eckEMmMBRknso4OO1ZF7/BWtDBtPJU1q570g4cRQGHfKIFHDJWBHoY
dUs5PEh+6Sx+hd/B9HrmkqVGkvD4AQCmgKFd
             "], {{5.49393, 6.2940000000000005`}, {6.24061, 
             6.2940000000000005`}, {6.429096, 6.284750000000001}, {
             6.614185999999998, 6.34661}, {6.759240000000001, 
             6.467319999999999}, {6.890777, 6.587419999999998}, {6.962032, 
             6.759840000000002}, {6.953660000000001, 6.937759999999999}, {
             6.96995, 7.11698}, {6.9035910000000005`, 7.293840000000001}, {
             6.77343, 7.41811}, {6.613585999999999, 7.530479999999999}, {
             6.419682000000001, 7.58385}, {6.224849999999999, 7.56911}, {
             5.49393, 7.56911}}, {{5.49393, 5.8706}, {5.49393, 4.4308}, {6.31,
              4.4308}, {6.509734, 4.41999}, {6.705573, 4.48902}, {
             6.854379999999999, 4.62269}, {6.9925049999999995`, 
             4.761840000000003}, {7.065081999999999, 4.953080000000002}, {
             7.05406, 5.14884}, {7.08081, 5.3499}, {7.011307, 
             5.551820000000001}, {6.866472, 5.693819999999999}, {6.721637, 
             5.83582}, {6.518383999999999, 5.90132}, {6.317889999999999, 
             5.8706}}, {{9.131169999999997, 8.}, {10.356000000000002`, 
             4.736610000000001}, {11.5814, 8.}, {12.221939999999998`, 8.}, {
             12.221939999999998`, 4.}, {11.727999999999998`, 4.}, {
             11.727999999999998`, 5.557409999999999}, {11.774239999999999`, 
             7.238630000000002}, {10.544139999999999`, 4.}, {10.16581, 4.}, {
             8.937809999999999, 7.231200000000001}, {8.986680000000002, 
             5.557409999999999}, {8.986680000000002, 4.}, {8.492740000000001, 
             4.}, {8.492740000000001, 8.}}, {{13.799369999999998`, 
             5.566080000000001}, {13.799369999999998`, 4.}, {
             13.305440000000003`, 4.}, {13.305440000000003`, 8.}, {14.68744, 
             8.}, {15.04065, 8.0207}, {15.387580000000002`, 
             7.899980000000001}, {15.65166, 7.6644999999999985`}, {15.88797, 
             7.431630000000002}, {16.01454, 7.109539999999999}, {16., 
             6.778090000000002}, {16.02146, 6.443669999999999}, {15.8971, 
             6.116339999999999}, {15.659, 5.88053}, {15.38536, 
             5.655040000000001}, {15.03595, 5.542569999999998}, {14.68216, 
             5.566080000000001}}, {{13.799369999999998`, 5.9969}, {
             14.687369999999998`, 5.9969}, {14.908019999999999`, 
             5.982140000000001}, {15.12579, 6.053599999999999}, {
             15.294799999999999`, 6.1962199999999985`}, {15.44357, 
             6.350040000000002}, {15.520309999999998`, 6.559620000000001}, {
             15.50604, 6.7731400000000015`}, {15.516169999999999`, 6.98493}, {
             15.43995, 7.19177}, {15.294799999999999`, 7.34633}, {15.13914, 
             7.49474}, {14.93073, 7.57494}, {14.71574, 7.56917}, {
             13.799339999999999`, 7.56917}}}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerCDFIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}}}, {{{18., 17.5}, {18., 18.328427}, {
            17.328429999999997`, 19.}, {16.5, 19.}, {4.5, 19.}, {3.671573, 
            19.}, {3., 18.328427}, {3., 17.5}, {3., 3.5}, {3., 
            2.6715700000000027`}, {3.671573, 2.}, {4.5, 2.}, {16.5, 2.}, {
            17.328429999999997`, 2.}, {18., 2.6715700000000027`}, {18., 
            3.5}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 
             1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {{{5., 12.}, {5., 11.}, {2., 11.}, {2., 12.}}, {{2., 
             10.}, {2., 9.}, {5., 9.}, {5., 10.}}, {{2., 14.}, {2., 13.}, {5.,
              13.}, {5., 14.}}, {{2., 8.}, {2., 7.}, {5., 7.}, {5., 8.}}, {{
             2., 6.}, {2., 5.}, {5., 5.}, {5., 6.}}, {{5., 18.}, {2., 18.}, {
             2., 17.}, {5., 17.}, {5., 18.}}, {{5., 4.}, {2., 4.}, {2., 3.}, {
             5., 3.}, {5., 4.}}, {{2., 16.}, {2., 15.}, {5., 15.}, {5., 
             16.}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}}}, {{{17., 3.5}, {17., 
            3.223860000000002}, {16.776139999999998`, 3.}, {16.5, 3.}, {4.5, 
            3.}, {4.223858, 3.}, {4., 3.223860000000002}, {4., 3.5}, {4., 
            17.5}, {4., 17.776142}, {4.223858, 18.}, {4.5, 18.}, {16.5, 
            18.}, {16.776139999999998`, 18.}, {17., 17.776142}, {17., 
            17.5}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{
            1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 
            1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {{{11.76489, 10.215}, {11.80176, 10.266810000000001`}, {
             11.77555, 10.604633}, {11.58396, 10.907632000000001`}, {
             11.290009999999999`, 11.076163999999999`}, {10.99606, 
             11.244695}, {10.63778, 11.256947000000002`}, {10.333, 
             11.10889}, {11.05187, 11.20557}, {11.479730000000002`, 
             9.99811}, {10.727409999999999`, 9.33197}, {11.149809999999999`, 
             9.52223}, {11.50957, 9.82843}, {11.76489, 10.215}}, {{8.1958, 
             10.303830000000001`}, {8.202184, 9.241180000000002}, {
             8.904717999999999, 8.30847}, {9.924319999999998, 8.009}, {
             10.0459, 7.98489}, {11.0395, 8.27055}, {11.746269999999997`, 
             9.149949999999999}, {11.81152, 10.181730000000002`}, {11.44906, 
             9.569830000000001}, {10.80329, 9.1811}, {10.0929, 
             9.147189999999998}, {9.307032000000001, 9.191650000000001}, {
             8.59527, 9.625599999999999}, {8.1958, 10.303830000000001`}}, {{
             9.91321, 7.952940000000002}, {7.39209, 8.45477}, {7.04614, 
             13.89722}, {12.13989, 14.18054}, {11.451440000000002`, 
             14.616627999999999`}, {10.66164, 14.866693}, {9.84766, 
             14.90631}, {9.270579, 14.904569}, {8.706776999999999, 
             14.732987000000001`}, {8.22656, 14.41296}, {5.411620000000001, 
             12.47095}, {6.03, 7.93628}, {9.538089999999999, 7.93628}, {
             9.65967, 7.93628}, {9.784709999999999, 7.941830000000001}, {
             9.91321, 7.952940000000002}}, {{9.29089, 10.69141}, {9.25389, 
             10.639469999999998`}, {9.280137, 10.301669000000002`}, {9.471731,
              9.998700000000001}, {9.765674, 9.83019}, {10.05962, 
             9.661680000000002}, {10.417869999999999`, 9.649429999999999}, {
             10.72264, 9.797469999999999}, {10.00376, 9.7006}, {
             9.575790000000001, 10.908}, {10.3281, 11.574259999999999`}, {
             9.905787000000002, 11.384055}, {9.546119, 11.077912999999999`}, {
             9.29089, 10.69141}}, {{12.77489, 10.73059}, {12.771159999999998`,
              11.738362}, {12.10084, 12.621973}, {11.131339999999998`, 
             12.897090000000002`}, {11.009269999999999`, 
             12.921389999999999`}, {10.0158, 12.635689000000001`}, {9.309201, 
             11.756293000000001`}, {9.244139999999998, 10.72461}, {9.606552, 
             11.33644}, {10.25222, 11.725138000000001`}, {10.962520000000001`,
              11.759090000000002`}, {11.69498, 11.721043000000002`}, {
             12.366620000000001`, 11.339892}, {12.774899999999999`, 
             10.73059}}, {{11.51758, 12.969909999999999`}, {11.396, 
             12.969909999999999`}, {11.270959999999999`, 12.964357}, {
             11.14246, 12.95325}, {13.66357, 12.45142}, {13.741819999999997`, 
             7.11825}, {8.91577, 6.725830000000002}, {9.60423, 
             6.2897500000000015`}, {10.39402, 6.03966}, {11.207999999999998`, 
             6.}, {11.78508, 6.001780000000002}, {12.348869999999998`, 
             6.17338}, {12.82909, 6.493409999999999}, {15.644409999999999`, 
             8.435419999999999}, {15.025630000000001`, 12.969909999999999`}, {
             11.51758, 12.969909999999999`}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerCSSIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
              1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, {CompressedData["
1:eJxdk3tMUwcUxmtZNl0M0Mel5T56wcyCDxwzSLvSlW9EGUKlDogymTY8hrjI
FHFs0SCyDIaADtRBZMjDuDpgbRgspLRDIqIgGW0zqnF00IVNRjMU0slkQ2B3
y/CPneTk5PfPSb7vOyc440jSO3wej6fk+p+5yLsameclYD7PUMVmKVZYe+By
JiIlOPN58h3eTwTae6cb1N8R+CFa5/P8qwG43ki+PJYlRgW/cJ3OG4B9WVFu
XZgIRiL3XH6FBI9J6/a5SCHaBqdOv1Qvhbb5d9J6VYDXmg4PEdcDse/+iG+R
UYA6e7dr7gqJoZsxxkMNAvR8knAuqoTCqDIjTPNAgNiYNNsXShql5XlL8uNC
tL9574h8koa0w3I3f6sIbwmbDDW7GGR5hyMVcjGCT/Ys/LyfQXxvIaMMIXDr
imc6azf7jOXuw/mZKhZxlmzvcJcIihuKXY2XZXDsnKH0aULc/fXdTX/UMsgO
nEiV7BVAGxF3I7mMxqmWRgVxyB8flGhSb8sptOeoogJ/9MNzmuhKf04P79/y
x1bafhCMFGZR54G1D/wwa0grKPs0AJOdar9HJn+Uk9qbs9UEHl30vbf8pwD2
+rkNA8fFMHgLPh75SIRjbPc2z6QIX95OUJxJJ/7bK0bO5jpbYqzkGY/ufsXm
7pdCNsF2PZ4XofSr9+bqxSSeLivT+5RiVHJ2iTMonHg6boi2iuG8lRtxupbG
X/Y6tmgDgUFda6GqgUHt6pTloAkCql+yzauKZDh/akF11MblWaFbFS5jofB5
uyrMKkH8luXgxS4WXzOV90McUixMOT+z84OwduaYwO1Z0R8E/Z7Q7xe1FGLX
v8+vWx2E8PSITa5rNJRtmr1p1SweWtfNu1sZqL0v+Ng537cXa6pDWmQoXVqz
Zc9FBs2W7nmXhoXT2HBhXEHjLL416bn8Npo2LpgGSUxJq3rGuXxXeHrziWv8
RAbmJ0fv5A1QQFxAePFvNGZto7kSC40c00hcwg4aNWt6nfaTDCbVmfqOZgpl
6p2WbKEM/QVPeGMDJFSh6YaHehkKO4fPejg9SYnftFUlyVASqnfE9Ekx5Ztx
8MX9MvSVJxtLWiRo5c6hxcFgorVjppwnwYcp2153jtHwxKam9HP/0U9demOp
iULNkEuQ6CIwFH8hyRFG4v//9jeFT3Hb
             "], CompressedData["
1:eJxdVGlQU1cUjtRRRAsJSyAkeXnv5UXEBRAELFT6iRSwg0QRRREEMyguCClY
QKUsLTXUEYG61G2wiFQLKorgiBsuuEWMoGg0kYhSKBVEZFNQoI8u/uiduXPm
3Jlzzne+851LKeKCVhpxOJxg9o5Yn9gtws4nDALcf5wded0ajwqVs0yiGYz+
dNAiLMAGg894VsVtUjgnTaMk5TbYlOWbxF0nxd9x/TagBfExs7ppDHQZtRe6
CLDyedu68O9o4MbTiswDAhgdlPgaS2jkpr73UDrYYsRoGikEujWbvP7JFpPO
OXxovEDhTHPY1pLJQniZaAuVFyl4U0amBWohfM90D9afpRDcVLS/Ol0E+c5M
H52BwnZFZdFDJzGq5iz4Rc7Q6HEv4I46IgZVvet0UiIN/q76catpAhdjeTZt
ehrHRKFRnhEErp4Pq07yliIosLwkN4iA47sZdo5lUgwtu709O5LATd66N/Yk
A4fPOnaa8gnoqsruH97AYKt9no/j92IcO/44IrGKwctlLRuWtovwlTbg0pMW
BjV1TW/dxCIoR4A/Z+DrF99vNleIV53aqGyd7KNvvGhtH/QyiNpeuNmSIrBZ
AmIuyZB1zgxru0WYahqd6qqSIbk0dG9niRgEf+287kAZ/PvnVsijCSTK2ZdB
Bi0+503shwmU8bK0vfsZBJnVtZoqJLgh3Os35MTiy/vCJlkjweOsSFHYOSne
39DmLzUiP/bP+fuQiD3uaK7bR8N0fMWvG8eSmJl6dIaij8I2K9c9Wwok//ZP
wStk2amqGgIr5J4fXEdRYDL9hH4TCMjUhiBNFQlNx+1r3q9EWK+2MjRfJSHK
SA6vuixEoLWi1+8yCYVVXBRRaYt0bbRmoIfE7j+uNCw9L0Dhktg1rsEUnPNn
zxkeLUDGmP0eOToKIraNSNIGC06PDc3YSEMjTXPqTLGGfgQPI0W+b+jkODtr
NIyvMfnykBRn/7yXeriVj1QPwmW+gMEJb7W8+Fs+Do3kz2RQ/nprY1qbFQw7
VD+EXmNgmN0eUJBghV69NiOBnd+YB04pPjWWKJhUa9f1OwMP3UzFNMISDXcX
iuObGMQ/hz9faYGTmunk5osM2gsXhnjdMcdLL85v81IYTFXxn2hCzPH25uaH
aoYBE+7Sv0rPw9g9/aapLP+37io/8TrIAyFkiZFLEfr4gWnacR5axEda/R/R
cAve1u1ewMOaUi9iYDmNWt16631tPIRQzXYPh1i9F5mFz08zh73UgZNdTCEl
O/zQpvEWiNDEhLRupv7RkcECLzynt11Pp1CvcjgaV2mJ9PbejhwV+dG3j6j1
NtpCoix+dd6rpxbwdy5JOltE4t1CdsFGW+Ba76SwnBckdjo96CsNMMfAaYk9
LaVwLGHCreU5PHR4CLvupbD7esl/9Z1+Lnp/btihaqagKW3hXDnAxbSJbhLt
YhqHi7oSM124yI8c/ib2Pg2OcUvrm/dmyL3KFpD/pz8uVg3Vua8ZkCJ3XFX9
Pb0ZYpI3FU0tZGBpwlMaL+KCqfyg6pkig/N8wbCXlIchf55gcYEMBEubwzMe
nKtPOcQ2yaCWTPj87ZA5lhx1vetpkKFsZN5TLKG8/fWRDY1sfDy/r7zJEhXB
hu1KtQyRzbW0fq8V8lawwsyXwfvCiYiTnnzk1e5OsI+VgZb0xCxu4GNidp1H
8WQZLr+piN4dZY3//5d/AbYWNr4=
             "], CompressedData["
1:eJxdlAtMU2cUx0uV1xDa8iiUtpeH0nt7L7IKkyJu+Ee7ollxgiiKOpBUp8YB
jhHRuOFjTkEUfKGIlPEGRUHCDAiCPHSohangxkBFBRUFBKcwGQhrp3PJvuTL
l5N8OTnn//+d4xQeGbiGzWKxgnRX/x7QTo2TXWIwt+psaMlsPryo1Xn9SQyM
Iu42Lb7Lh08il/hKxSALGY2H1bbw1f8bpaGSx/uGXbbFYFaxY9NeGj0rHn+z
XGWH4nOfBUWa0+Bf4e8Uldmh6Wnp8bZEKRQRPwgHR+yg+nzZQwMbKe749qky
PQRw3zzdySGHgom6eHPcSQEm+vwSGkEh+btR7yg3ewQsLDudzKaw0PPRBwOH
7HE1qLYg5x6J1pRo6VlaCAOr8hh5J4m5TmyLzGtC9JtXy1LbSQR15aY1bBdB
SF8ZSWNROBBekXtbJkbVwS3dHCWFV/JMrkG+GGkeWWXy4xT4R1tN1zkT8Elb
knH6DYUiUYh6diiBS6a7TbzUUgTq6wgk4D7p6IuBFinGV1w9sD+MQH3o4ZnP
fGm4zXp+xIJPoM28g78mhUaC9KDiw11iFIyycjwf0Him16dPBKVLDPuECQPt
za4/PcUidMqrh7VsBkq/r0c4C4To9WEV+o/9FxtmH/I2eMNA1PvQ095RhK66
Hcmu9xnsvcDBhpciSFcm1Q0VMIgtDkkdPC1GYZX4QVkUA/WpsKDALwlEpytD
aAcGRH7PfLcJAk7GLtqyizQCOTd7LMIdULe+dl91oK6+g3PsYpsd0CwIaBfe
kWL0ym+a5WzH9/2z/jmOKMkXj5+oorC9VBoca+yI8lN9lc52FKLUxMiuTId3
/ZPwCV5xrkZLwPZF+vEhZxLTvvcT+k0hsPhGv8v+BxI0P79aP7dfhI6a0ls5
3RKIdsSuqrkkxNhoopnxQwnCbSLVRIU9XsZ/vOACn0TKk9q7yysFyMhLOTMU
Q8Jd4ztvYrIAW47te71wjIQo1W88zNEOpks2DCONQrMO68Fttm/rUUqh0ckQ
Sdoip/v2LKMGKVpPPBbn9/Cxda9yM3c2De3L+8+LvuXjR33+XBplAwn343pt
sLs3oJx4RMMuR7AvL9oG5d3li711/jnr+9FaY+2McyPlRgy8273CpxPWyPz1
owEvQwZLZXShVZQVgiVjgXM6aZT6SgSzrlviSSLVb66h4bqH/3tzsCU0DkqT
JCWNaas8RtZ28BC7Ndd1nk7/xqaoST4ZPERu60912SRFSFuLRdwZHv645R/O
fU3BPjsmaGYmD17uSWO12yno7TjWy8OpnQEL0h11vOdyVi2Ks8TR+VnHArQk
FIxMHWNmhU/0fKeT0E/rxntWyFdYXkzM0s3THreCyAprrI43PuJfKHkfV9RV
rmzIl7zV844VuGY/5W35WQJrw78UmslW0OPpP5nEEVnLcLHKEu2LZjR3KkgU
RU9p/CKJh2v2Q9z9GhLnq+evuz7ChV6eT411/hQ/ZtWe5KJcq1sQsRQ2zrvs
FefBRfayiPUzX1FozNWRNcrBm9bYp5JN//LHRWmWUYtMRCPZtKb1lw4OrG8o
2gYbaMgqSY7ZEi6KQ0uE5/0ZuC8STPhM5SF+oKHItp4Be/hmIdPJg6p+kDfD
0BVnI4ZOvhq3fJfXFaV6vxlrJDSWJMjZruDXTiwt7bKGjsoweR8Dald29+1U
G/x/X/4Nxp4vbg==
             "]}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerDirectoryIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJRIGZigAEFBwht4IDCb0Dwg3h/2248ZuDgafrm+xEp
eai4IZSWQ+OzwPkFU9UFyk4xoskzwM2D8VHtg/IZeOD8Bv7pMuWnONHM40Cz
D8pvMITzBeRyZTYeM0RTbwQ3D8ZHtQ/G14fzl0h9q07q1UczzwDNPgMHABhL
Lgc=
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}}}, {{{16.75, 4.}, {3.25, 4.}, {3.111929, 4.}, {3., 
            4.111930000000001}, {3., 4.25}, {3., 13.}, {17., 13.}, {17., 
            4.25}, {17., 4.111930000000001}, {16.88807, 4.}, {16.75, 4.}}}]}, 
          
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}}, {{{17., 14.}, {3., 14.}, {
            3., 15.75}, {3., 15.888071}, {3.111929, 16.}, {3.25, 16.}, {6.75, 
            16.}, {6.888071, 16.}, {7., 15.888071}, {7., 15.75}, {7., 15.}, {
            16.75, 15.}, {16.88807, 15.}, {17., 14.888071}, {17., 14.75}}}]}, 
          
          FaceForm[
           GrayLevel[0.89804]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerEmptyDirectoryIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIxIGZigAMHMNlg4IDCZ+CB8xv4p8uUn+J0KJiqLlB2
ihEqzgGlWVD5cHM4HATkcmU2HjNAU28INw/GR7UPxteH85dIfatO6tVHM88A
zT4YrYCd34DgB/H+tgWZ42n65vsRKXk0e+XQ+CxwPqr/YfIMcPNgfJh9ANTj
LzA=
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJRIGZigAEZBwitB6Eb9OF8AblcmY3H9FHlGQwcgnh/
2248pgvnQ/Sh8RkE4fwHh1WPzy0SQDNPAM0+KJ+BC87fcUqYw/opB5o8B9w8
GB/VPg40czmg7tVHMw/mTi40vjScv0TqW3VSrzSavAzcPBgfZh8Ae5IxSw==

            "]]}, 
          FaceForm[
           GrayLevel[0.89804]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJxIGYCYt1Nc98vTzNyYAADHYfN1Z82BKwWhfPvbm2p
ubBZBM633HKibN99YYfGqc7dOcu1HTq+3L7euFnYQXFDUcZEXW2HzTyFa7pv
czikSj6KEN/O4/C99MEcwaUcDhXcKhp1PdwO6VefZ2l/43C4og1SweWgeVrg
+K4dnA79Tz7JX8rndHhzwFLZq5rLwXNug9qhNg6HOO8T7LazuaH2czhccLnx
4cspHjg/Y+LbGvupBnB+7vPfKz9eQvD5QB5kN3To/pv6/Ukip4MxCAgbOsx+
Jrv8hQe3w4/gx0tnPzFyuO/fOz3vkpaDKhvQZ6+NHF6qGXKskdF2eFglss79
oZGDS3fO89+Z2g6aMf2Hvp4wclhSYMt1fbG2QyGI2mDkAHKG6T1tB5D27h5E
eKKHLwDeAYl+
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJxIGYC4uKMiW9r9hs6aMb0H/qaoenQLnbz3HdjA4fl
lcc1rS4JOJROlmAJ0zNwSK6/aVsZIQCRFzZwYAADAQeX7pznv1/qw/mTTtd7
7P8rCOcfcVqbeW8jgs+9dVnl8UxBhyD1BZ0bFAUcZpXPWaRsKeigsvNP+5do
AQctK6AJHIIOX70i2yymCTj4JQlEWH4RcLjHxNkl/1jA4W/7l9vXGQUdgLLX
juoKOsjUJBqFGog7XF9cYMs1XdPh6+3rjcVu4hB3XtZ0sEh3yczfIA61X8th
4/4382x0JOD83ul5Qs0NhnD+r7qsPSWTEXyh5gOnFi41dDhZtm++1HtNB5B3
V240dAjaIdf6+qKmw+mFrts+7zV0uP0TqHGLpkOnY8LTC4cMIeHWp+mAHr4A
Ca2MUA==
            "]]}, 
          FaceForm[
           GrayLevel[1.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerGIFIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{16.5, 2.}, {4.5, 2.}, {
            3.6719479999999995`, 2.0009000000000015`}, {3.0009040000000002`, 
            2.671949999999999}, {3., 3.5}, {3., 17.5}, {3.0009040000000002`, 
            18.328052}, {3.6719479999999995`, 18.999096}, {4.5, 19.}, {16.5, 
            19.}, {17.32805, 18.999096}, {17.9991, 18.328052}, {18., 17.5}, {
            18., 3.5}, {17.9991, 2.671949999999999}, {17.32805, 
            2.0009000000000015`}, {16.5, 2.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
            13.57129, 13.35693}, {12.979560000000001`, 13.357063}, {12.49995, 
            13.836817}, {12.49999, 14.42855}, {12.50003, 15.020283}, {
            12.97972, 15.499966}, {13.57145, 15.50001}, {14.16318, 
            15.500053999999999`}, {14.64294, 15.020443}, {14.643069999999998`,
             14.428709999999999`}, {14.64252, 13.837011}, {14.16299, 
            13.357481}, {13.57129, 13.35693}}}]}, 
          FaceForm[
           RGBColor[0.9451, 0.76471, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {
             1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQHaDhBaBUrLwflMqqxiB1xkHfqslzZ//a/swDGp
nC91hozDK6c1/ziMVRzk9CzfTbGTcXDybGQ1aFVxMD/16+yRJ9IO0/3DeMKv
qzj49F44f+W1tMOvuqw9JdaqDiElKtP/B8g4cF9fXGDbpepQ7sX++r+PosOa
7tsZDPlaDlpmz0qPFCo6LLn7ItluhZbDCuWG2UdXKzoc+zk7oOOClgPLpuu7
7d8pOqwFqb+v5dA0cbrpRgMlh7hMyZXf32g5ZBpWzPhWquTwQsBCKOOBloPc
wy0PXNcrOahcexTMsEfLQazH6xXLFhUHG6B36vM0HWb3ZzsfvaHmYPF5taXD
Bm2H0KxvDtoC6g4Nuutj8l9rO/yrWB81M0HdIUQimqOIQ8eh91rgVZaN6g7M
IHf803boWTgnI5xRw6HF+/ic9C/aDpogh3poOEREub2yPart8N/u8aHGAg2I
/+q1HSZyJXM73tOGuL9e1WGzZnjFdG4dhzh+taPH9VUdOIoCDvkA+TbZ22Mz
zqk42Knvza+5q+2w7MOCm6X1Kg5FdzRl16zXdhAo6wptNlBxOM+v3OIere3w
xJB56kdg/KDHJwAEHLkm
             "], {{8.415530000000002, 11.}, {12.638179999999998`, 11.}, {
             11.68506, 12.668}, {10.791059999999998`, 11.72708}, {10.62513, 
             11.553912}, {10.36001, 11.522025000000001`}, {10.15775, 
             11.65091}, {9.221229999999998, 12.254909999999999`}}}]}, 
          FaceForm[
           RGBColor[0.29412, 0.83922, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBWIQLa1/V4WNUd+BAQyUHE4vdN32+a8onN8kXsuaWSbq
0Dcp/LkEkB/vLrOp8YuIg1PC0wtK0koOK1Zbi92eIuLwJrN9v5q3ksNH/ugq
E1MRB5UzW/5qVys5HBENWLH8v7CDSnqiv/UeJai5IlBaGZXfYABXP0nJaM2j
hQZw8wQLOEKzDhnA7TsRva4u55YB3D2K9tI78z4ZwN173f9/5Of/Bmj+MXRA
9a+hQ4sCu+oZF324ei/5XQv2terDzcuMsRCYtFUfbl/LzG31qU/14e4pfOjg
IcZgAHcvxFwDuH9Q+ED/wtTDwgNmHiy8YPbBwhPmHlh4w9wLiw/0+AMALQSV
4A==
             "], {{5.996060000000001, 10.}, {15.00394, 10.}, {15.00394, 
             16.}, {5.996060000000001, 16.}}}]}, 
          FaceForm[
           RGBColor[0.7098, 0.80392, 0.87451]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}}, {CompressedData["
1:eJxlkmtMUwcUxy+Cz20t7eU+2t57C04DZAkGZUWdYf9NpIjxscocoqKiEEtQ
OiQyIgpzW8IcakDdCji0WkGgIZEMQWVgREBBeUatU5GHgHagGErRCnYwIvuw
Dycnv5zz4ZzzOx6RcZqoaQRBLB6PiWz1N7g69SkRbKrJJ74joWxxORy2Uwlj
3cvd9jYpMpffuFPwh4A5EVbKuFGKcHObKGWAR9BEPyvFdHmsZZmdw5WMpKfi
Wgnuq2q6z9oVcK8qe96UK8GLE6J7jjdyxBy68JYwShBpj1iu65eh3v/hI/14
fcQj7rK9k0VYjSJL3S7BY2/e5BhisC9k5t+OzVKkLvLdkkYxuGb0DVfflWJ3
z3zH8a00LLNXLTuTTiLH3RJAPKcw917XeiLWDaWVwbsatBS6dL3f7N1GYaxL
c/KSFwXdrW/zE3Q0Sl4e7kj5hELsxDw/MlMcxpS1ELksdty56Z4oodD66fG4
S0vkeNW6OtJVT6FXPCN3f5MCaaWv3YhzNA4OZM13msPDW/xBad5lBrrGtNZ2
dwER+6NXpi6VIU+8Zd2TEmFy7xtyNG+vrCByBNSyYXWvnDkEekwTGQoFKBpH
Y0TgsaFi/IBrBfzrQy0g29llr1XPwy3ztoX3USKkZ2BWfg+HblNa9rNqJcK/
9yja9FiB9/4ift8B2xU5/Ks/ej3qKkwx+Ve8T81dfnIeDYeynI6cvK0cCsnm
QLOOR/SZhe8O1MpRvGf4lDWAh8GQcuiXUhl0bafHgr/i4bXPTzRcxOLC0qfR
5Z0cWrpHVGNvGFxPTnKySTj0+dYvWqBmwLb3zK0kFUjUVm/XDtIwbQvVeHbI
sKYlY/M7ZwYfen9eYCtgp1g178VFq4HBjLOeUZohGs3pK9oeaGnMs0w/3RvK
YNfK1OxwFQWzOr84mWahm/V1jA1uaFR4/pTUxMIr+k+2XksiqqjB26lTBvvB
mIqEISksJXpz8qgcRz87/8OwQwrT27ovE/QKZDakBFeNSeES//PHYj8OxX3G
kSNiEr8GJHxxoIHDmoXxtM2PhHnQGrIxiIe9XBWavp6E+DcuMaRs3M+zilqf
DBJrM4uzkkkBQceePLT2/ce3z5cX9l+lJ//9gfx/HDhYdbKfZad8ved/AFKJ
jN4=
             "], {{9.72359, 4.45312}, {9.264159999999999, 4.45312}, {
             9.264159999999999, 7.6084}, {9.72363, 7.6084}}, {{
             12.973590000000002`, 5.846680000000001}, {11.51221, 
             5.846680000000001}, {11.51221, 4.45312}, {11.05321, 4.45312}, {
             11.05321, 7.6084}, {13.21044, 7.6084}, {13.21044, 
             7.268550000000001}, {11.51221, 7.268550000000001}, {11.51221, 
             6.186549999999999}, {12.973630000000002`, 6.186549999999999}}}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerHTMLIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           FilledCurveBox[CompressedData["
1:eJy9VNEOgCAIxOhH+qU+wcde+v+3XG2tDkF06kabhsBxp2zx3CMTUUjfsRDd
65UD/yy5YQt/PC6Zx2ky6q1il4Pw7+FaJE+s5MHZXbYuJMz2ooG3OZGw25gH
GJC5Wb4uNiitv7qUw5BvHAwNVRGA7YIbqzU4QS//A9dwNtxb7cl0FNQvjba1
h3BxtoxAbktjs+oZkhPYrmpQ2gUPPRDZ
            "], CompressedData["
1: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
OX5uqqxh3pfIbFkbWfEr9saihrX5vcNPPDxXg/NbKJ0zUx0NLyWgBPN7erTs
f5TXKxbL3fdyUSs2S9yorqGmK/fMXS6u/9Up8iaG0jb/LfVYs+JRg8Bdl6Eh
McOLXZt5vXFI1gNdgjU86u+3qVIZK0oxHFUP0TDeUu3Y+1pcf/eCr6mlNSzK
M2Hcec7nldr9Sh4to6HRMHV940FWfNu8oVD2CpyvmL3Xekyz4sChMgO+8Hs6
fMjuFTvdirl+zsVT+D7IVyn6/nyuh/n1Fq+nHbZe7Ra90oqs5Q+rdfn7oVmO
jl69y4qtd690qMz32b97Usr3O63Yfe5FzJxiGopYDjdWlnL8b171GZKb4/2t
pF+KeVYMTXN37/xADVrw7WKRk6x4/eVt9DdvzROXrRjxZYjPpy8qKvIxa/tZ
0WxvlXRJX6l4JNuR+y9gf0LOyo9VnJs8Cfu5X053W91zS7yK7w56oLpWqNMn
Lhh1T0VEgO/86KpWzFLpgO6oqPl95eD4Qlbsp7s/d12FIs/PbUWhGwxkV1Sk
a5m2jE8OKyIJYwaeVvGrMB0px/9a5apP35xS8cD/yN9w+rPEXBdH7DumonnE
0EE9vf/ZxWTheVlxKuLdn76HVJwRx/Tbgu7jJz/5SPvZpsxPRvyh/5R1vUfF
qU6Fhu7i7/V5jlFh8isde/eLBTnOZjy5d7eKNbM2fqmQ1IrZf6cM/rlORRjh
2xl/qxE31qroHFMxpHw5Kx4/GTxm2RQVjAKtv5W3AotPTV8xQDXWK+21+XZm
fNJVxd1nsZ9HZrbi6sQKV281VHG4ddjsE24rMq/blXJnqGrML6/r+KUqn78i
DL5cXxP8C88ZXUbFnEIVX60J5ffuLlJ3YkEV15d3DfGmv5lQtED0L1XFQU7X
rZZcr7OJrGgP9fXO1HWsFV127skfQrv5gz3funL/1mkRpZ6ivUDW50krJh4c
Xqgl7cjJjkO7Xlghy90rC+1pU7dtSWXDvbODuvtlU3Fz9Phuf7LYkPPW1kxj
s6pYNvlkuroVbbje48rPWNqOoXFZwsL+2bLsqof/+32DE9a5lSJsGPohnSUx
UMXoZGrDw61sCJz3qtAVk4rue3NlKTLEhkbyh78ViFu+SrtknYT9sfEKYsuk
KdiJdkbBxycVfM446a3S24a5efMeLrVOQaj78tlstCOWP0WGlQpuNutdw0F7
5QnzsQVLFPRedanfpEE2ww8uVpCjQ770x8b8s4tc3lT2TLQNNeDb4thyBbLM
C86yQdxn+c0KppjXTByy2IYNG3ln2mfS1Y09tJn2hDvtvGhfis3U8cNpGxzj
kw7SaI+/8SVt78f/fp+y1eY+Q37Z0KHL+1GntyuIOZ7szCra7ZYU+DNop4Lu
Vxf/rvzBhhjC+yT7FazrMHzNTy87xD1ueqygP+HWrbR2jFnGFUb7YP2N1b5n
tuMHUXzSJ7R9CUAq2DGC0XeQv4oiXBZHmv+zTTJuff7Zo4c9jz826n/tibmT
F8/2UMGiu+9q+o21Q+DeFI6/z/q+rk+0+84vGuZ9leP5qe6YuxPt6FR3dbKG
nI9NeU23u0+2Y0CSr5fX7uN1iSuT7CjI1zi8/J+t+8+BChq8zrsva7Qd/Z5k
SLloAOeXw5ed73sxg2tkJdpxfV9kyV/ZjvcFibTaKyj0o818a0E7BD7fb8Xx
6n6oXC3FjsNZOsaVoz3r4sfg3VY7ehcoFhrRlPO/Zky7nqns+CzxO5z2Tdlp
drxMGtHmZk0FA+U9OZ755hwq+yyU87vke/5nPrRzrPW9VF7BMwmUGe0YV6b5
00sFFATvub80G+3vvR4syJRZQRYzgU2iDdX3HN3XxE/BPIlTP2w4db5rslIZ
FHjrC91m8KP0Cio/ZMDg+/hea5yscQoFF+genqSzgyTvar67TmS7H9WjpcUO
rSgRH+3DyTvfO8/vDRb8ddCJyYJ7a9pxmjDj2yYnks5LbV0Uwe+fk7uh/1In
knM7Je9sx8gLHV+bZjrRk9vwxmA7Qvo1WFN4khNbmm2x7uT4t+44aOqlWU6Y
jhJgz7JjXbnOo61TnLhNunBqhR2Ndl4PTMPfx/G17WvteBz2ovnvIU5kRAff
rLvsoNfE8OFOg18etyPw1oVvdUY4YTnRver6h3asHJtufV/aunv/Y0dU3/4r
c9HuHXl9wlKbAx9utJrUf6wTo5VUmc8VciDfsMZ9Ps1wYlrWKjeqlXKAg3/z
Pe0YCVSNHShbInjkh+lO+NWfOah+KwfcTU65dk91olHq7jWPRjnQazqZ4GS+
/4/BHfb3dKBRq5JEjk7ME/jU14HV9c8UOM7fR7oybn7VxwFGy7stxznhk3bH
qn5jHIiaXcQ2a7QThUZx4GIc+Pby8dJ3i5wQdzLrjgNECfWnxDpx7nqitvSN
A3tJYzfccOIoYVzjzw60+fVzYtrnvL84oAQHvjdIvJTiixP6cvvqQLUHRASc
788tzzWtmtqJojV6nTqfkfvlxGqvoLxOXClBYp1DQd2gxqm75+O8CwEuqCD8
a9NMv3g9vSUx6+5i3B/1Wt/3V52otaTGkyplFaypvS1VI9pP53fqXK0G75fe
//Gv3E7I6r3ZXAHJutda2jov60n/1G9S02WJDnB3t1g1ib9/vuLbpAxOAx+N
UJBa/JPNie1Pm4xfP15BticjFp3P4TT80UTP88o4kaz8kYnZxyo4R/i1IYTr
5HK3wjH8+97cFitpn6yoRNwYonjwkROn1vdId2qygivanR+DQ52YlDZV2Rj6
4+Ezy02IquTEhnu9l+7ZRH96MOfwv9WdOCRxkf6xSPCB2rP494NmPT9yb4+C
yeKXaPeShX+Q7798XZplYU7MvTd9zKgz3J8jRv9JQzt83ozhne/zfoTxk2gP
qX59zZgE7s+yzwv3zu7Ewj+vK43/TttU5XMBft9z++qEyn8UlC/OAEA7TPx/
MhW9xZGUcmLWzCwrl6T9Z+twsoCKLYRxKfi9Ou1lfHyyLubd+AcO5BFAU1jF
y3KBcbs2OOB1umfC52AVHzlc92Y5kKa6qeqZCiriCROLjnBgvfxZDdXArd0d
yJ/+WKXjdVXUvpa81rcWDtl130rSnjEv5JJ3NQeOP3t8u2YLFVdm9ci+KdRh
+E3iizmP+AK07yzccSdPTxU5VvxacbutA4fSjEpdjHaExP9xtMVf0m5zNO+X
T6scSCHzHqUiHy1thwNEg+tmtldBNnyw8ql/9uRp9Z8HXXJA0iMn2qk4/iVb
k+ikTvzJV7bv9loqSvy+Fe2XyYkTf2IGfKypGvmpCk5MHLlzQVVeX8TXKrTL
iaaCJ4mPGmVuYLuw34nADtU/TV7O8XgpmQYn6qRYPq3EUhUZ62jjIp7RT6Qu
NjLHShUp+X8neUM/wOHwo11z2qa5Az9xfc3ZN2vKZuKbbsU+rf/hxPLtRb8f
3U6b9OhrohOXScf27FUx5sfHpK+TKVjWv2Pz9ccZDzn947kvFxRctr0o8WXV
6bUvvaEdM56A6pyKMnGDvGqnVcAou3LwBdXA4fTjHYVH8u9rrBtUwuGrYIUQ
eNrZLmX96DYrmLtoCyO7ClmGeWmfkv1wUcWuXtz5QQq6SJy/rMK2M/eZKEVB
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
AP/nC/0B0DiClA==
            "]]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmIBKK1/V4WtUVTBgQEMBBx8fZvMlyRKO0wILlGZ/p/f
4e7s+wYXBcQdzDaENh19KOTwIOM4735rUYcNM2s2n/UVd3hiuv7VmjRhB43m
xU+u7pR2WLC2uXlvpohDvcGHO9UZCg4TxS89VDwj7uDy6+3rA5JKDvWNCg5t
etIOnEde/2I9reyQflnwwFklBYdQwTyjVT4qDhftwj7cjlByWF55XNMqSdnB
etUshVd9Kg6fVF7OOlmuBHWnmsPTT/KX8v0V4HwDkD+uSjusObqcQeK/qoPd
ZhWgX0QdlE3fJs2KVHZYoSR6TIxJwAHdvzA+mA5VdpDclqatf1LawfsEu+1s
ID/526a3W66KOxxgybt7llnJYeI1iRInDTEHp1kbM6x+yzvs21b363yViIPc
nblbb7+TdqgyuTr5Z7qoQwbX3Os3XMUdqr7FLFNrlHA4I5fB2qYj4vB/GsOf
4FnSDmbGQCAs6PBcvnbyMkUFB6HvEb8uqAo4aFy57P5AXcnhkAmPvOBloPxK
vp2SeioOfcrXHgU3CEPc3aDqkLM9NmNdsTicD/P/apmoFOt6VQe+22KpZi8U
HFazJeZ9F1J28PVy3D49RBnDvwBU6r8x
            "]]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerJSIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQAWIQreD4MfnMXWkHLatJp+tPyDsY7Fbn5/4qi8Hvkk9+
F3VIxMHjYZXIOnY5hyX39/HNKRZ2mP1MdvmLDlmHDczPezR0hRw03/LuM5gp
4yC+/SLDPSdBh9p125LqZ0o75IaBWAIOGx++nLrJR8ohEqyA32F7Uv1N258S
DgxgIODQwuu/fspScYc9JZMlWK7xO6R9f5K4MEzMQSdV8lFEuIDDk+Z5Z1f5
izow+gJV6gs6aEtMvcKZIeJgbxq3y5NHyOHMu5OHnd4KO/hdnBjzz1kYaq6I
w10VtsapzSIOhjO1JKaKiMH5bqqlTLM4xByeXlC6/XOfsENUivV9f18xh9ML
Xbd9/ivkIKEWzLr4kphDua6i/JccIYc5RxQ2FGWIO+ybL6V/94kg1B0SDpZb
TpTtmy8I909km8W1o2sFHWRePzKTOiDpIJx4+LL2UkGHFce8zTsbpRzC+HQ3
zX0v6FB8XeiTI7+0A8camaiUaiGHdTfiy/znSTuAnNErLuxwZRYogKUd5tvo
AJnCDrD42rqs8rjmLhEHAIs2smM=
             "], CompressedData["
1:eJxdlHs01nccx81KWi3PzXPxXPyu1Amtm7Sy3l225VARpSKkqJzUqq2WiSLa
Gq3mJEORRiG7IOQRoiakVWs6OKZ1Gc1qrKto7ft7fs/xx77n/M5zvr/f8/1c
3u/X50uHblkaZmlhYeFHHuHX+oxu1Tojj7lxdxrSZimRbTepk0vkcXmUe8ay
LiWaT7xf9tidh8uh7BeTw1XIvEj9sK2HQ81uvdv6iypY7T0y/8tNHB6Uf/9m
t5caE9VHbo7uYVEzLnNqTqkalunW2uNBLD4oe/zq5gs1DKd6Frp0MbjtLATU
mOMyKL28ozorXYNvjKmHbF7SuPKosX6esx3Wxra576qgMfv80lT6oB00d1ao
yg/TMKV11OL3MSn5cWQfnOZlm9SkxY4lBmVEMo1OjlQWr0MVCRdVRuMdo6PN
mOl66Bvvz/n2NY2s2U430/P0KNsXfa1kJYOh/P4bixgDPFcmurVeYtBUP69o
Y5ABkd2D+f1TWJye3jJrsY8BCzZu6UvIZ9HgOeOLuSEG2Cf0+lQYOIQ/v7fm
hNKAVFJW92cc6p+OD/wqTo+0zbL42iYOuug1U5b16fCMvK57yon62utwNzfj
ItXHITOHPTf0oVY8P8gP79mOgZiIIR5uL+rWFVA67KzOIg7xYj9PdWLdOTxG
D2SvLynQY7LJUB4ThDQbDGi5QtZYHgVxPh7HLOzRdvW5791cTowXYg/NiOXj
nKdwGNGdNP5hiz1UC72H1CUsblcTAy2p4f4tTIuCn1DwHgbnkq36lNYUXAvf
8w+4TqNO5eA78qQ9Nn0ales0n0ZUw4R3v2424Jequwp9I4WXMRFVH8sNYtw4
SvS/XyfWu4/CzNZLkdNqtdg8bU85yPeTpP39pXYgpn+y1UiZedIg+SgRlKJh
kn2kRqyvmIbQRrFeDUKDj8dqBo+i50wPilJhqrDkLIjbf+gdVehTkgbTWPxN
8Cp6oEQsKStFzUHAoitGCXKq0iOJw8/hv3ZH9NpiaYUhofc6h+W7vysLjbU1
c8yhLZiQ1qrA4lDJiplPOMhyz19QOSgwcb+SSMyhobIi2eojOVatm9W1pIXD
YDMBuk4GU7p9HJzCCMn+MrF/jkNaZ8r+hHYp6hJP+TcVs/AP+LHmr+NS/BQp
CMLChGWRFNsOHLz3Tw0D7duCglLRRzC4zhBQ/pSisv3Aq7BbNLZvOPwwOlYm
chxDI36SV95bVnL0bj9rO+hJY17I/WtMhxwFBJ9Qbxpn83Y1TKhUIOK3rQcO
LqCG996C4POp4f+3n3kZGBlGYYZdbQD1hhzxBKs9eRRGCQPoJQOhOqvwIYVA
am7/2iQpBHtuLKLFup5LRJ6raNGnYxJ4uLymX7ky+PxJx629UyUI8iSTYWSw
OvLSv8WDNsP9i/xJIFxTxmcsgkdd1fi024C4NdaykBP58pWIfIAXeWSl5ny8
eK5VKuo/wgHpO8mEDcjMcR1wlFwTrhMV4txaOiCx0e/C6XsKs648TOkybPH/
+/I/ZYc7ZA==
             "]}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerJPEGIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{16.5, 2.}, {4.5, 2.}, {
            3.6719479999999995`, 2.0009000000000015`}, {3.0009040000000002`, 
            2.671949999999999}, {3., 3.5}, {3., 17.5}, {3.0009040000000002`, 
            18.328052}, {3.6719479999999995`, 18.999096}, {4.5, 19.}, {16.5, 
            19.}, {17.32805, 18.999096}, {17.9991, 18.328052}, {18., 17.5}, {
            18., 3.5}, {17.9991, 2.671949999999999}, {17.32805, 
            2.0009000000000015`}, {16.5, 2.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
            13.57129, 13.35693}, {12.979560000000001`, 13.357063}, {12.49995, 
            13.836817}, {12.49999, 14.42855}, {12.50003, 15.020283}, {
            12.97972, 15.499966}, {13.57145, 15.50001}, {14.16318, 
            15.500053999999999`}, {14.64294, 15.020443}, {14.643069999999998`,
             14.428709999999999`}, {14.64252, 13.837011}, {14.16299, 
            13.357481}, {13.57129, 13.35693}}}]}, 
          FaceForm[
           RGBColor[0.9451, 0.76471, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {
             1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQHaDhBaBUrLwflMqqxiB1xkHfqslzZ//a/swDGp
nC91hozDK6c1/ziMVRzk9CzfTbGTcXDybGQ1aFVxMD/16+yRJ9IO0/3DeMKv
qzj49F44f+W1tMOvuqw9JdaqDiElKtP/B8g4cF9fXGDbpepQ7sX++r+PosOa
7tsZDPlaDlpmz0qPFCo6LLn7ItluhZbDCuWG2UdXKzoc+zk7oOOClgPLpuu7
7d8pOqwFqb+v5dA0cbrpRgMlh7hMyZXf32g5ZBpWzPhWquTwQsBCKOOBloPc
wy0PXNcrOahcexTMsEfLQazH6xXLFhUHG6B36vM0HWb3ZzsfvaHmYPF5taXD
Bm2H0KxvDtoC6g4Nuutj8l9rO/yrWB81M0HdIUQimqOIQ8eh91rgVZaN6g7M
IHf803boWTgnI5xRw6HF+/ic9C/aDpogh3poOEREub2yPart8N/u8aHGAg2I
/+q1HSZyJXM73tOGuL9e1WGzZnjFdG4dhzh+taPH9VUdOIoCDvkA+TbZ22Mz
zqk42Knvza+5q+2w7MOCm6X1Kg5FdzRl16zXdhAo6wptNlBxOM+v3OIere3w
xJB56kdg/KDHJwAEHLkm
             "], {{8.415530000000002, 11.}, {12.638179999999998`, 11.}, {
             11.68506, 12.668}, {10.791059999999998`, 11.72708}, {10.62513, 
             11.553912}, {10.36001, 11.522025000000001`}, {10.15775, 
             11.65091}, {9.221229999999998, 12.254909999999999`}}}]}, 
          FaceForm[
           RGBColor[0.29412, 0.83922, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBWIQLa1/V4WNUd+BAQyUHE4vdN32+a8onN8kXsuaWSbq
0Dcp/LkEkB/vLrOp8YuIg1PC0wtK0koOK1Zbi92eIuLwJrN9v5q3ksNH/ugq
E1MRB5UzW/5qVys5HBENWLH8v7CDSnqiv/UeJai5IlBaGZXfYABXP0nJaM2j
hQZw8wQLOEKzDhnA7TsRva4u55YB3D2K9tI78z4ZwN173f9/5Of/Bmj+MXRA
9a+hQ4sCu+oZF324ei/5XQv2terDzcuMsRCYtFUfbl/LzG31qU/14e4pfOjg
IcZgAHcvxFwDuH9Q+ED/wtTDwgNmHiy8YPbBwhPmHlh4w9wLiw/0+AMALQSV
4A==
             "], {{5.996060000000001, 10.}, {15.00394, 10.}, {15.00394, 
             16.}, {5.996060000000001, 16.}}}]}, 
          FaceForm[
           RGBColor[0.7098, 0.80392, 0.87451]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQAWIQnehv/cc0Utoh78Y2jc0P5R3KFu70U/aVxeDP2j1t
Av8tEQf7SMMY2QRZB6uXtY+z+4UdPNrbDepeyThMsytxrPUWcmioLXl1il3G
YQZIfZSgw4U7zoe+y0k7lHmxv/5fI+CQy7jw64enkg47Xp6vW8Ih4PDtZcUZ
h6USDleeZ2l/ExdwuHBx1bSSFHGHltA9EytZBBx45AWDlTTFHAq+zvmyrxDI
t/kup2cp6nDtUTBDj7ugQ1WXjFJenIhD1f0ft4y1hRxmJy5ec/+NsMOJuZcO
/ooXdmAAAxEHtfXnDBVmizgUXJ7/1+OjKJzfqmVaveCpqMO8/mznozeEHU7J
LUzzUBVzSDp8WTtVUtjh3gmbT+yLxRzamBUjD7QIOTy8ZPhcUlvc4QXDQRnb
f4IOj7NSwqOeiTvMkr4sPG2HINw/PoWhN8uPCjrszCk5558o6VCiMv3/hH2C
Do9KJq3VE5dySMpRPOHIKeRQ77G/VnaGlMOhlFUJIZOEHN4cV/spKC/t8OCw
6vG5RsIO8U6s7eIp0g4MJTP09YH+gMXXn6a7G3IvijgAAJv0uk0=
             "], {{8.27593, 5.600999999999999}, {8.27593, 
             4.0764499999999995`}, {7.7903, 4.0764499999999995`}, {7.7903, 
             7.970409999999999}, {9.149, 7.970409999999999}, {
             9.495699000000002, 7.990780000000001}, {9.836413, 7.8734}, {
             10.097, 7.643809999999998}, {10.32893, 7.4181300000000014`}, {
             10.453540000000002`, 7.104199999999999}, {10.43952, 
             6.780890000000001}, {10.46035, 6.45471}, {10.337919999999999`, 
             6.13566}, {10.10423, 5.90714}, {9.834327999999998, 
             5.687319999999998}, {9.491156, 5.57794}, {9.14383, 5.60102}}, {{
             8.27593, 6.020399999999999}, {9.149, 6.020399999999999}, {
             9.365609000000003, 6.0059000000000005`}, {9.579484000000003, 
             6.0753699999999995`}, {9.746219999999997, 6.2143999999999995`}, {
             9.892242000000001, 6.3635}, {9.967786000000002, 
             6.567780000000001}, {9.95391, 6.776010000000001}, {9.963729, 
             6.982559999999999}, {9.888697, 7.184149999999999}, {
             9.746219999999997, 7.334009999999999}, {9.592580000000002, 
             7.478730000000002}, {9.387888, 7.556730000000002}, {9.1769, 
             7.55095}, {8.2759, 7.55095}}, {{12.779349999999999`, 
             5.8757800000000024`}, {11.18246, 5.8757800000000024`}, {11.18246,
              4.495850000000001}, {13.037669999999999`, 4.495850000000001}, {
             13.037669999999999`, 4.0764499999999995`}, {10.69683, 
             4.0764499999999995`}, {10.69683, 7.970409999999999}, {13.01235, 
             7.970409999999999}, {13.01235, 7.5510100000000016`}, {11.18246, 
             7.5510100000000016`}, {11.18246, 6.29641}, {12.779349999999999`, 
             6.29641}}, CompressedData["
1:eJxlk2tMUwcYhos2RYXNnlLbCr1gClJ7enowKIg4eQUVNYgFB5F0Gmy8kCIQ
OorMxigbImZeQIMixcpFx7wEAaGwSbSiBfFSdU6wKAw3ZaZMhCETjbgds4k/
9iZfvjw/3zzfN0OXHrdxAovFmsfM+/1vAjHz/kLJgUQeZAL9yuGLNHj88NZH
RQSuOvjzz62nsSDmbuEX77ioxPFrh16qYSke0SmquKBtC+cbjWrEpZRsLY3g
YkaNIbnwOYV87+grgwQX5R4ubd8GCkvP2qtYIi4cLZas0TAVFE1rYr+ZzEVt
0C5HiooE33wgJXIjgebFIx02qxK59sc3z+V5IX9R0tM7BiWKK9tepP7IR/ze
4ZByjRKlLy8ONbgL8F2AamhnnBLL+grDRWuE4yxoFXwtrhchqKI+ZDRCiYrc
o9YdJ70xqOE/89qjRM+eRDrvoBj3nO29iukkBlLfnJfNkiLk6ZQXhnISzU37
OINZMnxLsUMVGSrkZK+9lCT0hU4R0BW/jIK849fVLE9fJGe61waNUJjdb9fE
8H1RUDY6u8+ixqZfpl3+2yrDidOTKwbkNEqOMnFK8ba105JYQSPbuN/N2S9B
qyam/swgDevw2M/Zp8T44IOVnsO2r/JBlCAwR+tOj3PVDZ1u2I3G6ci0PJ9A
MaR9NzxqbqvhHRl6t3qCBLWdF8J7TGp0aCdq/YslWNp+5ktPhRoFmbeemCkp
lnS7+zb8QKHY302v/0qKhs2H2d8vpzAzWNaZp5eix4+TU3RehTo/rKRMUtiy
OZ+MyVWopnldhgEJfn82ZDI7SHA5FtPUV2IUNrX9tDuNRA9TN6HOB9MrjZ/P
XUTijzSLqyDMGzUa5jCiSdi6Ey88bxGNs+OIMEm2/T9fESTyj83KXDdRgLIV
t6TJRhJsIakP3McHO+FTqq6bxLu/jL2lsV6gihrlpcEqBGcYLkXG8rA4oXFb
zHUVXOw5RHAzAeJtun/YJgrRGfHOrXYC5s/uTPFk+p74Myv3XguB212pwhIP
5n7bQx4+ekDA72b9GKll2FVgfszhYUHZluvTGH9PApiHoHkY6LeFyrvUcL3v
Y+KhkWNdUTOJxpvlDavafvvIvdv41VHrBdgtcDperab+x/OWRBleTxWN+/3A
/wB+8G7/
             "]}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerMIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, {CompressedData["
1:eJxllAtMk1cUxyvSCSgOaUtftP2+rxT5KAXFqUVE/tOCVREVg07GBGFA6iwG
EAEHuimE1SG+R1ScgFJBqCAL4Mx4jIGOKuqc4nyhNgMVxmM8dFMHaxfDEj3J
yc0v59yce3L/55BRm0NirBgMxjKzW07H992OJc52wa2q6nr1bzKE/lhyKnil
C5xrFMZNqW44sng08pGPCwx1K0IL+XKsqptdGTooRWyB92hGjQJUPeu79ekU
jim/f1io9EDbperCqCAKT2dv1XX/I4eClAxvaidAbdVfTzvujlPBYG2YRaDd
mBnRXesBZsvemSltEsxx6Ts3nKCAXD3LaXm2GOFh9rrPc7wwZN0UfG6pAJNr
011kGQrkje3b/moeF/n6a1PPd7mDDt/bNFLCweUd6oYMezfEF9+OjY6ZhtSC
4LQtx2SIfz7JqPWdgrq1hqC/Wigw/jMb3OQZTp7RSMZ56vwXYk8fx3c46bbj
4IebHfFgElGtWy1Dj/PEqtv3nJDVs+q8mDkdyQd51ms8+fBsCY15yKGxZX10
XkkHH2yV+YbMA2OpFWFHHMTIfW/ASd2owDO15xgpkiBIbxcoM8f1vRHrNFEE
Znz5ccqQNY2fFjcfUg8S2JArbqjVTMdX7bvnXNJJseJwP1/X6IIby6McPkpz
ha6/uZybRKGy/AOaaaBhena4asp+Aoy1VdHSARr9fuGJ9zUELtjR/qWB7hAr
41SaCvE7/Jn6fvSzRTSsbHdLos8KwTm7+PG2YWfEWqxLhF8t9f4WwOGTlQ+9
J4lBt3Ul8F7zMBznH6Iyx6e0JQs0tlw0ZoiUcZkitEXmqNlGLjaG2F2oU0lQ
cWDvA2Y3D3ZanzzTRgKa/b3p/qECPHlV+ucNexJZ83cKaV8+vOJPTvghmYSX
cldDxGsuvk4YdWU3kchgai4WlTrBSp7tdKePRL1wst0uby72DM0tdEigcPB0
ub7nDhfVneG7y7opSAsVT0LyeTgaVtPOXSeFdt+SwKtWPPSY5ggafaVY9MQs
zDMsPI1hX1b4UZjad/Wudi4Lz93MQoohoev8Zs2iRDaMnI5OagGJm0ULWkV6
DlQve3sabUn8/MUfI33XnLDjYtZEspVASlxvzWQ/Dp5eHM6U1UuwzPKvAWzk
h54oM6SKsDDpeGCYHRvNCw2ajmlCrGf7Dcy04cH8WmN9mRAs5kvVt2xnpAYM
NBy+IkTbtpmHWPYEmoyFATVJQhSZxnJLeAQKHkUF2McKIXdk3RyQEfh9e3YR
IoTj88SYdyWPGylE5WnR6NEcEpR3uWlPkBAjQ3qKE+v6RtcMhCsdDjCD6HF+
8Uup/ESxFDZmea7MF2BGuipI9+l0PJ+g1pqa+fCxpBNueBmubRk9wIdk2mpK
1/E/uxYX3Ft2lB7PP7Qz3kuT7o4z8hOdadeFqF5aqcxfIkeXpeFR0Zu6Hrib
aJ4Ycx+PK1oFI6CRZaPMdL9FwqzKzQPFrvCn9CrHOine3k//Ak892E8=
             "], {{9.617389999999999, 11.266640000000002`}, {
             9.355364000000002, 11.506809}, {9.073421, 11.7243}, {8.7746, 
             11.91677}, {8.7746, 11.91677}, {8.66219, 12.48534}, {
             8.587309999999999, 12.73394}, {9.09304, 13.23107}, {9.16793, 
             13.30761}, {9.65491, 13.785590000000001`}, {9.687847, 
             12.945878}, {9.675329, 12.104999}, {9.61741, 
             11.266640000000002`}}, {{8.50275, 9.731640000000002}, {
             9.072936000000002, 9.76756}, {9.631433, 9.558930000000002}, {
             10.038419999999999`, 9.15798}, {9.701419999999999, 9.06244}, {
             9.66393, 9.043289999999999}, {9.32679, 8.947599999999998}, {
             9.042788, 9.148219999999998}, {8.700315999999999, 9.24909}, {
             8.352910000000001, 9.23443}, {8.391562, 9.40336}, {8.441624, 
             9.56948}, {8.50275, 9.731640000000002}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerMXIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, {CompressedData["
1:eJxllAtMk1cUxyvSCSgOaUtftP2+rxT5KAXFqUVE/tOCVREVg07GBGFA6iwG
EAEHuimE1SG+R1ScgFJBqCAL4Mx4jIGOKuqc4nyhNgMVxmM8dFMHaxfDEj3J
yc0v59yce3L/55BRm0NirBgMxjKzW07H992OJc52wa2q6nr1bzKE/lhyKnil
C5xrFMZNqW44sng08pGPCwx1K0IL+XKsqptdGTooRWyB92hGjQJUPeu79ekU
jim/f1io9EDbperCqCAKT2dv1XX/I4eClAxvaidAbdVfTzvujlPBYG2YRaDd
mBnRXesBZsvemSltEsxx6Ts3nKCAXD3LaXm2GOFh9rrPc7wwZN0UfG6pAJNr
011kGQrkje3b/moeF/n6a1PPd7mDDt/bNFLCweUd6oYMezfEF9+OjY6ZhtSC
4LQtx2SIfz7JqPWdgrq1hqC/Wigw/jMb3OQZTp7RSMZ56vwXYk8fx3c46bbj
4IebHfFgElGtWy1Dj/PEqtv3nJDVs+q8mDkdyQd51ms8+fBsCY15yKGxZX10
XkkHH2yV+YbMA2OpFWFHHMTIfW/ASd2owDO15xgpkiBIbxcoM8f1vRHrNFEE
Znz5ccqQNY2fFjcfUg8S2JArbqjVTMdX7bvnXNJJseJwP1/X6IIby6McPkpz
ha6/uZybRKGy/AOaaaBhena4asp+Aoy1VdHSARr9fuGJ9zUELtjR/qWB7hAr
41SaCvE7/Jn6fvSzRTSsbHdLos8KwTm7+PG2YWfEWqxLhF8t9f4WwOGTlQ+9
J4lBt3Ul8F7zMBznH6Iyx6e0JQs0tlw0ZoiUcZkitEXmqNlGLjaG2F2oU0lQ
cWDvA2Y3D3ZanzzTRgKa/b3p/qECPHlV+ucNexJZ83cKaV8+vOJPTvghmYSX
cldDxGsuvk4YdWU3kchgai4WlTrBSp7tdKePRL1wst0uby72DM0tdEigcPB0
ub7nDhfVneG7y7opSAsVT0LyeTgaVtPOXSeFdt+SwKtWPPSY5ggafaVY9MQs
zDMsPI1hX1b4UZjad/Wudi4Lz93MQoohoev8Zs2iRDaMnI5OagGJm0ULWkV6
DlQve3sabUn8/MUfI33XnLDjYtZEspVASlxvzWQ/Dp5eHM6U1UuwzPKvAWzk
h54oM6SKsDDpeGCYHRvNCw2ajmlCrGf7Dcy04cH8WmN9mRAs5kvVt2xnpAYM
NBy+IkTbtpmHWPYEmoyFATVJQhSZxnJLeAQKHkUF2McKIXdk3RyQEfh9e3YR
IoTj88SYdyWPGylE5WnR6NEcEpR3uWlPkBAjQ3qKE+v6RtcMhCsdDjCD6HF+
8Uup/ESxFDZmea7MF2BGuipI9+l0PJ+g1pqa+fCxpBNueBmubRk9wIdk2mpK
1/E/uxYX3Ft2lB7PP7Qz3kuT7o4z8hOdadeFqF5aqcxfIkeXpeFR0Zu6Hrib
aJ4Ycx+PK1oFI6CRZaPMdL9FwqzKzQPFrvCn9CrHOine3k//Ak892E8=
             "], {{9.617389999999999, 11.266640000000002`}, {
             9.355364000000002, 11.506809}, {9.073421, 11.7243}, {8.7746, 
             11.91677}, {8.7746, 11.91677}, {8.66219, 12.48534}, {
             8.587309999999999, 12.73394}, {9.09304, 13.23107}, {9.16793, 
             13.30761}, {9.65491, 13.785590000000001`}, {9.687847, 
             12.945878}, {9.675329, 12.104999}, {9.61741, 
             11.266640000000002`}}, {{8.50275, 9.731640000000002}, {
             9.072936000000002, 9.76756}, {9.631433, 9.558930000000002}, {
             10.038419999999999`, 9.15798}, {9.701419999999999, 9.06244}, {
             9.66393, 9.043289999999999}, {9.32679, 8.947599999999998}, {
             9.042788, 9.148219999999998}, {8.700315999999999, 9.24909}, {
             8.352910000000001, 9.23443}, {8.391562, 9.40336}, {8.441624, 
             9.56948}, {8.50275, 9.731640000000002}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerNBIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}}}, {{{18., 17.5}, {18., 18.328427}, {
            17.328429999999997`, 19.}, {16.5, 19.}, {4.5, 19.}, {3.671573, 
            19.}, {3., 18.328427}, {3., 17.5}, {3., 3.5}, {3., 
            2.6715700000000027`}, {3.671573, 2.}, {4.5, 2.}, {16.5, 2.}, {
            17.328429999999997`, 2.}, {18., 2.6715700000000027`}, {18., 
            3.5}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 
             1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {{{5., 12.}, {5., 11.}, {2., 11.}, {2., 12.}}, {{2., 
             10.}, {2., 9.}, {5., 9.}, {5., 10.}}, {{2., 14.}, {2., 13.}, {5.,
              13.}, {5., 14.}}, {{2., 8.}, {2., 7.}, {5., 7.}, {5., 8.}}, {{
             2., 6.}, {2., 5.}, {5., 5.}, {5., 6.}}, {{5., 18.}, {2., 18.}, {
             2., 17.}, {5., 17.}, {5., 18.}}, {{5., 4.}, {2., 4.}, {2., 3.}, {
             5., 3.}, {5., 4.}}, {{2., 16.}, {2., 15.}, {5., 15.}, {5., 
             16.}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
             0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {
             0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
             0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {
             0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQ3fTo+Izdx3QcQlPvix78r+KgN2HBD8Nv+g5/JioZ
rZmk4fBh0XqFsx7aDp/Ymc/vna7p8OfFlannD2k7bI7jeeoSrefwr2J91MwE
dYeItT4/lubpONysiZHW+qbiMOeIwoYiDwOHqR/fG+v1KDlM8HQ7dwgo337E
dppdiIzD+e/Bj5cC9bs/rBJZ5y7r8AmoTGaGpoNyTkXV0jfCDjnndTgDJms4
TD91W9DPW8rhmF7gXlMGVYcYBcePyUB51ry7Z4NzFR2u/VJaqAvU39DULWqa
oeBwaMUSP4dgGYe603P0uj3FHTbNfb/8WLeSQ15Y7bptStIOX70i2yyA7pv0
tsbe9J6QwzFv805HoPslpl7hzADKH0lZlRAC9F/Dwbwb2zzEHbafeblpBtD/
/AJnLj5OV3AQWrr3oDgwfKYaXP62PkfRAQBEtY9z
             "], {{14.80901, 9.345419999999999}, {13.743519999999998`, 
             9.70987}, {13.016919999999999`, 10.654219999999999`}, {
             13.952580000000003`, 10.306610000000001`}}, {{11.37113, 
             7.1364199999999975`}, {10.71228, 6.004419999999998}, {10.71228, 
             7.177}, {11.39769, 8.1788}}, {{9.82133, 12.979130000000001`}, {
             8.690819999999999, 13.38113}, {8.03666, 14.26438}, {
             9.224139999999998, 13.742750000000001`}}, {{11.738219999999997`, 
             13.74254}, {12.92535, 14.26367}, {12.27094, 
             13.381170000000001`}, {11.140869999999998`, 12.97931}}, {{
             13.176730000000001`, 12.69978}, {12.60295, 11.88607}, {12.63669, 
             13.113}, {13.30869, 14.019279999999998`}}, {{10.48084, 
             7.6483799999999995`}, {9.600349999999999, 8.933119999999999}, {
             10.48084, 10.12788}, {11.36133, 8.933119999999999}}, {{8.82607, 
             11.30619}, {8.782, 12.866109999999999`}, {10.24941, 
             12.343890000000002`}, {10.24941, 10.82582}}, {{10.71228, 
             12.343890000000002`}, {12.17853, 12.866109999999999`}, {12.13679,
              11.30619}, {10.71228, 10.82582}}, {{7.78548, 12.70037}, {
             7.653829999999999, 14.01924}, {8.325000000000001, 13.113}, {
             8.35872, 11.886630000000002`}}, {{10.113909999999999`, 
             10.394459999999999`}, {9.233909999999998, 9.200330000000001}, {
             7.73775, 9.64138}, {8.6871, 10.875230000000002`}}, {{9.56485, 
             8.17925}, {10.24941, 7.17699}, {10.24941, 6.00399}, {
             9.588669999999999, 7.136619999999999}}, {{10.847769999999999`, 
             10.394459999999999`}, {12.27461, 10.875230000000002`}, {
             13.223969999999998`, 9.64138}, {11.727799999999998`, 
             9.200330000000001}}, {{15.12577, 12.00872}, {14.018169999999998`,
              10.766060000000001`}, {12.710669999999999`, 
             11.251830000000004`}, {13.495080000000002`, 12.36425}}, {{
             10.4809, 15.38392}, {11.32134, 13.94576}, {10.48092, 12.872}, {
             9.640999999999998, 13.945920000000001`}}, {{5.83618, 12.00977}, {
             7.467, 12.364930000000001`}, {8.251059999999999, 
             11.251930000000003`}, {6.94357, 10.766800000000002`}}, {{7.00905,
              10.30738}, {7.94515, 10.65472}, {7.2182, 9.70992}, {
             6.152049999999999, 9.34592}}, {{6.25151, 8.900640000000001}, {
             7.36125, 9.27952}, {8.546149999999999, 8.93023}, {
             7.5544899999999995`, 8.616499999999998}}, {{7.776040000000001, 
             8.210890000000001}, {9.1027, 8.630609999999999}, {
             9.136519999999999, 7.219290000000001}, {7.60984, 
             6.5491399999999995`}}, {{11.82447, 7.218990000000002}, {11.85887,
              8.630529999999998}, {13.1852, 8.21038}, {13.3511, 
             6.548449999999999}}, {{13.40685, 8.61593}, {12.41507, 8.93009}, {
             13.600359999999998`, 9.2795}, {14.710359999999998`, 8.89981}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerPacletInfoIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}}}, {{{18., 17.5}, {18., 18.328427}, {
            17.328429999999997`, 19.}, {16.5, 19.}, {4.5, 19.}, {3.671573, 
            19.}, {3., 18.328427}, {3., 17.5}, {3., 3.5}, {3., 
            2.6715700000000027`}, {3.671573, 2.}, {4.5, 2.}, {16.5, 2.}, {
            17.328429999999997`, 2.}, {18., 2.6715700000000027`}, {18., 
            3.5}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 
             1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {{{5., 12.}, {5., 11.}, {2., 11.}, {2., 12.}}, {{2., 
             10.}, {2., 9.}, {5., 9.}, {5., 10.}}, {{2., 14.}, {2., 13.}, {5.,
              13.}, {5., 14.}}, {{2., 8.}, {2., 7.}, {5., 7.}, {5., 8.}}, {{
             2., 6.}, {2., 5.}, {5., 5.}, {5., 6.}}, {{5., 18.}, {2., 18.}, {
             2., 17.}, {5., 17.}, {5., 18.}}, {{5., 4.}, {2., 4.}, {2., 3.}, {
             5., 3.}, {5., 4.}}, {{2., 16.}, {2., 15.}, {5., 15.}, {5., 
             16.}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
              3}}, {{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 
             0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}}}, {{{6., 13.5}, {6., 11.}, {10., 11.}, {10., 
             15.}, {7.5, 15.}, {6.671948, 14.999096000000002`}, {
             6.000903999999999, 14.328052}, {6., 13.5}}, {{9., 12.}, {7., 
             12.}, {7., 13.5}, {7.000358, 13.775994}, {7.224005999999999, 
             13.999642}, {7.5, 14.}, {9., 14.}}, {{13.5, 15.}, {11., 15.}, {
             11., 11.}, {15., 11.}, {15., 13.5}, {14.9991, 14.328052}, {
             14.32805, 14.999096000000002`}, {13.5, 15.}}, {{14., 12.}, {12., 
             12.}, {12., 14.}, {13.5, 14.}, {13.77599, 13.999642}, {
             13.999640000000001`, 13.775994}, {14., 13.5}}, {{6., 7.5}, {
             6.000903999999999, 6.671950000000001}, {6.671948, 6.0009}, {7.5, 
             6.}, {10., 6.}, {10., 10.}, {6., 10.}}, {{7., 9.}, {9., 9.}, {9.,
              7.}, {7.5, 7.}, {7.224005999999999, 7.000359999999999}, {
             7.000358, 7.22401}, {7., 7.5}}, {{11., 6.}, {13.5, 6.}, {
             14.32805, 6.0009}, {14.9991, 6.671950000000001}, {15., 7.5}, {
             15., 10.}, {11., 10.}}, {{12., 9.}, {14., 9.}, {14., 7.5}, {
             13.999640000000001`, 7.22401}, {13.77599, 7.000359999999999}, {
             13.5, 7.}, {12., 7.}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerPNGIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{16.5, 2.}, {4.5, 2.}, {
            3.6719479999999995`, 2.0009000000000015`}, {3.0009040000000002`, 
            2.671949999999999}, {3., 3.5}, {3., 17.5}, {3.0009040000000002`, 
            18.328052}, {3.6719479999999995`, 18.999096}, {4.5, 19.}, {16.5, 
            19.}, {17.32805, 18.999096}, {17.9991, 18.328052}, {18., 17.5}, {
            18., 3.5}, {17.9991, 2.671949999999999}, {17.32805, 
            2.0009000000000015`}, {16.5, 2.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
            13.57129, 13.35693}, {12.979560000000001`, 13.357063}, {12.49995, 
            13.836817}, {12.49999, 14.42855}, {12.50003, 15.020283}, {
            12.97972, 15.499966}, {13.57145, 15.50001}, {14.16318, 
            15.500053999999999`}, {14.64294, 15.020443}, {14.643069999999998`,
             14.428709999999999`}, {14.64252, 13.837011}, {14.16299, 
            13.357481}, {13.57129, 13.35693}}}]}, 
          FaceForm[
           RGBColor[0.9451, 0.76471, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {
             1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQHaDhBaBUrLwflMqqxiB1xkHfqslzZ//a/swDGp
nC91hozDK6c1/ziMVRzk9CzfTbGTcXDybGQ1aFVxMD/16+yRJ9IO0/3DeMKv
qzj49F44f+W1tMOvuqw9JdaqDiElKtP/B8g4cF9fXGDbpepQ7sX++r+PosOa
7tsZDPlaDlpmz0qPFCo6LLn7ItluhZbDCuWG2UdXKzoc+zk7oOOClgPLpuu7
7d8pOqwFqb+v5dA0cbrpRgMlh7hMyZXf32g5ZBpWzPhWquTwQsBCKOOBloPc
wy0PXNcrOahcexTMsEfLQazH6xXLFhUHG6B36vM0HWb3ZzsfvaHmYPF5taXD
Bm2H0KxvDtoC6g4Nuutj8l9rO/yrWB81M0HdIUQimqOIQ8eh91rgVZaN6g7M
IHf803boWTgnI5xRw6HF+/ic9C/aDpogh3poOEREub2yPart8N/u8aHGAg2I
/+q1HSZyJXM73tOGuL9e1WGzZnjFdG4dhzh+taPH9VUdOIoCDvkA+TbZ22Mz
zqk42Knvza+5q+2w7MOCm6X1Kg5FdzRl16zXdhAo6wptNlBxOM+v3OIere3w
xJB56kdg/KDHJwAEHLkm
             "], {{8.415530000000002, 11.}, {12.638179999999998`, 11.}, {
             11.68506, 12.668}, {10.791059999999998`, 11.72708}, {10.62513, 
             11.553912}, {10.36001, 11.522025000000001`}, {10.15775, 
             11.65091}, {9.221229999999998, 12.254909999999999`}}}]}, 
          FaceForm[
           RGBColor[0.29412, 0.83922, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBWIQLa1/V4WNUd+BAQyUHE4vdN32+a8onN8kXsuaWSbq
0Dcp/LkEkB/vLrOp8YuIg1PC0wtK0koOK1Zbi92eIuLwJrN9v5q3ksNH/ugq
E1MRB5UzW/5qVys5HBENWLH8v7CDSnqiv/UeJai5IlBaGZXfYABXP0nJaM2j
hQZw8wQLOEKzDhnA7TsRva4u55YB3D2K9tI78z4ZwN173f9/5Of/Bmj+MXRA
9a+hQ4sCu+oZF324ei/5XQv2terDzcuMsRCYtFUfbl/LzG31qU/14e4pfOjg
IcZgAHcvxFwDuH9Q+ED/wtTDwgNmHiy8YPbBwhPmHlh4w9wLiw/0+AMALQSV
4A==
             "], {{5.996060000000001, 10.}, {15.00394, 10.}, {15.00394, 
             16.}, {5.996060000000001, 16.}}}]}, 
          FaceForm[
           RGBColor[0.7098, 0.80392, 0.87451]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}}, {{{5.529, 5.57807}, {5.529, 
             4.053519999999999}, {5., 4.053519999999999}, {5., 
             7.947459999999998}, {6.48, 7.947459999999998}, {6.852703, 
             7.9696}, {7.220449, 7.853290000000001}, {7.51264, 
             7.620859999999999}, {7.761139, 7.404469999999998}, {7.898312, 
             7.0872199999999985`}, {7.88574, 6.757950000000001}, {
             7.9057260000000005`, 6.425880000000001}, {7.770876, 
             6.103259999999999}, {7.520519999999999, 5.88419}, {7.218853, 
             5.661900000000001}, {6.848291000000001, 5.553469999999999}, {
             6.47438, 5.57807}}, {{5.529, 5.9974799999999995`}, {6.48, 
             5.9974799999999995`}, {6.713101, 5.9819900000000015`}, {
             6.943998000000001, 6.0508500000000005`}, {7.13054, 6.19148}, {
             7.287083999999999, 6.33478}, {7.370268000000001, 6.54129}, {
             7.35676, 6.753090000000002}, {7.365949999999999, 6.96311}, {
             7.283390000000001, 7.16676}, {7.13054, 7.311090000000002}, {
             6.957866, 7.457780000000001}, {6.736853000000001, 7.5351}, {
             6.51039, 7.528030000000001}, {5.529, 7.528030000000001}}, {{
             11.87171, 4.05348}, {11.3399, 4.05348}, {9.319080000000001, 
             7.05438}, {9.319080000000001, 4.05348}, {8.787279999999999, 
             4.05348}, {8.787279999999999, 7.947459999999998}, {
             9.319080000000001, 7.947459999999998}, {11.345, 
             4.933299999999999}, {11.345, 7.947459999999998}, {
             11.871730000000001`, 7.947459999999998}}, CompressedData["
1:eJxlkXtMU3cUx6soT4V7y6MV6QOYj97LvZUFWAdGv0EkmJkNyibo8LkRO8qs
DzYsCr7oWHRCFUQRplINtloxomFqRAU6FohjAXEK69RKwaLjNcwgxamXGNkf
O8nJySe/nOT8vp/gDRpl+lQej6fgemK+rQVI9GlzeMfycfKZvtxWK0dtIH80
NYfEvzdMCbokOV5qkw95dhPoG95R/srKoqm9gDUWEbB5FZv2JrFYE3/J2k4R
+LZwSufzOgZCh6/28Asf7Jz+VZNBxmBzb8q23TwCjk6zM+1gGBR3/7lo5t4F
e4NKFozQyBMpNsYtI6C1+7ieUNMwDLjou+wEZOur+tf2UWgdeTxgziXx5FzN
4P7dFOx+ouaetXykGiN/jVlEQWpp9YvW+MJquONa9kIGe1dieOtJP+jVS35W
/CbD4Tj56dQBf0Q9Hml0b5PhiT2vwADBJNdYXFqqKoQw1UfMkNTLcFN/78KJ
4kBIZywcFXtTMFz5YKwhPwjH50zJyDBR2J/5dNxEilHp9ezz3jgafJ/55VvT
JcgYT1lx/L0wfNNYu7RsphSeOndFvieDLZ91Zi/lSaEuuDVXbWEwsZblIUVa
4qP3z+5gEdWu1MYYJDjoOhSQQMgRcew7W2iDGD9+xG0elWPh1Rj1T3+KMF3f
ZWnu5/xc4QQdC8I7fxVfb1r+iWI2XnVs75s7zE7y1dWq6rsPWGRZZSKzRAQu
tcVnXjNwrs8fUu0Tw8291zHsxaCB+zaZLEYIcfG5IDMMvztDKpmNYhi7w12O
tNHIQWcJbRVhRc0XoYSGhnnagcayR0G4vu9BWawb/TbPU7NRpywNLrxH4ctz
6z5VzgvEhJ6PbRTSrPEu288LJ1lVOs1oShdgT8vY6Kz7FCjhkQ4Phz+aJVzg
3jTEiVE9nho/bFUd6t+5i0ZtlfYXWbQvbqRcWD7WQ+NM6LWXBRF8/HGWO1AX
BktReDZTSSLn+/hsgmbg0MQGT60moWtV/8XXMXAviipMPU8iq3286f5DBkbl
ZbdV9SROZbb4P4xkEd2X260eJCEt/qFCl8si31n64eoAPlY+FerrbrJwclpL
NvDRcHvboO1vFiUJhqNJd/7jvMWRa64vC0B6cvUQK2D+xx0eqpDMMcGkr3f8
Bvidex8=
             "]}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerSVGIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{16.5, 2.}, {4.5, 2.}, {
            3.6719479999999995`, 2.0009000000000015`}, {3.0009040000000002`, 
            2.671949999999999}, {3., 3.5}, {3., 17.5}, {3.0009040000000002`, 
            18.328052}, {3.6719479999999995`, 18.999096}, {4.5, 19.}, {16.5, 
            19.}, {17.32805, 18.999096}, {17.9991, 18.328052}, {18., 17.5}, {
            18., 3.5}, {17.9991, 2.671949999999999}, {17.32805, 
            2.0009000000000015`}, {16.5, 2.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 
            2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{15., 10.}, {14., 
            10.}, {14.00113, 11.596388}, {12.921309999999998`, 12.991014}, {
            11.375490000000003`, 13.38965}, {11.62449, 14.3584}, {13.61224, 
            13.845852}, {15.00095, 12.052766}, {15., 10.}}, {{7., 10.}, {6., 
            10.}, {5.998837, 12.052669999999999`}, {7.387368, 
            13.845787000000001`}, {9.375000000000002, 14.3584}, {
            9.623999999999999, 13.38965}, {8.078326999999998, 
            12.990908999999998`}, {6.998712, 11.596276}, {7., 10.}}}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1,
              3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
             0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCwBmIQDQG6DhBay2HribJ983dpO0x7xRSXBuQnfi7MXTFD
yyFv6fW05LNaDm8emUkd0NaCqteB0ho4+NoORUeiariA/AWGk1eI79FyEFb/
bi3yVN3hVPuCrC9VWg5ZsqG+AlvVHaQOHvv63kvLwWC3Oj93q7qDBnd8/Gsp
LYe77wNEXjirOwRx+r/4+l8Taq463L0QWhnOh9ijBFcPsUcJbp4k2B4luH2a
YHEluHsg+hTh7oWYqwT3Dypfx0HTatLp+hXycL6KuxWz8no5h3XOpqqR87Uc
3n5ay//6rrQDX1429/nTmg5rXj0tn/VHwiGP73oWPzcwPA9YKntJizlcWud0
yh/ont3cU0QiGEQcyoVrLn/p1IbzYfEE43e+adbhLtOD69cP3Gu6Yas+3PwJ
HzWmfviiD7f/l4dXlYSUAdx9gXtO3VqWoI/mfj00/6Hz9eHhk3AuJ/yFsz48
/Mwq4qdyt+rDw/eZnSWXANA9sPC/8WXBApGn+vD4Ca++wc3KYIAWfzC+OpwP
i3+Yelj6gJkHSz8w+2DpC+YeWPqDuRc1faLz9dDSt57D6Zb4V8/XAtPFlZnV
HgX6DrLMm67v1tdxCDii1CarZOCgvE94c9waXYcPPdu0Ot/oO8xWeGXHoKnv
0NCwNev6FH2HDr0V+TOFDRwsfOfLFujqOWx5VbxV9Le+w8b7wq9DVuo4PL2g
dPvnOX0HraKOHZaq2g7zbXSuzGrTc3iSfV6HE56+EfkTAK7YJ3o=
             "], {{14.5, 15.}, {14.223859999999998`, 15.}, {14., 14.776142}, {
             14., 14.5}, {14., 14.223858}, {14.223859999999998`, 14.}, {14.5, 
             14.}, {14.77614, 14.}, {15., 14.223858}, {15., 14.5}, {14.99981, 
             14.776065000000001`}, {14.77606, 14.999812}, {14.5, 15.}}, {{10.,
              14.}, {11., 14.}, {11., 15.}, {10., 15.}}, {{6.5, 15.}, {
             6.223858, 15.}, {6., 14.776142}, {6., 14.5}, {6., 14.223858}, {
             6.223858, 14.}, {6.5, 14.}, {6.776142000000001, 14.}, {7., 
             14.223858}, {7., 14.5}, {6.999812, 14.776065000000001`}, {
             6.776065000000001, 14.999812}, {6.5, 15.}}}]}, 
          FaceForm[
           RGBColor[0.7098, 0.80392, 0.87451]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1,
              0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxdlHlUFWUYxvGqIJBwl7lzl1nuxTI1jmhFQAT4IAUEqCcDssRSkDCCEDFB
ELcEzRYkCNc4uRCulLJISqyCIhVbbIqmCCaLQQgoINY3d5A/mnPmzPnOzLzf
+7zP8/usAiOWBkuMjIx8yS08G/175l0M0cA/PisvcIEK1kN7b6SYqLGTbvn9
YYoKfOY9T5siGum9mRXe9mp4FsVzDplKuNxrOT3CarDkx9TgXXcoVLTm7thU
o0FIw1+h1hsoRDXJ+12rtVgofBhLIR/b2y43Mzgckt0V9SkFz9uxVJYJByvd
QJj/GAWLuee+653FY5+P8kuvLiWO5Ng/Km3n0evwhse6YRpma2aExVzQIcb8
udmbfdRYAsWqMoUePvafu67M0KA7Klc5aq6HsZxaUHFIi+TNo45rLfTQtC1T
nU9mcHGWpXnuXR1OVTf490Sw2H8xbY9lrA6rV7S6T3bgELSlxXmjWgdm+q25
e25xqAi33Xp+K4+5hgZ5vHQ3a2Z7GYd/gn5d4X2FR+qQ8Qf7nuEQWrA+RT1F
B/e8B2N/OLAYrfq7skyiw4lji0mHDM6MBISXP2En1mZNR9c6m3Fo3hblnmrH
osGUCMtnIbt8If8rYw6SA9OYdJ7F+95XTJwPctgQSToKZ7CeyKuy4THTeNu3
bl9oEXi40bY3hp/QXzvj+vDmUB6ZGy/PcaxTo7GcCIjmYa8tXq6fpEYcleVx
25GHoayfCh015IdCDttJG0MVNEgKZll6c+I8Ymi4sd1tdgdYPHEbud+9lcZb
Hx+IPtTGwK/k+LHFZB3Rl1Dp68qg5vXmvoGrNOYEJJUOHtci7rN5Pj94qTB4
vYko1GJVWb11sEaN4e+J8dkalA3ODkiSaMb306B+UaB02bAGS/P5hG7Z0/cM
AvSuZNRqXDpr88nRSSwSK31Ljq9W407GwUv6PhZC7IJuqGAYfxqHb6q2kGiq
YOf0y9I0Kx4Fgr1DtNhHIvHPb/4LJ96mIcTO4zaP0sTMd66eU4KnQxc9sNCh
a4qtzO4xBbczH92MNNOh5NVnveLcKJEDhQ6PSlefXEkpRH27eYSZEkUPZMgj
qc/ez6GnmPzwmkyss4nF2aKedKcwKe7YCQYwuHaaBGGqFMJYtcUaCJgMqaRw
WlybHFCoxo70305WK6WQFEyVU0Uq0WdvqZjzehqCuwU5UqTuTHiv/rFS5E0q
Q4YQKzclBn++tnssY3z/Amp8XnIxfy4UFq4kjjMKdHra/Gs1poBA2ZQBBYwM
F4Vy/U/r1tRSou7J9MSadEcioESRxaGXj5DvDXWW0/A1GKFAQ0zn8y9OU0Ea
a3fKZa8cQhw7alSwFQCWyPHhrqAVrRVqkY982YR+wzzKZRO8vim0lScDgd2y
M5rBzcjdX7f3yyDQF2/DIqm9X1cXIcfD9lWHG3NYcf9bctACcJMJT30DXu8m
KsQ8E46Esq2vUKgzuikxJbwJx0dsByXyUMKiSioAp0Rlx4Jjf7qwE7odDEYz
GCTVHNJo3J9eOH9/qHacIxX+f17+BzFaMpA=
             "], {{9.8738, 4.7586}, {10.959, 7.9704}, {11.507, 7.9704}, {
             10.098, 4.0765}, {9.6543, 4.0765}, {8.2481, 7.9704}, {8.7935, 
             7.9704}}, CompressedData["
1:eJxlU2dMFGEQPZUIMQb3jvPuvMYhSraiFAvB8myAjaJiUAEF0RAiajCIIhCI
QUDsioVqMELU06C5H1gCBiT2jlEBo4glF1GwYDsJfnsL5w8n2ezOfjvzZt57
6xG/YdGawTKZLJBc4l0KbxQfI7FMgcOzCte9vyxAeS64Pf2QHNF7G3roaAHW
EO8+j14KW61ePi6dPPjm4neGagqM+EEij6phQWNTZ1IQj81tHCbeDQx9KKdw
+vOjhfHhHJ68T+K+qym4mPXLEy6zaEw4vWqJor+eZqGNaNFlxFGYTeBtpxg4
d6tCwv9QOKhxWuoqMCiJrDhz9qgcw56e2Dj1Fo2VzG3qeroCd++Q2EVjblm2
V8MONwgXyrqqg2h0TZ4TnHJRCfXzez8We9IojyUFziosmFQwY9VYGq5144+x
UWpH7psmeLhbNBj3YszQnJE0cooIEdVa7P+YMX1CLI3jBTXt1iI9RonjfKER
5xs5nmWM0NkLGBSnlVZ6bnXHvOGDubylLLJD6jMNGhOqSq6Zanw5ibfhJviI
BLzhUO9a6lepNOFl2O4j6w/wSIhpCxpS6460ugrtOIMg6fHcCPfcDxG15QLM
ha2Jsi4DCDrZUADc4hofn9FjQD/ZhhynpjAdNiWSift4R87lqQgDPPK/tT7N
8dMjnMApGgnenZj5N5wNEr/JPFY8vtKhLDNI86t42OXwNUKkr+MkB8/WX1lJ
GUaExlNRAf4cHo4WXxhhubG5rqKYdZxfmksaOLPQk+rI7v7+ZxmsGfU6Sv1D
j6PrFduvzmOQtPDrnsUWHe6L7XUMVpyv7yyfosW33uYtVi8G/pWWST8bNI7c
7r9MdT8/DCbEikgqLKo1EoYYWJb1XGzZqURNCiHgCoPe76mvSiPcpPm0LOw2
DlNI+l1gsU00+CU5mkykIoJDi/l3dHKTXMKr4mC7/elmY4Nc+h9sHJo5ssEz
OVLFhUJ5rM1fHdM2VOHQL1B88FZIfn/A40jfviwb8afdH4ME5OcuJwz/y9vT
yQBxKrx9QIicxv2XBxD7/hqhceg7kP8F0n559w==
             "]}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerKernelIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJRIGZigAElBwht4IDCb0Dwg3h/2248ZuCwROpbdVKv
IlTcEEqj81ng/IKp6gJlpxjR5Bng5sH4qPZB+Qw8cH4D/3SZ8lOcaOZxoNkH
5TcYwfkCcrkyG48Zoak3hpsH46PaB+Prw/kQf+ujmWeAZp+BAwACrS35
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}}, {{{18., 14.}, {3., 14.}, {
            3., 15.75}, {3., 15.888071}, {3.111929, 16.}, {3.25, 16.}, {7.75, 
            16.}, {7.888071, 16.}, {8., 15.888071}, {8., 15.75}, {8., 15.}, {
            17.75, 15.}, {17.88807, 15.}, {18., 14.888071}, {18., 14.75}}}]}, 
          
          FaceForm[
           GrayLevel[0.89804]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}}}, {{{19., 13.}, {19., 3.5}, {19., 
            3.223860000000002}, {18.776139999999998`, 3.}, {18.5, 3.}, {7., 
            3.}, {7., 4.}, {3.25, 4.}, {3.111929, 4.}, {3., 
            4.111930000000001}, {3., 4.25}, {3., 13.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
             0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {
             0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
             0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {
             0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQfW91mNqfJH0HgVL5hitmCg7uU76xxe/Qd3Awjdvl
2aPskHpf9OD/ZToOd9kVtnYaKznseaHtYfxNy2HHqje7lSRUHfas9Gjd6Krp
INZuvH8WUP6Ot9TiUhM1hyk3FSb3APXXsGYeW9Sp5rCT3yFL2FzB4a4KW+NU
Z2UHK6kD0QqM8g42tyySdOtUHSwEJrH6MEg5iBo0RpcD5cPAFos4cL+KflYC
1B+0wP+J5yRhhx8iDI8lgeYzaLeL3TzH6ZDB2rYmD2h/wdc5X/YZ8jsI/slX
tQa67wS77ezQ+cwOem8y2/cD3W+w2i48GiifGnvHjRnoP47iLz/2nuV06HRM
eHoB6H+zs9Z+FycKOyx++SalIMTQ4dRT+yX3/4k4pJqdUFE2N3CQOwkU+C/p
ILrO/WEVUH7NLIVXdgzyDgCwloC6
             "], {{14.356890000000002`, 8.80715}, {15.26808, 9.20715}, {
             14.75798, 8.51929}, {13.889980000000001`, 8.210630000000002}}, {{
             15.50572, 9.055660000000001}, {15.40481, 8.047169999999998}, {
             14.95886, 7.41475}, {14.98468, 8.353030000000002}}, {{14.69925, 
             8.2}, {14.66778, 7.05536}, {13.62143, 6.702780000000002}, {
             13.62143, 7.816750000000001}}, {{13.48092, 9.9899}, {14.09851, 
             8.93313}, {13.48093, 8.144059999999998}, {12.86377, 
             8.933209999999999}}, {{12.60539, 8.80729}, {13.07211, 8.2105}, {
             12.20383, 8.51926}, {11.69399, 9.207640000000001}}, {{13.34039, 
             7.816750000000001}, {13.34039, 6.702810000000001}, {
             12.293999999999999`, 7.055390000000001}, {12.262530000000002`, 
             8.2}}, {{11.97714, 8.353090000000002}, {12.00295, 
             7.415180000000001}, {11.55736, 8.047659999999999}, {
             11.456740000000002`, 9.055730000000002}}, {{10.16199, 
             7.578840000000001}, {11.359990000000002`, 7.839730000000001}, {
             11.93624, 7.021730000000002}, {10.97586, 6.66539}}, {{
             11.016440000000001`, 6.38067}, {11.74664, 6.651610000000002}, {
             11.18759, 5.92502}, {10.357750000000001`, 5.64171}}, {{
             10.419440000000002`, 5.365740000000002}, {11.27625, 5.65826}, {
             12.181249999999999`, 5.391480000000001}, {11.41413, 5.14879}}, {{
             11.429440000000001`, 3.6768399999999986`}, {11.551440000000001`, 
             4.897399999999999}, {12.526169999999999`, 5.205770000000001}, {
             12.55101, 4.16919}}, {{12.60754, 5.558840000000002}, {
             11.509590000000001`, 5.88251}, {12.20647, 6.788230000000002}, {
             13.253540000000001`, 6.435409999999999}}, {{13.34042, 
             3.2504900000000028`}, {12.833490000000001`, 4.117919999999998}, {
             12.814119999999999`, 4.925980000000001}, {13.34042, 4.15807}}, {{
             13.48096, 4.450240000000001}, {12.83467, 5.3932400000000005`}, {
             13.48096, 6.270240000000001}, {14.127249999999998`, 
             5.3932400000000005`}}, {{14.127959999999998`, 
             4.117769999999998}, {13.62153, 3.250720000000001}, {13.62153, 
             4.15807}, {14.147639999999999`, 4.925700000000001}}, {{
             13.708409999999999`, 6.435409999999999}, {14.755480000000002`, 
             6.788230000000002}, {15.45236, 5.88251}, {14.35436, 
             5.558840000000002}}, {{14.41041, 4.168940000000001}, {14.43565, 
             5.205680000000003}, {15.41, 4.897}, {15.531869999999998`, 
             3.6763200000000005`}}, {{15.547509999999999`, 
             5.1483599999999985`}, {14.780389999999999`, 5.391360000000001}, {
             15.68567, 5.65821}, {16.542669999999998`, 5.365090000000002}}, {{
             16.60379, 5.641249999999999}, {15.774359999999998`, 
             5.924939999999999}, {15.21554, 6.651240000000001}, {
             15.945540000000001`, 6.380030000000001}}, {{15.98616, 6.66484}, {
             15.025730000000001`, 7.021660000000001}, {15.602219999999999`, 
             7.8392}, {16.8, 7.578090000000001}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           FilledCurveBox[{CompressedData["
1:eJxTTMoPSmJiYGDYBsTMQMzIwszIDEUMjAxw9qjIgDtgkIgAAMeOBqk=
             "], {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, {CompressedData["
1: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
             "], {{13.48089, 1.9509299999999996`}, {10.96851, 
             1.9509499999999989`}, {8.931845, 3.9876499999999986`}, {
             8.931859999999999, 6.500030000000001}, {8.931874999999998, 
             9.0124}, {10.96857, 11.049077}, {13.48094, 
             11.049069999999999`}, {15.993319999999999`, 
             11.049062999999999`}, {18.03, 9.01238}, {18.03, 6.5}, {18.03, 
             5.2935}, {17.55072, 4.1364199999999975`}, {16.6976, 
             3.2833000000000006`}, {15.84447, 2.4301899999999996`}, {
             14.687389999999999`, 1.95092}, {13.48089, 
             1.9509299999999996`}}}]}, 
          FaceForm[
           GrayLevel[0.53726]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerDocumentationIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJRIGZigAElBwht4IDCb0Dwg3h/2248ZuCwROpbdVKv
IlTcEEqj81ng/IKp6gJlpxjR5Bng5sH4qPZB+Qw8cH4D/3SZ8lOcaOZxoNkH
5TcYwfkCcrkyG48Zoak3hpsH46PaB+Prw/kQf+ujmWeAZp+BAwACrS35
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}}, {{{18., 14.}, {3., 14.}, {
            3., 15.75}, {3., 15.888071}, {3.111929, 16.}, {3.25, 16.}, {7.75, 
            16.}, {7.888071, 16.}, {8., 15.888071}, {8., 15.75}, {8., 15.}, {
            17.75, 15.}, {17.88807, 15.}, {18., 14.888071}, {18., 14.75}}}]}, 
          
          FaceForm[
           GrayLevel[0.89804]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 13.}, {19., 
            3.5}, {19., 3.223860000000002}, {18.776139999999998`, 3.}, {18.5, 
            3.}, {10., 3.}, {10., 4.}, {3.25, 4.}, {3.111929, 4.}, {3., 
            4.111930000000001}, {3., 4.25}, {3., 13.}, {19., 13.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJxIGZigAFjBz2T65lLlqo6wPg3sjzuJGdyOqScifU+
8d/I4YfNDutscxaHy/P/eghWGjmssHqStoORwUF81muTS5cMofoYHNzOHZpX
VqEB5xclVx0Sqld3YNgxSVYaqD7rccfWH1vUHDR2RAQ2azI7/Oxdb7sZyC8A
qeNnh/On8l37b2mjBlf/OtxKfp6pOsK8oNkWO/+ro9mn4TC3Qe1QW7shnP+p
eva/N88NHTY4m6pGAtVH7n7rVGxr5NC6y2OhTou6w+0v6fZBMUYO61+Lv2k7
q+agNdFFf3GCkQPPGS7XXefVHNgWT7JiTDVy+CqUPLPuoprDUYUNRRmZRg4S
YH+rOSxymH9i8h4jh/5/07MvAvk7g60i/gPDa/Hx97m/vNUc0MMXAJkejkw=

            "]]}, 
          FaceForm[
           GrayLevel[0.53726]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}}}, {{{17.824, 11.118}, {17.823, 
            11.28}, {17.692, 11.412}, {17.529, 11.412}, {12.235, 11.412}, {
            12.073, 11.412}, {11.941, 11.28}, {11.941, 11.118}, {11.941, 
            2.8823}, {11.942, 2.8372}, {11.953, 2.7929}, {11.974, 2.7531}, {
            12.045, 3.002}, {12.271, 3.1746}, {12.529, 3.1765}, {17.824, 
            3.1765}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
             4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {
             0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
              0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 
             1, 0}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.04675, 6.052660000000001}, {
             14.98306, 6.096589999999999}, {14.9068, 6.11858}, {
             14.829500000000001`, 6.115309999999999}, {14.83814, 6.15225}, {
             14.84931, 6.188549999999999}, {14.862930000000002`, 6.22396}, {
             14.989640000000001`, 6.231980000000002}, {15.1139, 
             6.186519999999998}, {15.20552, 6.09862}, {15.130299999999998`, 
             6.077719999999999}, {15.121929999999999`, 6.073559999999999}, {
             15.04675, 6.052660000000001}}, {{16.107940000000003`, 
             7.377000000000001}, {16.689980000000002`, 6.79499}, {16.77984, 
             5.8828700000000005`}, {16.32256, 5.198469999999999}, {
             15.865280000000002`, 4.5140699999999985`}, {14.988219999999998`, 
             4.247999999999999}, {14.227759999999998`, 4.562980000000001}, {
             13.4673, 4.87796}, {13.03524, 5.686269999999999}, {13.19582, 
             6.493559999999999}, {13.356390000000001`, 7.30086}, {14.06488, 
             7.882300000000001}, {14.88799, 7.882300000000001}, {15.34556, 
             7.88232}, {15.784389999999998`, 7.70055}, {16.107940000000003`, 
             7.377000000000001}}, CompressedData["
1:eJxlU31MzHEcvvKWRnSX7+9XXaULdfr+7kShOD3GSpzcctRizcupVja3y+at
MJQQtVO3it6U90Niul4c5b2oE5bJEpGGpdKLzNuvf/zjj88+e/Zsn8+z59nj
vmFL2CZrgUAwk5/h3f4gu8pgkaHuVqNJO1mEKd8euo17zaGj/ZXKJ5TAVTX7
g206B1JW+SIhjCArV2GxTePALpCcWczjbpVDp+gQj1s/SMwrCaoNGRN2pnCI
9rk6ZFpNUPyz5NVZEYeuz7f9PeII0vXhH9lCCrYnL7t/A8HH83YVjjIKdeCW
6WELCRx26Lc+8aXo/jpLJn5IMPfAdL9dKgrZkllkeTADfdrJZEUSRWbrHPOA
kcGYqY+v/1pDsbjKVhr4iMGNGMPIc/4UGVcU16a0MQiRdg7oCcW7p/ft43sY
bB47VBjjQaFL3laRuoJFwGjNlW0FFO/XHr5YZ2Zxn+wTZ5ZS2ChOrCqoZ7Ho
i7LoWy5Fl29T2I4TLExWBW5BqRSFxx6MU0ezyB0xMqFvO0WEZt6bFRwLRUhl
dG8ehYTLKvcQs9B2Jz9S1/D3dx88hT8M/EpX7bv3liLf/vTNmmYGz1zuNjhU
Ulx3k0ruHGaw7rjfJ3f+n9EfM4LlDEqG/dvP62ku1irqCMbqVLXKKoqOaF7J
G4ISq+pRwj6Kl8LehY0dBE8ifPPyKAdrtrGwiOdFkraJFzLlSLGvLT66keCy
kNrFNMihnKkjA33/48Ra4QSvKjm2V6R+vbuZ9zdH854a5ehkM262JjE4oLES
mfpleH2rrKlEzUJvMSRIQ2VI7C1VxUc6oty8JLa+gkN3s+bozlQneNGevWU5
HAw9fKDznRHVxF4qjuOgbj2mjSwVQ3IoKuiqksP3QUfGTuOC5ZPSln56Tv/x
jvd0yy7y/k3zsTGKI53RbloZELGHIvRCUoBrghMaZs854/nFG4gTeQ62sAgv
2+gxMd0bAst6c7WAgVN+lLRe643Mtb8X/Rg/CRZJy9DuAIpIeYru1C8hvEKa
lWZe3w9XmX+XrxDO49u4DL4PW41HWmL5PvwFn0hNig==
             "], {{14.929780000000001`, 6.679259999999999}, {14.99634, 
             6.637309999999998}, {15.059230000000001`, 6.58981}, {15.11778, 
             6.537259999999998}, {15.13069, 6.72777}, {15.13348, 
             6.918830000000002}, {15.12614, 7.109630000000001}, {15.0175, 
             7.005190000000001}, {15.00081, 6.98846}, {14.888, 
             6.879850000000001}, {14.90472, 6.82555}, {14.929780000000001`, 
             6.679309999999999}, {14.929780000000001`, 
             6.679309999999999}}, CompressedData["
1:eJxTTMoPSmViYGBQB2IQ/fq/zLPT0QYOjyLEt19cIOGgUm/w4Q6QH8NRFHCI
R9pBfUHnhoc/9R1mxZ9lbLKUdXh/ZI248009hxjjn2mzpeUcdr48X7dkh66D
zQ7r7O1/5Rx6X3J62xToODQUu035libnsG5mzeazc7UdJhznCTk2X8bhvOd7
6fjTWg5zpC8LT7sh5TAr5YnOm5laDgpbOyf/tpVwkFpcGmKqqO1wQi9wr6mA
mMNXV6foc6naDhsy7xV2nRN3sBBdabDtgrbDsSkei6YXSjqw/HKZpxKr43Bj
XqTQgmdSDiBjZLt0HDy2+h9PVpNxMOuL6PZ/qOOgJTH1CqeHrIP6VTvZ/khd
h3XMz3s0dOUcIu6+snxZq+tg8kpR6q6jrMOaFQdNePp1HY6JNclM+SDj8Dux
5UPGZl0Hn797VnqwyjgIlMo3XGHTc7CadLreA+ifblHTGW2Ceg51QW8vf9wh
47BQ44L6pxQ9h1UVyp9PxMs6fFs1lXN/iZ7Dr1vG3kwmMg7qntd99lXqOdz6
8MUrkk3aIcvjTvLLYj2HOeVzFinflHQIm7967Y3/eg4JKluexryScFjkMP/E
5Cn6DkElKtP/C0g49MYuqsqWMHCYsOCH4TM/cYdN13fb32M2cPiRpKF+66qY
w8zGUz++39R3MDqyUS8vWcxB694Jm0/L9R1SPhfmrvgh6vCsR+Mtb52+A0vx
lx9734o6+L9M+Ds/GMHnnnFg7W5NhPolBbZc14P1HOZ92fdxq7qYg+D9zkj9
MKD58xyd/y8Rdqg71sqsKGngcM2SLWX9dhEHI+apH98D08+WnLX6QrPEHCoj
VpieBfKPPTyz/hkwfQEAdeMU4A==
             "], {{13.11765, 9.647049999999998}, {16.647060000000003`, 
             9.647049999999998}, {16.647060000000003`, 10.23529}, {13.11765, 
             10.23529}}, {{13.11765, 8.47058}, {16.647060000000003`, 
             8.47058}, {16.647060000000003`, 9.058810000000001}, {13.11765, 
             9.058810000000001}}}]}, {
           EdgeForm[
            CapForm["Butt"]], 
           EdgeForm[
            JoinForm[{"Miter", 10.}]], 
           EdgeForm[
            Thickness[0.]], 
           EdgeForm[
            GrayLevel[0.65098]], 
           FaceForm[
            GrayLevel[0.65098]]}]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerTIFFIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{16.5, 2.}, {4.5, 2.}, {
            3.6719479999999995`, 2.0009000000000015`}, {3.0009040000000002`, 
            2.671949999999999}, {3., 3.5}, {3., 17.5}, {3.0009040000000002`, 
            18.328052}, {3.6719479999999995`, 18.999096}, {4.5, 19.}, {16.5, 
            19.}, {17.32805, 18.999096}, {17.9991, 18.328052}, {18., 17.5}, {
            18., 3.5}, {17.9991, 2.671949999999999}, {17.32805, 
            2.0009000000000015`}, {16.5, 2.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 18.}, {16.5, 
            18.}, {16.7764, 18.}, {17., 17.7764}, {17., 17.5}, {17., 3.5}, {
            17., 3.223600000000001}, {16.7764, 3.}, {16.5, 3.}, {4.5, 3.}, {
            4.2236, 3.}, {4., 3.223600000000001}, {4., 3.5}, {4., 17.5}, {4., 
            17.7764}, {4.2236, 18.}, {4.5, 18.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
            13.57129, 13.35693}, {12.979560000000001`, 13.357063}, {12.49995, 
            13.836817}, {12.49999, 14.42855}, {12.50003, 15.020283}, {
            12.97972, 15.499966}, {13.57145, 15.50001}, {14.16318, 
            15.500053999999999`}, {14.64294, 15.020443}, {14.643069999999998`,
             14.428709999999999`}, {14.64252, 13.837011}, {14.16299, 
            13.357481}, {13.57129, 13.35693}}}]}, 
          FaceForm[
           RGBColor[0.9451, 0.76471, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {
             1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQHaDhBaBUrLwflMqqxiB1xkHfqslzZ//a/swDGp
nC91hozDK6c1/ziMVRzk9CzfTbGTcXDybGQ1aFVxMD/16+yRJ9IO0/3DeMKv
qzj49F44f+W1tMOvuqw9JdaqDiElKtP/B8g4cF9fXGDbpepQ7sX++r+PosOa
7tsZDPlaDlpmz0qPFCo6LLn7ItluhZbDCuWG2UdXKzoc+zk7oOOClgPLpuu7
7d8pOqwFqb+v5dA0cbrpRgMlh7hMyZXf32g5ZBpWzPhWquTwQsBCKOOBloPc
wy0PXNcrOahcexTMsEfLQazH6xXLFhUHG6B36vM0HWb3ZzsfvaHmYPF5taXD
Bm2H0KxvDtoC6g4Nuutj8l9rO/yrWB81M0HdIUQimqOIQ8eh91rgVZaN6g7M
IHf803boWTgnI5xRw6HF+/ic9C/aDpogh3poOEREub2yPart8N/u8aHGAg2I
/+q1HSZyJXM73tOGuL9e1WGzZnjFdG4dhzh+taPH9VUdOIoCDvkA+TbZ22Mz
zqk42Knvza+5q+2w7MOCm6X1Kg5FdzRl16zXdhAo6wptNlBxOM+v3OIere3w
xJB56kdg/KDHJwAEHLkm
             "], {{8.415530000000002, 11.}, {12.638179999999998`, 11.}, {
             11.68506, 12.668}, {10.791059999999998`, 11.72708}, {10.62513, 
             11.553912}, {10.36001, 11.522025000000001`}, {10.15775, 
             11.65091}, {9.221229999999998, 12.254909999999999`}}}]}, 
          FaceForm[
           RGBColor[0.29412, 0.83922, 0.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBWIQLa1/V4WNUd+BAQyUHE4vdN32+a8onN8kXsuaWSbq
0Dcp/LkEkB/vLrOp8YuIg1PC0wtK0koOK1Zbi92eIuLwJrN9v5q3ksNH/ugq
E1MRB5UzW/5qVys5HBENWLH8v7CDSnqiv/UeJai5IlBaGZXfYABXP0nJaM2j
hQZw8wQLOEKzDhnA7TsRva4u55YB3D2K9tI78z4ZwN173f9/5Of/Bmj+MXRA
9a+hQ4sCu+oZF324ei/5XQv2terDzcuMsRCYtFUfbl/LzG31qU/14e4pfOjg
IcZgAHcvxFwDuH9Q+ED/wtTDwgNmHiy8YPbBwhPmHlh4w9wLiw/0+AMALQSV
4A==
             "], {{5.996060000000001, 10.}, {15.00394, 10.}, {15.00394, 
             16.}, {5.996060000000001, 16.}}}]}, 
          FaceForm[
           RGBColor[0.7098, 0.80392, 0.87451]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}}}, {{{7.476430000000001, 7.56917}, {6.447, 7.56917}, {
             6.447, 4.}, {6.027209999999999, 4.}, {6.027209999999999, 
             7.56917}, {5., 7.56917}, {5., 8.}, {7.476430000000001, 8.}}, {{
             8.85472, 4.}, {8.43225, 4.}, {8.43225, 8.}, {8.85472, 8.}}, {{
             11.84251, 5.766640000000002}, {10.49879, 5.766640000000002}, {
             10.49879, 4.}, {10.07679, 4.}, {10.07679, 8.}, {12.06027, 8.}, {
             12.06027, 7.56917}, {10.49879, 7.56917}, {10.49879, 
             6.197459999999998}, {11.84251, 6.197459999999998}}, {{
             14.782259999999999`, 5.766640000000002}, {13.43854, 
             5.766640000000002}, {13.43854, 4.}, {13.01654, 4.}, {13.01654, 
             8.}, {15., 8.}, {15., 7.56917}, {13.43854, 7.56917}, {13.43854, 
             6.197459999999998}, {14.782259999999999`, 6.197459999999998}}}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerUnknownIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
             0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
             0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
             0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {
             0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
             0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
             0}}}, {CompressedData["
1:eJxTTMoPSmViYGBQB2IQHTjbYud9Rz2HG+e+Bz9eyu5wzDjjxfwJBg4r1tVM
e87I4uCr4XJA8Y2BwwHdUzkTOFkcdLZvkRKyN3QoCExr9tnE6sC86fpu+zRD
hx2SeQeeu3M4rLfdrOLw1cAhQPK/3eMmdofDjRN0EibpO2wou936rIrLYef9
hRoX9A0dElo+ZDw+wevAAAINhg4bLnt4P33LA+c7vPFZ+HmXgINTwtMLStGG
DueSkj4XvhVw2NV8Y6ZTvYHDHR7zB5+TReHqWwI95zY8E4bz+yK6/RkNxBy2
nijbN1/JwOHa0VyTBnMJBz7dTXPf8xs6NKzbllRfKeuwM9gq4n+9oYPHmqPL
GSQQfD52p00NnvIOohMTRfNtDB0ObH95vq5FHm6+ptWk0/Ucqgj7JFf01Mer
OrzdrfTj/i1dhw2gcJBVhsgzaENpDYdWLdPqBaoaDi8M4uMagPLXQe76ruRw
R1N2zf9kVYg725UdFrTM3FbfKu+wepbCKzsGGQe2AxVsvLKyDkvMCov2H1Z0
cOnOef57pQjUXBmHDd23MxjyORy8zTsdE0Rh9rI4vH5kJnXgtgqcvy7luJvC
PnWHDztvdf0FxvfB5+2Chw6rw+Xr7oUsOcShBefPWPvV1em1hkNA7/Q8oWYu
uH++mC8UYHwu5NDGrBh5QEQXLj/v0sFf9t+14forlT+fkLfRg/MB09PfBQ==

             "], {{16.686, 7.765140000000002}, {16.00777, 
             6.803710000000001}, {16.04777, 8.25342}, {16.841960000000004`, 
             9.32471}}, {{14.986, 8.997559999999998}, {16.38884, 9.61328}, {
             15.61564, 8.57028}, {14.28, 8.0957}}, {{12.01489, 8.998}, {
             12.720699999999999`, 8.09516}, {11.38452, 8.57026}, {
             10.611329999999999`, 9.614259999999998}}, {{10.952150000000001`, 
             8.253860000000001}, {10.99215, 6.80415}, {10.31441, 
             7.766060000000001}, {10.1589, 9.32466}}, {{8.01074, 6.94966}, {
             9.938229999999999, 7.369580000000001}, {10.86475, 6.05415}, {
             9.319580000000002, 5.481}}, {{9.397, 4.937999999999999}, {
             10.50345, 5.348640000000001}, {9.643999999999998, 
             4.231930000000002}, {8.38424, 3.8017600000000016`}}, {{10.04153, 
             2.939460000000004}, {8.50174, 3.275400000000001}, {9.81326, 
             3.723149999999997}, {11.21365, 3.3105600000000024`}}, {{12.0264, 
             3.6294000000000004`}, {10.25809, 4.15089}, {11.38016, 
             5.608890000000001}, {13.066440000000002`, 5.04102}}, {{13.22659, 
             5.550790000000001}, {11.544459999999999`, 6.118169999999999}, {
             11.49222, 7.961920000000001}, {13.22659, 7.34474}}, {{12.50759, 
             9.23779}, {13.5, 10.937499999999998`}, {14.49341, 9.23779}, {
             13.5, 7.968750000000002}}, {{13.77346, 7.34473}, {
             15.506369999999999`, 7.961910000000001}, {15.457, 6.11816}, {
             13.77341, 5.550780000000001}}, {{13.93361, 5.04102}, {15.61989, 
             5.608890000000001}, {16.741960000000002`, 4.15089}, {
             14.973650000000001`, 3.6294000000000004`}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerWLIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, {CompressedData["
1:eJxllAtMk1cUxyvSCSgOaUtftP2+rxT5KAXFqUVE/tOCVREVg07GBGFA6iwG
EAEHuimE1SG+R1ScgFJBqCAL4Mx4jIGOKuqc4nyhNgMVxmM8dFMHaxfDEj3J
yc0v59yce3L/55BRm0NirBgMxjKzW07H992OJc52wa2q6nr1bzKE/lhyKnil
C5xrFMZNqW44sng08pGPCwx1K0IL+XKsqptdGTooRWyB92hGjQJUPeu79ekU
jim/f1io9EDbperCqCAKT2dv1XX/I4eClAxvaidAbdVfTzvujlPBYG2YRaDd
mBnRXesBZsvemSltEsxx6Ts3nKCAXD3LaXm2GOFh9rrPc7wwZN0UfG6pAJNr
011kGQrkje3b/moeF/n6a1PPd7mDDt/bNFLCweUd6oYMezfEF9+OjY6ZhtSC
4LQtx2SIfz7JqPWdgrq1hqC/Wigw/jMb3OQZTp7RSMZ56vwXYk8fx3c46bbj
4IebHfFgElGtWy1Dj/PEqtv3nJDVs+q8mDkdyQd51ms8+fBsCY15yKGxZX10
XkkHH2yV+YbMA2OpFWFHHMTIfW/ASd2owDO15xgpkiBIbxcoM8f1vRHrNFEE
Znz5ccqQNY2fFjcfUg8S2JArbqjVTMdX7bvnXNJJseJwP1/X6IIby6McPkpz
ha6/uZybRKGy/AOaaaBhena4asp+Aoy1VdHSARr9fuGJ9zUELtjR/qWB7hAr
41SaCvE7/Jn6fvSzRTSsbHdLos8KwTm7+PG2YWfEWqxLhF8t9f4WwOGTlQ+9
J4lBt3Ul8F7zMBznH6Iyx6e0JQs0tlw0ZoiUcZkitEXmqNlGLjaG2F2oU0lQ
cWDvA2Y3D3ZanzzTRgKa/b3p/qECPHlV+ucNexJZ83cKaV8+vOJPTvghmYSX
cldDxGsuvk4YdWU3kchgai4WlTrBSp7tdKePRL1wst0uby72DM0tdEigcPB0
ub7nDhfVneG7y7opSAsVT0LyeTgaVtPOXSeFdt+SwKtWPPSY5ggafaVY9MQs
zDMsPI1hX1b4UZjad/Wudi4Lz93MQoohoev8Zs2iRDaMnI5OagGJm0ULWkV6
DlQve3sabUn8/MUfI33XnLDjYtZEspVASlxvzWQ/Dp5eHM6U1UuwzPKvAWzk
h54oM6SKsDDpeGCYHRvNCw2ajmlCrGf7Dcy04cH8WmN9mRAs5kvVt2xnpAYM
NBy+IkTbtpmHWPYEmoyFATVJQhSZxnJLeAQKHkUF2McKIXdk3RyQEfh9e3YR
IoTj88SYdyWPGylE5WnR6NEcEpR3uWlPkBAjQ3qKE+v6RtcMhCsdDjCD6HF+
8Uup/ESxFDZmea7MF2BGuipI9+l0PJ+g1pqa+fCxpBNueBmubRk9wIdk2mpK
1/E/uxYX3Ft2lB7PP7Qz3kuT7o4z8hOdadeFqF5aqcxfIkeXpeFR0Zu6Hrib
aJ4Ycx+PK1oFI6CRZaPMdL9FwqzKzQPFrvCn9CrHOine3k//Ak892E8=
             "], {{9.617389999999999, 11.266640000000002`}, {
             9.355364000000002, 11.506809}, {9.073421, 11.7243}, {8.7746, 
             11.91677}, {8.7746, 11.91677}, {8.66219, 12.48534}, {
             8.587309999999999, 12.73394}, {9.09304, 13.23107}, {9.16793, 
             13.30761}, {9.65491, 13.785590000000001`}, {9.687847, 
             12.945878}, {9.675329, 12.104999}, {9.61741, 
             11.266640000000002`}}, {{8.50275, 9.731640000000002}, {
             9.072936000000002, 9.76756}, {9.631433, 9.558930000000002}, {
             10.038419999999999`, 9.15798}, {9.701419999999999, 9.06244}, {
             9.66393, 9.043289999999999}, {9.32679, 8.947599999999998}, {
             9.042788, 9.148219999999998}, {8.700315999999999, 9.24909}, {
             8.352910000000001, 9.23443}, {8.391562, 9.40336}, {8.441624, 
             9.56948}, {8.50275, 9.731640000000002}}}]}, 
          FaceForm[
           RGBColor[0.86667, 0.066667, 0.]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerXMLIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.726999999999999, 6.01648}, {
             7.884519999999999, 4.}, {7.323999999999999, 4.}, {
             6.443760000000001, 5.560419999999999}, {5.55859, 4.}, {5., 4.}, {
             6.160519999999999, 6.01648}, {5.027529999999999, 8.}, {
             5.580260000000001, 8.}, {6.44373, 6.4670000000000005`}, {7.30133,
              8.}, {7.858, 8.}}, {{10.21241, 4.736269999999999}, {9.04211, 
             8.}, {8.43231, 8.}, {8.43231, 4.}, {8.90442, 4.}, {8.90442, 
             5.558230000000002}, {8.85815, 7.23077}, {10.03149, 4.}, {
             10.392400000000002`, 4.}, {11.56769, 7.239559999999999}, {
             11.52338, 5.558230000000002}, {11.52338, 4.}, {
             11.995480000000002`, 4.}, {11.995480000000002`, 8.}, {
             11.382750000000001`, 8.}}, {{13.303540000000002`, 4.43079}, {
             13.303540000000002`, 8.}, {12.82854, 8.}, {12.82854, 4.}, {15., 
             4.}, {15., 4.43079}}}]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerTXTIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIJIGYC4j0TK5/wfzN0yHv0pK49SddhVzbnzwXvDR22
KF8tr2vUdbg50+m56TNDh13zgyfMn6vrkJfn4x9xy9BhkQBje8BWXSitDRU3
ctiXlXpIv1XbweqZTXL8JyOHn7eMvZlctB0eremY9eK/kQMDGGhDaWMoLQDn
F+88GNA+lduhOatZ+CJQ/fPVT5LLGTkcLp14LurfC9PPAaXR+Rxw9Qn2QS5t
U5nh5jEsOFxTyciAZh+Mbwjni+woNffvNUSo70m/cOG/Idw87PbC+LoOfF4z
Mn8D1T+bLHr4qqKuQ8bv8LBZfwwdhGSmFwY76zqghzcABAZ3MA==
            "]]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}}}, {{{4., 3.}, {4., 18.}, {13., 18.}, {17., 14.}, {17., 3.}, {
            4., 3.}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, {{{13., 18.}, {13., 14.5}, {12.99992, 
            14.367367999999999`}, {13.052580000000003`, 14.240146}, {
            13.146359999999998`, 14.146362}, {13.240149999999998`, 
            14.052577}, {13.36737, 13.999922999999999`}, {13.5, 14.}, {17., 
            14.}, {17., 15.}, {14., 18.}}}]}, 
          FaceForm[
           GrayLevel[0.65098]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14., 
            17.293}, {16.293, 15.}, {14., 15.}, {14., 17.293}}}]}, 
          FaceForm[
           GrayLevel[1.]]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 
            1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
            0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0,
             2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
            0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0,
             1, 0}}}, CompressedData["
1:eJx10DEKgDAQRNFFbexTWGyhSwgp9hA5g0cQrL1/Z8Bs4cAIYXjwhZDjes57
FpG1n6WfSeLb27c2Volz+/dhBxtxrIPL2Ar/oQtZg16JsQ879Gyxx3vEuygx
3iPs0Fdi7NHb2EycoA8b9EqMfWovO5kdXA==
            "]]}, 
          FaceForm[
           RGBColor[0.33725, 0.83529, 0.98823]]]}, ImageSize -> {20., 20.}, 
        PlotRange -> {{0., 20.}, {0., 20.}}, AspectRatio -> Automatic]& )}], 
   Cell[
    StyleData["FileManagerFileOpenerTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TagBox[
         PaneBox[#, ImageSize -> {Full, Automatic}], 
         EventHandlerTag[{{"MouseClicked", 1} :> If[
             FileExistsQ[#2], 
             SystemOpen[#2], 
             DefinitionNotebookClient`FancyMessageDialog[
             "Paclet", "File not found: " <> ToString[#2]]], Method -> 
           "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
        MouseAppearanceTag["LinkHand"]]& )}], 
   Cell[
    StyleData["HintPodTitleBar"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.97], 
         FilledCurveBox[
          BezierCurve[{
            Offset[{0, -3}, {1, 1}], 
            Offset[{0, -1.3443}, {1, 1}], 
            Offset[{-1.3443, 0}, {1, 1}], 
            Offset[{-3, 0}, {1, 1}], 
            Offset[{-3, 0}, {1, 1}], 
            Offset[{3, 0}, {-1, 1}], 
            Offset[{3, 0}, {-1, 1}], 
            Offset[{1.3443, 0}, {-1, 1}], 
            Offset[{0, -1.3443}, {-1, 1}], 
            Offset[{0, -3}, {-1, 1}], 
            Offset[{0, -3}, {-1, 1}], {-1, -1}, {-1, -1}, {-1, -1}, {1, -1}, {
            1, -1}}]], 
         InsetBox[
          FormBox[
           StyleBox[
           "\"Notebook Analysis\"", FontColor -> GrayLevel[0.4], FontColor -> 
            GrayLevel[0.4], FontFamily -> "Source Sans Pro", FontWeight -> 
            Plain, FontSize -> 13, StripOnInput -> False], TraditionalForm], 
          Offset[{8, 0}, {-1, 0}], 
          NCache[
           ImageScaled[{0, 1/2}], 
           ImageScaled[{0, 0.5}]]], 
         TagBox[
          TagBox[
           TooltipBox[{
             GrayLevel[0.6], 
             DiskBox[
              Offset[{-13, -10}, {1, 1}], 
              Offset[6]], 
             GrayLevel[0.97], 
             AbsoluteThickness[1.5], 
             CapForm["Round"], 
             LineBox[{{
                Offset[{-15, -8}, {1, 1}], 
                Offset[{-11, -12}, {1, 1}]}, {
                Offset[{-15, -12}, {1, 1}], 
                Offset[{-11, -8}, {1, 1}]}}]}, 
            FrameBox[
             StyleBox[
             "\"Close analysis pod\"", "Text", FontColor -> 
              RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
              "Plain", FontTracking -> "Plain", StripOnInput -> False], 
             Background -> RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
             RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8, 
             StripOnInput -> False], TooltipDelay -> 0.1, 
            TooltipStyle -> {Background -> None, CellFrame -> 0}], 
           Annotation[#, "Close analysis pod", "Tooltip"]& ], 
          EventHandlerTag[{"MouseClicked" :> NotebookDelete[
              EvaluationCell[]], Method -> "Preemptive", PassEventsDown -> 
            Automatic, PassEventsUp -> True}]]}, AspectRatio -> Full, 
        ImageSize -> {Full, 20}, PlotRange -> {{-1, 1}, {-1, 1}}, 
        ImageMargins -> {{0, 0}, {0, 0}}, 
        ImagePadding -> {{0, 0}, {0, 0}}]& )}], 
   Cell[
    StyleData["HintPodDelimiterTop"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         AbsoluteThickness[1], 
         GrayLevel[0.85], 
         CapForm["Round"], 
         LineBox[{{-1, 0}, {1, 0}}]}, AspectRatio -> Full, 
        PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> {{0, 0}, {0, 0}}, 
        ImageSize -> {Full, 2}, BaselinePosition -> Scaled[0.1], 
        ImageMargins -> {{0, 0}, {4, 0}}]& )}], 
   Cell[
    StyleData["HintPodDelimiterBottom"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         AbsoluteThickness[1], 
         GrayLevel[0.85], 
         CapForm["Round"], 
         LineBox[{{-1, 0}, {1, 0}}]}, AspectRatio -> Full, 
        PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> {{0, 0}, {0, 0}}, 
        ImageSize -> {Full, 2}, BaselinePosition -> Scaled[0.1], 
        ImageMargins -> {{0, 0}, {0, 4}}]& )}], 
   Cell[
    StyleData["HintPodFooter"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.97], 
         FilledCurveBox[
          BezierCurve[{{-1, 1}, {-1, 1}, 
            Offset[{0, 3}, {-1, -1}], 
            Offset[{0, 3}, {-1, -1}], 
            Offset[{0, 1.3443}, {-1, -1}], 
            Offset[{1.3443, 0}, {-1, -1}], 
            Offset[{3, 0}, {-1, -1}], 
            Offset[{3, 0}, {-1, -1}], 
            Offset[{-3, 0}, {1, -1}], 
            Offset[{-3, 0}, {1, -1}], 
            Offset[{-1.3443, 0}, {1, -1}], 
            Offset[{0, 1.3443}, {1, -1}], 
            Offset[{0, 3}, {1, -1}], 
            Offset[{0, 3}, {1, -1}], {1, 1}, {1, 1}}]], 
         InsetBox[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               TemplateBox[{3}, "Spacer1"], FontColor -> GrayLevel[0.4], 
               FontFamily -> "Source Sans Pro", FontWeight -> Plain, FontSize -> 
               12, StripOnInput -> False], 
              
              StyleBox[#, FontColor -> GrayLevel[0.4], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 12, 
               StripOnInput -> False], 
              StyleBox[
               TemplateBox[{5}, "Spacer1"], FontColor -> GrayLevel[0.4], 
               FontFamily -> "Source Sans Pro", FontWeight -> Plain, FontSize -> 
               12, StripOnInput -> False]}, "RowDefault"], TraditionalForm]], 
          
          Offset[{5, 2.5}, {-1, 0}], {-1, 0}]}, AspectRatio -> Full, 
        ImageSize -> {Full, 21}, PlotRange -> {{-1, 1}, {-1, 1}}, 
        ImageMargins -> {{0, 0}, {0, 3}}, 
        ImagePadding -> {{0, 0}, {0, 0}}]& )}], 
   Cell[
    StyleData["HintPodMenuItems"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (
       TemplateBox[{#, FrameMargins -> 3, Background -> GrayLevel[1], 
         RoundingRadius -> 0, FrameStyle -> Directive[
           AbsoluteThickness[1], 
           RGBColor[0.75686, 0.82745, 0.88235]], ImageMargins -> #2}, 
        "Highlighted"]& )}], 
   Cell[
    StyleData["HintPodActionMenuItem"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        TemplateBox[{
          TagBox[
           GridBox[{{#, 
              TemplateBox[{7}, "Spacer1"], #2}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], FrameStyle -> 
          None, RoundingRadius -> 0, FrameMargins -> {{5, 2}, {2, 2}}, 
          ImageSize -> Full, ImageMargins -> {{0, 0}, {0, 0}}, Background -> 
          Dynamic[
            If[
             CurrentValue["MouseOver"], 
             GrayLevel[0.96], 
             GrayLevel[1.]]]}, "Highlighted"], ButtonFunction :> 
        ReleaseHold[#3], 
        Appearance -> {
         "Default" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True]}, Method -> 
        "Queued", Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["HintPodDisabledMenuItem"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        TemplateBox[{
          TagBox[
           GridBox[{{#, 
              TemplateBox[{7}, "Spacer1"], 
              StyleBox[#2, FontOpacity -> 0.4]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], FrameStyle -> 
          None, RoundingRadius -> 0, FrameMargins -> {{5, 2}, {2, 2}}, 
          ImageSize -> Full, ImageMargins -> {{0, 0}, {0, 0}}, Background -> 
          GrayLevel[1.]}, "Highlighted"], ButtonFunction :> Null, 
        Appearance -> {
         "Default" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True]}, Method -> 
        "Queued", Evaluator -> Automatic, Enabled -> False]& )}], 
   Cell[
    StyleData["HintPodActionLabel"], 
    TemplateBoxOptions -> {DisplayFunction -> (PaneBox[
        StyleBox[#, FontColor -> GrayLevel[0.2], FontFamily -> 
         "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, LineIndent -> 
         0, StripOnInput -> False], FrameMargins -> 0, ImageMargins -> 0, 
        BaselinePosition -> Baseline, ImageSize -> Full]& )}], 
   Cell[
    StyleData["HintPodMenuDelimiter"], 
    TemplateBoxOptions -> {DisplayFunction -> (PaneBox[
        StyleBox[
         GraphicsBox[{
           CapForm["Round"], 
           GrayLevel[0.9], 
           AbsoluteThickness[1], 
           LineBox[{{-1, 0}, {1, 0}}]}, AspectRatio -> Full, 
          PlotRange -> {{-1, 1}, {-1, 1}}, ImageMargins -> {{0, 0}, {2, 2}}, 
          ImagePadding -> {{5, 5}, {0, 0}}, ImageSize -> {Full, 2}], 
         LineIndent -> 0, StripOnInput -> False], FrameMargins -> 0, 
        ImageMargins -> 0, BaselinePosition -> Baseline, ImageSize -> 
        Full]& )}], 
   Cell[
    StyleData["HintPodIconChevron"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.2], 
         AbsoluteThickness[1.8], 
         CapForm["Round"], 
         JoinForm["Miter"], 
         LineBox[{{-0.5, 1}, {0.5, 0}, {-0.5, -1}}]}, AspectRatio -> Full, 
        BaselinePosition -> Bottom, ImageMargins -> {{0, 4}, {0, 0}}, 
        ImageSize -> {5.6, 7.7}]& )}], 
   Cell[
    StyleData["HintPodIconPopOut"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
          0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4h1yra8Dd6g4rHN/WCWip+KwRiYqxXq+isNk
CZYwvlwEDROHqYPpKwUrUHFgAIEDKg5nzwDBG2VU/hlluPogMEMCzm9kOdpv
aC6OJi/mINR84NRCVwQfIq8M519wufHhi5Yymn4lNPOVHNLAQBHO/6YR03/o
K5eDB9Ab69wFHJoeHZ+xexqng8r0/xPqfvM5cG9dVnl8JacD0FO6m+byOPxL
/f4kUZHbQZr3ge4EBW6HD2IeAX9m8Dhkzyqfs2gxp8ONxmK3Kd/4HOYsUt75
p50Tbi6YesgF9b8ShJ+oCOfD3Anjw/zx9JP8pXx7hD9h4QfjqxtyAKNCBU0e
EY4wPqr5iHh4/nvlx0tnVRyYObvkk98pOwA9+X75MRUHWWD03udHxCssngGf
XO7X
          "]]}, AspectRatio -> Automatic, ImageSize -> {14., 14.}, 
        PlotRange -> {{0., 13.62}, {0., 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconWrench"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.4], 
         AbsoluteThickness[1], 
         Opacity[1.], 
         JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJRIGYCYmWv6mZ9n3/2cmJZvp/5BBzci37yv9wu6/Au
ysnuhaQynG8at8uT55AGXJwBDHQdPl3yTRKIUIfzo1Ks7/vzajiosjVOdfbW
ccjaUzJZokUFrv8ySLmlqoPbts9/r1iowsVh6mD6zp4BAh4NnPbA3AHTr+ss
8/rRNoS7YXyYv2D+7H/ySf5SPrdD7D/nX29ff7H/6hXZZnGNGc6HqYPRMPED
b+bZ6FxBqAPpOprL7YAefgCtVISU
          "], CurveClosed -> {1}]}, AspectRatio -> Automatic, 
        BaselinePosition -> Scaled[0.2], ImagePadding -> 0.5, 
        ImageSize -> {16., 16.}, PlotRange -> {{0., 16.}, {0., 16.}}]& )}], 
   Cell[
    StyleData["HintPodIconInfo"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3,
            3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.81, 13.}, {
           3.3914, 13.}, {0.62, 10.229}, {0.62, 6.81}, {0.62, 3.3914}, {
           3.3914, 0.62}, {6.81, 0.62}, {10.229, 0.62}, {13., 3.3914}, {13., 
           6.81}, {13., 10.229}, {10.229, 13.}, {6.81, 13.}}, CompressedData["

1:eJxTTMoPSmViYGCQB2IQbct1fXGBrbRD6+vAHXKtvA7r3B9WiayTdoCI8zgc
/qoR039IHkoLOjCAgYKDB0iZu4CDPFijgsOsmSDAC1UnCzWPE0rLQMXZHV6x
mAia1Ug56E1Y8MMwjdXh685bXX9VJRx4Jq9sCvRkcTh7BgREHfoPgTSwOAQB
db8OFHYAO4eLFeo+IQcRMIMLzoe4h9dBW2LqFc4MYYd4zdMCx38JOviYdzom
pIo4PJgjuHSvo6jDkgKQz0QdCsEelHDQjAHZJAa1VxIqLwH3Jzofok8S4i9W
RQews67LQsJhnoKDMRjIQ9Q3wMJJwQFMJULDSRJmrhzUPKh6Blmof+QcwM6K
kXb4Bgq2rzJQcXFovMhA5UUdciqqluo0SztsKMqY+NZG2OHV1E08hTrSDquA
oTmXQdABPX4BaWq/EA==
           "], {{8.81, 9.79}, {8.8101, 9.5122}, {8.5878, 9.2854}, {8.31, 
           9.28}, {7.51, 9.28}, {7.2283, 9.28}, {7., 9.5083}, {7., 9.79}, {7.,
            10.62}, {7.0054, 10.898}, {7.2322, 11.12}, {7.51, 11.12}, {8.35, 
           11.12}, {8.6239, 11.115}, {8.8447, 10.894}, {8.85, 10.62}}}]}, 
        AspectRatio -> Automatic, ImagePadding -> 0.5, 
        ImageSize -> {14., 14.}, 
        PlotRange -> {{0., 13.62}, {0., 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconNone"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (
       GraphicsBox[{}, AspectRatio -> Automatic, ImageSize -> {16., 16.}, 
        PlotRange -> {{0., 16.}, {0., 16.}}, BaselinePosition -> Scaled[0.2], 
        ImagePadding -> 0.5]& )}], 
   Cell[
    StyleData["HintPodIconIgnoreAlways"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         EdgeForm[None], 
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJTIGYCYpF17g+rROQcbLmuLy6wlXaoBguoOvQf+qoR
w6/i8CZwh1zralWH4oyJb2vsVRx0N819v/yYqoO0/l0VtkYEv/U1UOFRBP/D
8mPe5pyqcP0z8oSaD3ipws2H0famcbs8fVQd2BqnOnevUXUAa+dWdUgSiLDc
ckLVwQPounXHVeB8kK1TmxH8gN7peULOKnD9EP+owM2H+QvmzyUFIBEeuHxC
mb+c2CtuuP75NjpXZj3jgpsP0s11nRPO5+feuqzyOAec73dxYsy/w+xw/WDr
uNjh5n9MPhPr7cEG93+V2Wq78Nus8PCB8WHhB+PDwhemHxb+MPNh8ZMGBhJw
f8Lkv2nEAJXwOGyu/rQh4DWrwwrTs9Z+F7kdvHiYtNunsTrYgrwpy+XQteHh
y6lGbA6HxNWCWRdzOJwKObhiyTk2B3fmCm4VDXaouRwOEaeMjmzUY4OHhybI
eA02eHgt/GH4bJ0qm4PT+bSrz4Hh+Z0tfobPVDZ4eIOVx7DD3QlzNwMYIPx1
smzffCl9FUg4u7M5hPEBU1S+isPs0Pmr195gdTAGgc0qUHewOswDJhfv7yoO
/g7CiYcvszoAU9vrQAtVh6V+QAFnNqg9iHj5dMk3SWAGIt78wBGJiFcYH+ZP
GB/mT5h+WLqBmQ/zJwC4F0s3
          "]]}, AspectRatio -> Automatic, ImageMargins -> {{0, 0}, {0, 2}}, 
        ImageSize -> {14., 14.}, 
        PlotRange -> {{-0.5, 13.62}, {-0.5, 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconIgnoreInCell"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         EdgeForm[None], 
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
           0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
            0}}}, {{{11.69, 13.37}, {7.57, 13.37}, {7.57, 12.37}, {7.76, 
           12.37}, {11.19, 8.93}, {11.19, 1.25}, {7.57, 1.25}, {7.57, 0.25}, {
           12.19, 0.25}, {12.19, 13.37}}, {{9.17, 12.37}, {11.17, 12.37}, {
           11.17, 10.37}}}], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIjIGYCYo+HVSLr3EUdbLmuLy6wlXZYUgBiyTlAxJUc
kt9FOdllyDuU6yrKf1mD4LM879F466sMV28MApuVHX7yv9y+3lkOQj9WdngU
Ib794gFZh/Dojfvf/FN22CHX+jrQAsHvf/JJ/tJ6GTgfbI+ODFz/2TMgIA03
vxroqodVQg5gSkQO6m4mVPubGR1E7I/d2fpE2cHy2tFckwYGB2n9uypsjCoO
YG89/GcP4wd5zm1QO/QHzr9wNeyN/u5f9jD9kHD4aQ8zX+z36XcnD3+3v8fE
2SXfrOygvqBzw8OX3+yDQAxHBB/srr9KcL7mW959BjuV4PrnCi7de7BcCW4+
LLwhND88PmDyEHcLOjg2PTo+Y/d3+/21shbpLYIOTglPLyjd/mZ//wH35JVM
CD4knATgfL0JC34YPuOH688Nq1237REf3HzNmP5DXzX4HLhVNOp6dv6yP3xZ
O1UyiRcePrlH/22q/sQDD79vGiANPA5yy1946NUzOOy61fU39TuPw5GNenmL
GxkdwPal8cLjB2Y+LP7SwEDCgQEMZODyf7+VPpgTKOOw9ldM7tE6XgfmCqCL
9sk43PfvnZ4nxAuJZ2NZB5j9UV933uraK+swf/XaG/HfeCDudZJzuA1yTgov
PH3CzBcAJg/mdHmHVElQyuSH851lXj8ykxKEq4eFNwCKHGBr
          "]]}, AspectRatio -> Automatic, ImageMargins -> {{0, 0}, {0, 2}}, 
        ImageSize -> {14., 14.}, 
        PlotRange -> {{-0.5, 13.62}, {-0.5, 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconIgnoreInNotebook"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJTIGYC4qAdcq2vAwUcbLmuLy6wFXdYUgBiSTp4PKwS
Weeu4GCgtVL4AouUw1zBpXsPlis4vDlgqexlLeWg+ZZ3n8FOBB+s/y+CH6S+
oHODoyJc/z0mzi75ZkW4+cYgsFnRoanYbco3N0kHEftjd7Y+UXRYeM3kvcVR
CYeQx0tnH2FQgroLwb9pWxmxYqs4nP9zQfrmV8bicP0g1VzXxeDmf9OI6T/0
lcsB6Bmgj6QcGMDggz1MvoTnRNz7f2/sf/K/3L7+saLDzmCriP/PX9iHR2/c
/+YfzL1P4Pz+Xoc96+IfwPkrVqZm1068AdcPtAxo4yW4+ccenln/jOGkPcz/
MjWJRqEGh+xh4QPjw8IPxoeFL0w/LPxh5sPiB0KzwuNPHhibO+Su2h8GKTvE
7aAYeYAl7+5Z+/rfVgXnOLgdPu6qO5h345j9voPiasGsXHA+JJw44Hy9CQt+
GD5jh+vPDatdt+0RG9x8TZByDTYH/uky5V7st+21JaZe4cxgdZgp5PnFqOuh
vQY/99ZlP1kcIO54CjWfxeFeX0HUh0Uv7bdEft15i4vVoa2/Q3Oiy1t77Xax
m+fKWeHxAzMfFn9pYCACj1+YfMeX29cbgfF/+LJ2qmQSKzx95B79t6n6Ews8
/cDsB3O5JB1Upv+fUPebxeHIRr28xQeB6e+Cy40PX1gdnjTPO7uKX8qh/8kn
+Uv57A4sYXy6m2KlHDjBCY3DwV9OLMvXGJjeda7MejaXC56eYeENAPSkchE=

          "]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
          0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
          3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJdIGYC4qAdcq2vL6o52HJdX1ywVwtC24rB+YdTViWE
XBKE86tF1rk/rOJxMAaBzxpwPkReDY2vCDVPCMpXhvPB+jerwfnPf6/8eOms
ukPDdoemR+wiUHkNuHtgfJh7YXy2xqnO3W/U0eQ14ObB+DD7YHzNmP5DXzWY
4PzY3KP/NlX/toeZBxYP/GIPsw/GBzuHSxrOX7TF/MchFSkH9g9iHgF/Ptmb
vrdwdTeSdNjZywYU+WQPcb8E1B+f7H8EP146m0XcYeE1E6DKT/Z9IGUXRB02
V3/aEJD92R5s7A4Rh1kzQeCr/YQFPwyfvRN2+Put9MEcwe/2894vP+ZtLuxw
3793ep7QT3uIOiEHkC651t/2YH8a80LtY3NA5TPB+RPrflsVnPtkL/8lJ6xW
T8jhTSDYo1DzxOB8BjBQh/O/aQADzlQTTV4bbh6MD7MPxoeFfwDI2czaDmfP
gAA0nCdqOTglPL2gdFvDweNhlci645oO8iAPzdOEmPNXw+EPMDp9k7Qc4nZ5
8jC9VncAG39KywE9/QIAH6UuJw==
          "]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{
          5.63, 11.05}, {5.63, 10.44}, {6.0569, 10.539}, {6.5048, 10.49}, {
          6.9, 10.3}, {9.53, 10.3}, {9.53, 11.05}}}], 
         FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{7.92, 3.73}, {
          8.0396, 3.4994}, {8.0784, 3.2353}, {8.03, 2.98}, {9.41, 2.98}, {
          9.41, 3.73}}}], 
         FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}}}, {{{6.73, 6.21}, {6.2, 5.82}, {6.67, 5.46}, {11.22, 5.46}, {
          11.22, 6.21}, {6.73, 6.21}}}], 
         FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{8., 8.7}, {
          8.0514, 8.4458}, {8.0162, 8.1818}, {7.9, 7.95}, {10.25, 7.95}, {
          10.25, 8.7}}}]}, AspectRatio -> Automatic, ImagePadding -> 0.75, 
        ImageSize -> {15., 15.}, 
        PlotRange -> {{0., 13.62}, {0., 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconHint"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         EdgeForm[None], 
         FaceForm[#], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}}, {{{9.015, 17.37}, {4.4559, 17.37}, {0.76, 
           13.645}, {0.76, 9.05}, {0.76, 4.455}, {4.4559, 0.73}, {9.015, 
           0.73}, {13.574, 0.73}, {17.27, 4.455}, {17.27, 9.05}, {17.27, 
           13.645}, {13.574, 17.37}, {9.015, 17.37}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQbcixRiYqRcVh3bak+pu23A5rf8XkHt2n7OC/fkpq
x2MOB8+5DWqHnik5nP8e/HjpbHYHj4dVIuvYlRyAiisjVrA78Bau6b6toegQ
ApQ9soDdQepAtIJjoILDJ8fzaVefczgs6Nzw8GWoPNx84yMb9fIeyzr831T9
acMFXod1N+LL/OVkHV5uX8/8/IyAw7Fck4btDrIOZQ/mCC7dK+TAXMGtomEn
6/DP+dfb1w0iDkIi9sfufJV1ePRy6iYeQzGHac7dOc+t5R3SwEDcwe7FzTW/
bBQc9kybwF+1TcLh7TwbnStSig7Hd+3oZSuQdDjab1iuy6jk0MIL8qGkg8f+
WlmL50oO9uHRG/fnSDr4fu4LLjmi7HDw1ELXbZslHGDhAzO//9BXjRh+VQeG
iXW/rQzEHKzv+/dOz1N1uFfY1fekSMRhzhGFDUUZqhB/LhaCmFOs6sC0h1VI
ZL+Ag8g6d2AIqjqYCJrZ7L3E64Ae/gDrrapT
           "], CompressedData["
1:eJxTTMoPSmViYGBQBGIQ/emSb5KAhJoDAwg0aDhYbjlRtu++isNudX7urWpK
DrX2pnG7Tqo4TFPsKy2sVnRQvv2zLqtGBULfUXAI6J2eJ8Ss4mDSsN2hKUnB
Ia0jOfZOmrKD/l0Vtsar8g5Gz9apPlms5GDgs4zLLVXeweLHoZRVDxQdnNdm
3ivskneQW/7CQ09e0aHEbco3tnh5h+jLex6LxCo4FErzPtC9IO+wVfT36Xed
8nDzH5tJHYheIOeQBxJ4pOCgu2nu++Vscg75Qs0HTjUqOjDkN7IcPS/rcObd
ycNOukoObqqlTLM4ZOD+O7JRL2/xQWkHHibtdrFITYeb8WX+ctOkHQ6eWui6
zVjLQfD4rh29bdIO/Ye+asTwazuAnJswRdohaIdc6+uL2g6qbI1TnbtlHGy5
ri8uqNVxEIgAhtg3WYj5B3QcgKEkzcsAdOfS2UcUDHQdEp5eULotqehw89z3
4Mepug63pGsSjUyVHMr3zZfSj9V1uKKdKvkoQtmhOGPi25p6XQeQ8p91KhB9
lroOIGH7UlWH+qw9JZNn6EDs54bGF4OOA9AVtlzhag6KG4oyJupqO4CCYaGr
mgM4XiO0HK5WvFQz9FBzuAzi7tR0cNv2+e8VCzUHJ5AF0poO6PEPAFdvzZk=

           "]}]}, AspectRatio -> Automatic, BaselinePosition -> Scaled[0.1], 
        ImagePadding -> 0.5, ImageSize -> {14., 14.778}, 
        PlotRange -> {{0.76, 17.27}, {0.73, 17.37}}]& )}], 
   Cell[
    StyleData["FileManagerFile", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{60, Inherited}, {0, 0}}, Deployed -> True, Evaluatable -> 
    True, CellGroupingRules -> {"SectionGrouping", 100}, 
    CellFrameMargins -> {{5, 5}, {2, 2}}, 
    CellFrameLabelMargins -> {{0, Inherited}, {Inherited, Inherited}}, 
    ContextMenu -> {
      MenuItem["Open", 
       KernelExecute[
        ToExpression[
        "DefinitionNotebookClient`FileTreeOpen[EvaluationCell[]]"]], 
       MenuEvaluator -> Automatic, Method -> "Queued"], 
      MenuItem["Un/Mark as Excluded", 
       KernelExecute[
        ToExpression[
        "DefinitionNotebookClient`FileTreeExclusionToggle[EvaluationCell[]]"]]\
, MenuEvaluator -> Automatic, Method -> "Queued"], 
      MenuItem["Copy Path to Clipboard", 
       KernelExecute[
        ToExpression[
        "DefinitionNotebookClient`FileTreeCopy[EvaluationCell[]]"]], 
       MenuEvaluator -> Automatic, Method -> "Queued"]}, ShowStringCharacters -> 
    False, Background :> FEPrivate`If[
      CurrentValue["MouseOver"], 
      GrayLevel[0.92], 
      GrayLevel[0.99]]], 
   Cell[
    StyleData[
    "FileManagerDirectory", StyleDefinitions -> StyleData["FileManagerFile"]],
     ShowGroupOpener -> "Inline", Evaluatable -> False, CellEventActions -> 
    None, CellFrameLabels -> {{
       Cell[
        BoxData[
         TemplateBox[{}, "FileManagerDirectoryIconTemplate"]], Background -> 
        None], None}, {None, None}}, ContextMenu -> {
      MenuItem["Open/Close Group", 
       KernelExecute[SelectionMove[
          EvaluationCell[], All, Cell]; FrontEndTokenExecute[
          EvaluationNotebook[], "OpenCloseGroup"]], MenuEvaluator -> 
       Automatic, Method -> "Queued"], 
      MenuItem["Open Directory", 
       KernelExecute[
        ToExpression[
        "DefinitionNotebookClient`FileTreeOpen[EvaluationCell[]]"]], 
       MenuEvaluator -> Automatic, Method -> "Queued"], 
      MenuItem["Un/Mark as Excluded", 
       KernelExecute[
        ToExpression[
        "DefinitionNotebookClient`FileTreeExclusionToggle[EvaluationCell[]]"]]\
, MenuEvaluator -> Automatic, Method -> "Queued"], 
      MenuItem["Copy Path to Clipboard", 
       KernelExecute[
        ToExpression[
        "DefinitionNotebookClient`FileTreeCopy[EvaluationCell[]]"]], 
       MenuEvaluator -> Automatic, Method -> "Queued"]}, Background -> 
    GrayLevel[0.99]], 
   Cell[
    StyleData[
    "FileManagerEmptyDirectory", StyleDefinitions -> 
     StyleData["FileManagerDirectory"]], CellFrameLabels -> {{
       Cell[
        BoxData[
         TemplateBox[{}, "FileManagerEmptyDirectoryIconTemplate"]], 
        Background -> None], None}, {None, None}}], 
   Cell[
    StyleData["FileManagerBottomSpacer"], ShowCellBracket -> False], 
   Cell[
    StyleData["FileManagerTopSpacer"], CellMargins -> 0, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    CellOpen -> False], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, StyleMenuListing -> None], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.906]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   
   Cell[
    StyleData["ExampleImage"], PageWidth :> First[{650}], 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.855, 0.396, 0.145], 
       RGBColor[0.02, 0.286, 0.651]]]], 
   Cell[
    StyleData["StringTypeLink", StyleDefinitions -> StyleData["Link"]], 
    FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.969, 0.467, 0.], 
       GrayLevel[0.467]]]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         TemplateBox[{
           StyleBox[
           "\"excluded\"", "ExcludedCellLabel", StripOnInput -> False], 
           "\"Excluded cells will not appear anywhere in the published \
resource except for the definition notebook\""}, "PrettyTooltipTemplate"]], 
        "ExcludedCellLabel"]}, {None, None}}, StyleMenuListing -> None, 
    Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["ExcludedCellLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontFamily -> "Source Sans Pro", FontSize -> 
    9, FontWeight -> Plain, FontSlant -> Italic, FontColor -> 
    RGBColor[0.9, 0.4, 0.4, 0.5], Background -> None], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.88072, 0.61104, 0.14205], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.982, 0.942, 0.871]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.36842, 0.50678, 0.7098], Background -> 
    RGBColor[0.905, 0.926, 0.956]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.56018, 0.69157, 0.19488], Background -> 
    RGBColor[0.934, 0.954, 0.879]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", 
    PrivateFontOptions -> {"OperatorSubstitution" -> False}, FontColor -> 
    GrayLevel[0.5]], 
   Cell[
    StyleData["FormObjectCell"], CellMargins -> {{66, 66}, {16, 5}}], 
   Cell[
    StyleData["LocalFileInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 1053094956087266899; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Paclet", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "FileOpen"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[1053094956087266899]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell[
    StyleData["LocalDirectoryInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 4898876371082581810; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Paclet", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "Directory"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[4898876371082581810]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["RelatedSymbol", StyleDefinitions -> StyleData["Item"]], 
    DefaultNewCellStyle -> {"RelatedSymbol", FontFamily -> "Source Sans Pro"},
     DefaultFormatType -> DefaultInputFormatType, FormatType -> InputForm], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.459, 0.459, 0.459]], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["Input"], CellProlog :> First[{
       Quiet[
        (Block[{$ContextPath}, Once[
           ReleaseHold[
            CurrentValue[#, {TaggingRules, "CompatibilityTest"}]], 
           "KernelSession"]; If[$VersionNumber >= 12.2, 
           Needs["DefinitionNotebookClient`"], 
           Needs["ResourceSystemClient`DefinitionNotebook`"]]; 
         DefinitionNotebookClient`LoadDefinitionNotebook["Paclet", #]; 
         Null]& )[
         InputNotebook[]]]}]], 
   Cell[
    StyleData["Code"], CellProlog :> First[{
       Quiet[
        (Block[{$ContextPath}, Once[
           ReleaseHold[
            CurrentValue[#, {TaggingRules, "CompatibilityTest"}]], 
           "KernelSession"]; If[$VersionNumber >= 12.2, 
           Needs["DefinitionNotebookClient`"], 
           Needs["ResourceSystemClient`DefinitionNotebook`"]]; 
         DefinitionNotebookClient`LoadDefinitionNotebook["Paclet", #]; 
         Null]& )[
         InputNotebook[]]]}]], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    GrayLevel[
      Rational[16, 17]]], 
   Cell[
    StyleData["DisclosureDetails"], CellMargins -> {{94, Inherited}, {10, 0}},
     FontSize -> 12, FontColor -> GrayLevel[0.5]], 
   Cell[
    StyleData[
    "PacletDirectoryChooser", StyleDefinitions -> StyleData["Output"]], 
    Deletable -> False, CellMargins -> {{50, 40}, {Inherited, Inherited}}], 
   Cell[
    StyleData["PacletDirectoryChooserTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
        PaneSelectorBox[{"Notebook" -> TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{}, "PacletDirectoryIconTemplate"], 
                    StyleBox[
                    "\"Paclet Directory\"", "Text", FontWeight -> "SemiBold", 
                    StripOnInput -> False], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, {
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    RowBox[{
                    GridBox[{{
                    RadioButtonBox[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}], 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, {RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]], RSNB`oldDir = 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectoryType"}] = #; 
                    Switch[#, "Notebook", 
                    If[
                    DirectoryQ[RSNB`nbDir], 
                    If[
                    And[RSNB`nbDir =!= RSNB`oldDir, 
                    MemberQ[$Packages, "PacletResource`DefinitionNotebook`"]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}]; Null], "Custom", 
                    
                    If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`nbDir]]]], 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}] = RSNB`nbDir, If[
                    StringQ[RSNB`nbDir], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]; 
                    NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]]],
                     CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]]& ], {"Notebook"}, DefaultBaseStyle -> 
                    "RadioButtonBar", Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]]], 
                    StyleBox[
                    "\"Same as Notebook\"", "RadioButtonBarLabel", 
                    StripOnInput -> False]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnAlignments -> Left, ColumnSpacings -> 0.3, 
                    BaselinePosition -> {1, 2}], "  ", 
                    GridBox[{{
                    RadioButtonBox[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}], 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, {RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]], RSNB`oldDir = 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectoryType"}] = #; 
                    Switch[#, "Notebook", 
                    If[
                    DirectoryQ[RSNB`nbDir], 
                    If[
                    And[RSNB`nbDir =!= RSNB`oldDir, 
                    MemberQ[$Packages, "PacletResource`DefinitionNotebook`"]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}]; Null], "Custom", 
                    
                    If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`nbDir]]]], 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}] = RSNB`nbDir, If[
                    StringQ[RSNB`nbDir], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]; 
                    NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]]],
                     CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]]& ], {"Custom"}, DefaultBaseStyle -> 
                    "RadioButtonBar", Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]]], 
                    StyleBox[
                    "\"Other\"", "RadioButtonBarLabel", StripOnInput -> 
                    False]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnAlignments -> Left, ColumnSpacings -> 0.3, 
                    BaselinePosition -> {1, 2}]}], "Deploy"], 
                    RadioButtonBar[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}], 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, {RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]], RSNB`oldDir = 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectoryType"}] = #; 
                    Switch[#, "Notebook", 
                    If[
                    DirectoryQ[RSNB`nbDir], 
                    If[
                    And[RSNB`nbDir =!= RSNB`oldDir, 
                    MemberQ[$Packages, "PacletResource`DefinitionNotebook`"]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}]; Null], "Custom", 
                    
                    If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`nbDir]]]], 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}] = RSNB`nbDir, If[
                    StringQ[RSNB`nbDir], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]; 
                    NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]]],
                     CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]]& ], {
                    "Notebook" -> "Same as Notebook", "Custom" -> "Other"}, 
                    Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]]]], 
                    "Text", FontSize -> 13, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                   ItemBox[
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.02439], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.02439]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.085346]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{12.383, 16.953}, {20.16, 
                    16.953}}}, CurveClosed -> {0}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{16.273, 20.84}, {16.273, 
                    13.062}}}, CurveClosed -> {0}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False]}, {
                    ImageSize -> 14, PlotRange -> {{0., 41.}, {0., 41.}}, 
                    AspectRatio -> Automatic}], 
                    ButtonFunction :> (SelectionMove[
                    First[
                    Cells[
                    EvaluationNotebook[], CellStyle -> "FileManagerTopSpacer",
                     CellTags -> "FileManager-PacletFiles"], $Failed], All, 
                    CellGroup, AutoScroll -> False]; FrontEndTokenExecute[
                    EvaluationNotebook[], "SelectionOpenAllGroups"]; 
                    SelectionMove[
                    EvaluationCell[], Before, Cell]; Null), Appearance -> 
                    None, Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    FrameMargins -> 2, Method -> "Preemptive", 
                    ImageSize -> {Automatic, 20}, Evaluator -> Automatic], 
                    Background -> Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}], 
                    GrayLevel[0.98], 
                    GrayLevel[0.92]], 
                    GrayLevel[0.98]]], FrameMargins -> 0, FrameStyle -> 
                    GrayLevel[0, 0], StripOnInput -> False], 
                    "\"Expand folders\""}, "PrettyTooltipTemplate"], 
                    TemplateBox[{
                    FrameBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.02439], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.02439]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.085346]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{12.383, 16.953}, {20.16, 
                    16.953}}}, CurveClosed -> {0}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False]}, {
                    ImageSize -> 14, PlotRange -> {{0., 41.}, {0., 41.}}, 
                    AspectRatio -> Automatic}], 
                    ButtonFunction :> (SelectionMove[
                    First[
                    Cells[
                    EvaluationNotebook[], CellStyle -> "FileManagerTopSpacer",
                     CellTags -> "FileManager-PacletFiles"], $Failed], All, 
                    CellGroup, AutoScroll -> False]; FrontEndTokenExecute[
                    EvaluationNotebook[], "SelectionCloseAllGroups"]; 
                    FrontEndTokenExecute[
                    EvaluationNotebook[], "OpenCloseGroup"]; SelectionMove[
                    EvaluationCell[], Before, Cell]; Null), Appearance -> 
                    None, Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    FrameMargins -> 2, Method -> "Preemptive", 
                    ImageSize -> {Automatic, 20}, Evaluator -> Automatic], 
                    Background -> Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}], 
                    GrayLevel[0.98], 
                    GrayLevel[0.92]], 
                    GrayLevel[0.98]]], FrameMargins -> 0, FrameStyle -> 
                    GrayLevel[0, 0], StripOnInput -> False], 
                    "\"Collapse folders\""}, "PrettyTooltipTemplate"], 
                    TemplateBox[{
                    FrameBox[
                    ButtonBox[
                    DynamicModuleBox[{RSNB`r$$ = 0}, 
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[0.1], 
                    CapForm["Round"], 
                    GeometricTransformationBox[{
                    CircleBox[{0, 0}, 1, 
                    NCache[{(2 Pi)/3, (7 Pi)/3}, {2.0944, 7.3304}]], 
                    LineBox[
                    
                    NCache[{{-1.125, Sqrt[3]/2}, {(-1)/2, Sqrt[3]/2}, {(-1)/2,
                     0.24103}}, {{-1.125, 0.86603}, {-0.5, 0.86603}, {-0.5, 
                    0.24103}}]]}, {{{1, 0}, {0, 1}}, {0, 0}}]}, ImageSize -> 
                    14, ImagePadding -> 1, PlotRange -> 1.3], True -> 
                    OverlayBox[{
                    AnimatorBox[
                    Dynamic[
                    BoxForm`RemapVariable[RSNB`r$$, {0, (-2) Pi}], 
                    BoxForm`RemapValue[#, RSNB`r$$, {0, (-2) Pi}]& ], {0, 1}, 
                    AppearanceElements -> {}, DefaultDuration -> 1, ImageSize -> 
                    0.1], 
                    GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[0.1], 
                    CapForm["Round"], 
                    GeometricTransformationBox[
                    GeometricTransformationBox[
                    GeometricTransformationBox[{
                    CircleBox[{0, 0}, 1, 
                    NCache[{(2 Pi)/3, (7 Pi)/3}, {2.0944, 7.3304}]], 
                    LineBox[
                    
                    NCache[{{-1.125, Sqrt[3]/2}, {(-1)/2, Sqrt[3]/2}, {(-1)/2,
                     0.24103}}, {{-1.125, 0.86603}, {-0.5, 0.86603}, {-0.5, 
                    0.24103}}]]}, {{{1, 0}, {0, 1}}, {0, 0}}], {{{
                    Cos[
                    Dynamic[RSNB`r$$]], -Sin[
                    Dynamic[RSNB`r$$]]}, {
                    Sin[
                    Dynamic[RSNB`r$$]], 
                    Cos[
                    Dynamic[RSNB`r$$]]}}, {0, 0}}], {{{1, 0}, {0, 1}}, {0, 
                    0}}]}, ImageSize -> 14, ImagePadding -> 1, PlotRange -> 
                    1.3]}]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]], 
                    ContentPadding -> False], 
                    Initialization :> (CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}] = False), 
                    DynamicModuleValues :> {}], ButtonFunction :> 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, 
                    If[
                    And[CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}] === 
                    "Notebook", 
                    Not[
                    DirectoryQ[
                    Quiet[
                    NotebookDirectory[RSNB`nbo]]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]], Appearance -> None, Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    FrameMargins -> 2, Method -> "Queued", 
                    ImageSize -> {Automatic, 20}, Evaluator -> Automatic], 
                    Background -> Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}], 
                    GrayLevel[0.98], 
                    GrayLevel[0.92]], 
                    GrayLevel[0.98]]], FrameMargins -> 0, FrameStyle -> 
                    GrayLevel[0, 0], StripOnInput -> False], 
                    "\"Refresh files\""}, "PrettyTooltipTemplate"]}, 
                    "RowDefault"], ItemSize -> Fit, StripOnInput -> False]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Left, Right}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"], "Custom" -> TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{}, "PacletDirectoryIconTemplate"], 
                    StyleBox[
                    "\"Paclet Directory\"", "Text", FontWeight -> "SemiBold", 
                    StripOnInput -> False], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, {
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    RowBox[{
                    GridBox[{{
                    RadioButtonBox[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}], 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, {RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]], RSNB`oldDir = 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectoryType"}] = #; 
                    Switch[#, "Notebook", 
                    If[
                    DirectoryQ[RSNB`nbDir], 
                    If[
                    And[RSNB`nbDir =!= RSNB`oldDir, 
                    MemberQ[$Packages, "PacletResource`DefinitionNotebook`"]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}]; Null], "Custom", 
                    
                    If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`nbDir]]]], 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}] = RSNB`nbDir, If[
                    StringQ[RSNB`nbDir], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]; 
                    NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]]],
                     CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]]& ], {"Notebook"}, DefaultBaseStyle -> 
                    "RadioButtonBar", Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]]], 
                    StyleBox[
                    "\"Same as Notebook\"", "RadioButtonBarLabel", 
                    StripOnInput -> False]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnAlignments -> Left, ColumnSpacings -> 0.3, 
                    BaselinePosition -> {1, 2}], "  ", 
                    GridBox[{{
                    RadioButtonBox[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}], 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, {RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]], RSNB`oldDir = 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectoryType"}] = #; 
                    Switch[#, "Notebook", 
                    If[
                    DirectoryQ[RSNB`nbDir], 
                    If[
                    And[RSNB`nbDir =!= RSNB`oldDir, 
                    MemberQ[$Packages, "PacletResource`DefinitionNotebook`"]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}]; Null], "Custom", 
                    
                    If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`nbDir]]]], 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}] = RSNB`nbDir, If[
                    StringQ[RSNB`nbDir], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]; 
                    NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]]],
                     CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]]& ], {"Custom"}, DefaultBaseStyle -> 
                    "RadioButtonBar", Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]]], 
                    StyleBox[
                    "\"Other\"", "RadioButtonBarLabel", StripOnInput -> 
                    False]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnAlignments -> Left, ColumnSpacings -> 0.3, 
                    BaselinePosition -> {1, 2}]}], "Deploy"], 
                    RadioButtonBar[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}], 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, {RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]], RSNB`oldDir = 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectoryType"}] = #; 
                    Switch[#, "Notebook", 
                    If[
                    DirectoryQ[RSNB`nbDir], 
                    If[
                    And[RSNB`nbDir =!= RSNB`oldDir, 
                    MemberQ[$Packages, "PacletResource`DefinitionNotebook`"]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}]; Null], "Custom", 
                    
                    If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`nbDir]]]], 
                    CurrentValue[RSNB`cell, {
                    TaggingRules, "PacletDirectory"}] = RSNB`nbDir, If[
                    StringQ[RSNB`nbDir], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]; 
                    NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]]],
                     CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]]& ], {
                    "Notebook" -> "Same as Notebook", "Custom" -> "Other"}, 
                    Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]]]], 
                    "Text", FontSize -> 13, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                   ItemBox[
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.02439], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.02439]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.085346]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{12.383, 16.953}, {20.16, 
                    16.953}}}, CurveClosed -> {0}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{16.273, 20.84}, {16.273, 
                    13.062}}}, CurveClosed -> {0}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False]}, {
                    ImageSize -> 14, PlotRange -> {{0., 41.}, {0., 41.}}, 
                    AspectRatio -> Automatic}], 
                    ButtonFunction :> (SelectionMove[
                    First[
                    Cells[
                    EvaluationNotebook[], CellStyle -> "FileManagerTopSpacer",
                     CellTags -> "FileManager-PacletFiles"], $Failed], All, 
                    CellGroup, AutoScroll -> False]; FrontEndTokenExecute[
                    EvaluationNotebook[], "SelectionOpenAllGroups"]; 
                    SelectionMove[
                    EvaluationCell[], Before, Cell]; Null), Appearance -> 
                    None, Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    FrameMargins -> 2, Method -> "Preemptive", 
                    ImageSize -> {Automatic, 20}, Evaluator -> Automatic], 
                    Background -> Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}], 
                    GrayLevel[0.98], 
                    GrayLevel[0.92]], 
                    GrayLevel[0.98]]], FrameMargins -> 0, FrameStyle -> 
                    GrayLevel[0, 0], StripOnInput -> False], 
                    "\"Expand folders\""}, "PrettyTooltipTemplate"], 
                    TemplateBox[{
                    FrameBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.02439], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.02439]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.383, 36.391}, {35.711, 36.391}, {35.711, 
                    13.063}, {12.383, 13.063}, {12.383, 36.391}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}]}, {
                    EdgeForm[
                    JoinForm[{"Miter", 10.}]], 
                    EdgeForm[
                    Thickness[0.085346]], 
                    EdgeForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]], 
                    FaceForm[
                    RGBColor[0.98039, 0.98039, 0.98039, 1.]]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{4.609, 28.617}, {27.937, 28.617}, {27.937, 
                    5.289}, {4.609, 5.289}, {4.609, 28.617}}}, 
                    CurveClosed -> {1}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{12.383, 16.953}, {20.16, 
                    16.953}}}, CurveClosed -> {0}]}, {
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.085346], 
                    RGBColor[0.65098, 0.65098, 0.65098, 1.]}, StripOnInput -> 
                    False]}, {
                    ImageSize -> 14, PlotRange -> {{0., 41.}, {0., 41.}}, 
                    AspectRatio -> Automatic}], 
                    ButtonFunction :> (SelectionMove[
                    First[
                    Cells[
                    EvaluationNotebook[], CellStyle -> "FileManagerTopSpacer",
                     CellTags -> "FileManager-PacletFiles"], $Failed], All, 
                    CellGroup, AutoScroll -> False]; FrontEndTokenExecute[
                    EvaluationNotebook[], "SelectionCloseAllGroups"]; 
                    FrontEndTokenExecute[
                    EvaluationNotebook[], "OpenCloseGroup"]; SelectionMove[
                    EvaluationCell[], Before, Cell]; Null), Appearance -> 
                    None, Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    FrameMargins -> 2, Method -> "Preemptive", 
                    ImageSize -> {Automatic, 20}, Evaluator -> Automatic], 
                    Background -> Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}], 
                    GrayLevel[0.98], 
                    GrayLevel[0.92]], 
                    GrayLevel[0.98]]], FrameMargins -> 0, FrameStyle -> 
                    GrayLevel[0, 0], StripOnInput -> False], 
                    "\"Collapse folders\""}, "PrettyTooltipTemplate"], 
                    TemplateBox[{
                    FrameBox[
                    ButtonBox[
                    DynamicModuleBox[{RSNB`r$$ = 0}, 
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[0.1], 
                    CapForm["Round"], 
                    GeometricTransformationBox[{
                    CircleBox[{0, 0}, 1, 
                    NCache[{(2 Pi)/3, (7 Pi)/3}, {2.0944, 7.3304}]], 
                    LineBox[
                    
                    NCache[{{-1.125, Sqrt[3]/2}, {(-1)/2, Sqrt[3]/2}, {(-1)/2,
                     0.24103}}, {{-1.125, 0.86603}, {-0.5, 0.86603}, {-0.5, 
                    0.24103}}]]}, {{{1, 0}, {0, 1}}, {0, 0}}]}, ImageSize -> 
                    14, ImagePadding -> 1, PlotRange -> 1.3], True -> 
                    OverlayBox[{
                    AnimatorBox[
                    Dynamic[
                    BoxForm`RemapVariable[RSNB`r$$, {0, (-2) Pi}], 
                    BoxForm`RemapValue[#, RSNB`r$$, {0, (-2) Pi}]& ], {0, 1}, 
                    AppearanceElements -> {}, DefaultDuration -> 1, ImageSize -> 
                    0.1], 
                    GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[0.1], 
                    CapForm["Round"], 
                    GeometricTransformationBox[
                    GeometricTransformationBox[
                    GeometricTransformationBox[{
                    CircleBox[{0, 0}, 1, 
                    NCache[{(2 Pi)/3, (7 Pi)/3}, {2.0944, 7.3304}]], 
                    LineBox[
                    
                    NCache[{{-1.125, Sqrt[3]/2}, {(-1)/2, Sqrt[3]/2}, {(-1)/2,
                     0.24103}}, {{-1.125, 0.86603}, {-0.5, 0.86603}, {-0.5, 
                    0.24103}}]]}, {{{1, 0}, {0, 1}}, {0, 0}}], {{{
                    Cos[
                    Dynamic[RSNB`r$$]], -Sin[
                    Dynamic[RSNB`r$$]]}, {
                    Sin[
                    Dynamic[RSNB`r$$]], 
                    Cos[
                    Dynamic[RSNB`r$$]]}}, {0, 0}}], {{{1, 0}, {0, 1}}, {0, 
                    0}}]}, ImageSize -> 14, ImagePadding -> 1, PlotRange -> 
                    1.3]}]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]], 
                    ContentPadding -> False], 
                    Initialization :> (CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}] = False), 
                    DynamicModuleValues :> {}], ButtonFunction :> 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, 
                    If[
                    And[CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectoryType"}] === 
                    "Notebook", 
                    Not[
                    DirectoryQ[
                    Quiet[
                    NotebookDirectory[RSNB`nbo]]]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[
                    EvaluationCell[], 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{"\"The current notebook is not saved.\""}, 
                    "PacletDirectoryChooserErrorTemplate"]], 
                    "AttachedMessage"], "Inline", 
                    RemovalConditions -> {"EvaluatorQuit"}], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]]], 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]], Appearance -> None, Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    FrameMargins -> 2, Method -> "Queued", 
                    ImageSize -> {Automatic, 20}, Evaluator -> Automatic], 
                    Background -> Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}], 
                    GrayLevel[0.98], 
                    GrayLevel[0.92]], 
                    GrayLevel[0.98]]], FrameMargins -> 0, FrameStyle -> 
                    GrayLevel[0, 0], StripOnInput -> False], 
                    "\"Refresh files\""}, "PrettyTooltipTemplate"]}, 
                    "RowDefault"], ItemSize -> Fit, StripOnInput -> False]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Left, Right}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "Grid"]}, {
               TagBox[
                GridBox[{{
                   InputFieldBox[
                    Dynamic[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "PacletDirectory"}]], 
                    String, FieldHint -> "Choose paclet directory", 
                    BaseStyle -> {
                    FontSize -> 12, FontColor -> GrayLevel[0.25]}, 
                    ImageSize -> {Full, 24}, BaselinePosition -> Baseline, 
                    FrameMargins -> {{3, 3}, {1, 1}}], 
                   ButtonBox[
                    StyleBox[
                    "\"Browse\[Ellipsis]\"", "Text", FontSize -> 12, 
                    StripOnInput -> False], ButtonFunction :> 
                    With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                    EvaluationCell[]}, 
                    WithCleanup[NotebookDelete[
                    Cells[RSNB`cell, AttachedCell -> True]]; 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    True, 
                    Replace[
                    SystemDialogInput["Directory", 
                    Replace[
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}], Except[
                    PatternTest[
                    Blank[], DirectoryQ]] :> Replace[
                    Quiet[
                    NotebookDirectory[RSNB`nbo]], Except[
                    PatternTest[
                    Blank[], DirectoryQ]] :> Directory[]]]], Pattern[RSNB`s, 
                    Blank[String]] :> With[{RSNB`nbDir = Quiet[
                    NotebookDirectory[RSNB`nbo]]}, 
                    If[RSNB`nbDir === RSNB`s, 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = Inherited; 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectoryType"}] = 
                    "Notebook"; Null, 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectory"}] = RSNB`s; 
                    CurrentValue[
                    RSNB`cell, {TaggingRules, "PacletDirectoryType"}] = 
                    "Custom"; Null]; If[
                    Quiet[
                    PacletObjectQ[
                    PacletObject[
                    File[RSNB`s]]]], 
                    
                    With[{RSNB`nb$ = EvaluationNotebook[], 
                    RSNB`$cp$ = $ContextPath}, 
                    Quiet[
                    
                    Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                    Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    341138948110023950; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    
                    PacletResource`DefinitionNotebook`\
RefreshNotebookPacletFiles[RSNB`nbo, RSNB`cell]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    341138948110023950]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                    Null]]], NotebookDelete[
                    Cells[RSNB`nbo, CellTags -> "FileManager-PacletFiles"]]; 
                    AttachCell[RSNB`cell, 
                    Cell[
                    BoxData[
                    
                    TemplateBox[{
                    "\"The specified directory is not a valid paclet \
directory.\""}, "PacletDirectoryChooserErrorTemplate"]], "AttachedMessage"], 
                    "Inline", RemovalConditions -> {"EvaluatorQuit"}]]]], 
                    CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                    False]], Method -> "Queued", ImageSize -> {Automatic, 24},
                     Enabled -> Dynamic[
                    Not[
                    CurrentValue[
                    EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
                    Appearance -> Automatic, Evaluator -> Automatic]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, 
                 AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {"Text"}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]}, 
         Dynamic[
          CurrentValue[
           EvaluationCell[], {TaggingRules, "PacletDirectoryType"}]], 
         ImageSize -> Automatic], Background -> GrayLevel[0.98], FrameMargins -> 
        10, FrameStyle -> GrayLevel[0.8], ImageSize -> {
          Scaled[1], Automatic}, StripOnInput -> False]& )}], 
   Cell[
    StyleData["PacletDirectoryChooserErrorTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            GraphicsBox[{
              Thickness[0.028571], 
              StyleBox[{
                
                FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3,
                   3}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 
                  3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {0, 
                  1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBWIQfbJs33yp88YO51advxqWI+LApN0udvOdsYOre9FP
/pciDhGWW06U/TN26EiOvePWLArnb35VvFXUWgzOtzeN2+WZowTnX614qWZ4
QgluXmvNhc2RosoOMPsOnlroui1Y2SGMT3fT3PXGDn8kiq8LTVJ24Lq+uMC2
y9ihx+sVi8lGZYenF5Ru/4xD8EHW8Djpw/lvAnfItb7Wg/NDHi+dfWSBHty8
fKHmA6cS9eD2/Vn58ZKvkh7cPQG90/OEmPXg7oXxYf6B8WH+hfFh4QEzDxZe
MPtg4QlzD9if74Xh7pU6EK3guFEY7h8YH+ZfGB8WHjA+LLxg5qHHHwAbtMYJ

                  "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQfdzbvNPxgLEDSxif7qa7Gg6WW06U7btv7HC14qWa
IYemw78rQMZHY4cIkISdpoPIOveHVV+MHRhAoEHToXSyBEuYn4nDwVMLXbdN
NoXznRKeXlDabQox19bE4V2NvWncLVMH5ds/67JkTKDmmsLNz5j4tsZe1Mxh
2+e/VypOGjs0TnXuzlE3c9g3X0r/7hIEv/kAyCI9OB9kHV8ugg+2T1YPbt4u
Tx4m7eO6cPt+BD9eOrtFF+4e8Zvnvgcn6zpot4vdPLcdwa8FSu/qNHU4ewYI
ePTg/oXxYeEBCg4RPT14eBXacl1fXKAHD09jENis57Bs9hGFDZs0HAJ6p+cJ
MetD5OdqOIDDPwHBjwM52NsYzp81EwgqEXyQ9uYFxnDz0OMPAAfUunk=
                  "], CompressedData["
1:eJxTTMoPSmViYGBQAmIQbcixRibqiJFD41Tn7pzl9g58upvmvlc3drA3jdvl
mWPv0Hzg1ELXMmOHaUDp59L2Dkza7WI31xlDxLfZOQT0Ts8TCnZ0MAo10Fop
zOsQlWJ937/X0eFMvcf+2rlsDue/Bz9e2u3okLoqISRIncFhnfvDKhE/R4c/
Kz9e8k36bJ8vBDTJ0NHh5OQl2Wr3X9k7JTy9oMTt6PDE85Lp5PyH9uogB95y
cHilKHXX8c0Vex6QA1Y6OOgfsLMqfbrb3i9JIMKyxMGBAQqArl9+zBrB318r
a5HuwgLnV0asMD27mwHOjxTffpHh3i97mHmb9PIWM+75Yg+zz/Dyt/VrTN7a
w9wzU8jzi1HXY3uYe4Gh8nvlxxv2MP8YXD0TxeWxfT/Mv9M49185P3vXflh4
/LrA+lW3+Jo9LLzA+hbpwcPzV13WnhJhfXh4P146+4jCBn14fIDD09oAHl/F
GRPf1sw3cDj8VSOm/5G9w5vAHXKt3IZQ/0HDoQHBFwFFwBcEHxR9zQlGcP3o
6QEAaQXeGQ==
                  "]}]}, {
                FaceForm[
                 RGBColor[0.85098, 0., 0.10588, 1.]]}, StripOnInput -> 
               False]}, {
             ImageSize -> 12, BaselinePosition -> Scaled[0.05], ImageSize -> 
              16}], #}}, 
          GridBoxAlignment -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
          False, GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], FontColor -> 
        RGBColor[0.86667, 0.06667, 0.], FontSize -> 13, FontFamily -> 
        "Source Sans Pro", StripOnInput -> False]& )}], 
   Cell[
    StyleData["PacletDirectoryIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (OverlayBox[{
         TemplateBox[{}, "FileManagerDirectoryIconTemplate"], 
         GraphicsBox[{
           Thickness[0.041667], {
            FaceForm[{
              RGBColor[0.961, 0.961, 0.961], 
              Opacity[1.]}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.545, 22.597}, {
             7.5464, 20.5}, {2.5454, 18.402}, {2.5454, 12.598}, {2.5454, 
             12.597}, {2.5454, 6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {
             12.545, 2.5992}, {17.545, 4.6972}, {17.545, 4.6962}, {22.545, 
             6.7952}, {22.545, 12.597}, {22.545, 12.598}, {22.545, 
             18.402}}}]}, {
            FaceForm[{
              RGBColor[0.898, 0.898, 0.898], 
              Opacity[1.]}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 14.057}, {
             16.875, 14.057}, {16.875, 8.3359}, {17., 8.1169}, {21.952, 
             6.0399}, {22.049, 6.2709}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.057}, {6.875, 
             14.057}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 6.0399}, {7., 
             8.1169}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}}}, {{{11.874, 6.2383}, {6.9515, 4.1733}, {7.0475, 
             3.9423}, {12., 6.0193}, {16.952, 3.9423}, {17.048, 4.1733}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{17.125, 14.139}, {17.125, 19.86}, {16.875,
              19.86}, {16.875, 14.139}, {17., 13.92}, {21.952, 11.843}, {
             22.049, 12.074}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{7.125, 14.139}, {7.125, 19.86}, {6.875, 
             19.86}, {6.875, 14.139}, {1.952, 12.074}, {2.048, 11.843}, {7., 
             13.92}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}}}, {{{11.875, 21.363}, {11.875, 18.356}, {12., 18.303}, {
             12.125, 18.356}, {12.125, 21.363}, {12., 21.415}}}]}, {
            FaceForm[{
              RGBColor[0.749, 0.749, 0.749], 
              Opacity[1.]}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}}, {{{8.292, 
              19.859}, {12., 21.415}, {15.707, 19.859}, {12., 18.303}}, {{
              17.5, 19.527}, {17.5, 20.192}, {12., 22.5}, {6.5, 20.192}, {6.5,
               19.528}, {12., 17.219}, {12., 17.219}, {15.7, 18.772}, {17.5, 
              19.527}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 5.4026}, {12.5,
              5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
              0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 9.5283}, {21.5, 
              11.207}}, {{21.5, 12.711}, {21.5, 12.291}, {17., 10.403}, {16.5,
               10.613}, {16.5, 10.194}, {15.707, 9.8613}, {16.5, 9.5283}, {
              16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {15.707, 
              4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 12.291}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
              0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 11.207}, {6.5, 
              9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {7.5, 9.5286}, {8.292, 
              9.8616}, {7.5, 10.194}, {7.5, 10.614}, {7., 10.404}, {2.5, 
              12.291}, {2.5, 12.711}, {1.5, 12.292}, {1.5, 5.8226}, {7., 
              3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}}}, {{{3.2925, 17.762}, {7.0005, 19.318}, {10.708, 
              17.762}, {7.0005, 16.206}}, {{6.5005, 10.612}, {2.5005, 
              12.291}, {2.5005, 17.01}, {6.5005, 15.332}}, {{7.5005, 
              10.193}, {7.5005, 10.612}, {7.5005, 15.332}, {12., 17.22}, {
              12.5, 17.01}, {12.5, 18.095}, {7.0005, 20.403}, {1.5005, 
              18.095}, {1.5005, 11.626}, {7.0005, 9.3182}, {8.2935, 
              9.8612}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {17.5, 15.332}, {
              21.5, 17.01}}, {{13.293, 17.762}, {17., 19.318}, {20.708, 
              17.762}, {17., 16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 
              17.01}, {12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
              10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {22.5, 
              18.095}}}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}}}, {{{16.5, 4.3906}, {12.5, 2.7116}, {12.5, 7.4316}, {
              16.5, 9.1096}}, {{11.5, 2.7116}, {7.4995, 4.3906}, {7.4995, 
              9.1096}, {11.5, 7.4316}}, {{16.5, 10.614}, {16.5, 10.195}, {12.,
               8.3056}, {8.2915, 9.8616}, {7.4995, 10.194}, {7.4995, 
              10.615}, {6.4995, 10.195}, {6.4995, 3.7256}, {12., 1.4176}, {
              17.5, 3.7256}, {17.5, 10.195}}}]}, {
            FaceForm[{
              RGBColor[0.965, 0.765, 0.749], 
              Opacity[1.]}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}}}, {{{12., 17.662}, {16.945, 15.586}, {16.945, 9.9376}, {
             12., 7.8636}, {7.055, 9.9376}, {7.055, 15.586}}}]}, {
            FaceForm[{
              RGBColor[0.91, 0.655, 0.635], 
              Opacity[1.]}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 17.763}, {
             11.875, 17.763}, {11.875, 12.041}, {6.952, 9.9757}, {7.048, 
             9.7447}, {12., 11.823}, {16.952, 9.7447}, {17.048, 9.9757}, {
             12.125, 12.041}}}]}, {
            FaceForm[{
              RGBColor[0.867, 0.067, 0.], 
              Opacity[1.]}], 
            
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
               1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5, 
              8.5146}, {12.5, 13.234}, {16.5, 14.912}, {16.5, 10.193}}, {{7.5,
               14.912}, {11.5, 13.234}, {11.5, 8.5146}, {7.5, 10.193}}, {{
              15.708, 15.664}, {12., 14.109}, {8.292, 15.664}, {12., 
              17.221}}, {{12., 18.305}, {6.5, 15.996}, {6.5, 9.5286}, {12., 
              7.2206}, {17.5, 9.5286}, {17.5, 15.996}}}]}}, {
          ImageSize -> 12, AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
           PlotRange -> {{0., 24.}, {0., 24.}}}]}, 
        Alignment -> {Right, Bottom}]& )}], 
   Cell[
    StyleData[
    "MainGuideChooser", StyleDefinitions -> 
     StyleData["PacletDirectoryChooser"]], CellGroupingRules -> 
    "NormalGrouping"], 
   Cell[
    StyleData["MainGuideChooserTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
        TagBox[
         GridBox[{{
            PaneSelectorBox[{True -> RowBox[{
                 TemplateBox[{}, "PacletDirectoryIconTemplate"], 
                 StyleBox["/", FontColor -> GrayLevel[0.5]]}], False -> 
              RowBox[{
                 TemplateBox[{}, "FileManagerNBIconTemplate"], 
                 StyleBox["/", ShowContents -> False]}]}, 
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "Relative"}]]], 
            InputFieldBox[
             Dynamic[
              CurrentValue[
               EvaluationCell[], {TaggingRules, "MainGuidePageString"}]], 
             String, FieldHint -> "Choose a guide page", 
             BaseStyle -> {FontSize -> 12, FontColor -> GrayLevel[0.25]}, 
             ImageSize -> {Full, 24}, BaselinePosition -> Baseline, 
             FrameMargins -> {{3, 3}, {1, 1}}], 
            ButtonBox[
             StyleBox[
             "\"Browse\[Ellipsis]\"", "Text", FontSize -> 12, StripOnInput -> 
              False], ButtonFunction :> 
             With[{RSNB`nbo = EvaluationNotebook[], RSNB`cell = 
                EvaluationCell[]}, 
               WithCleanup[NotebookDelete[
                  Cells[RSNB`cell, AttachedCell -> True]]; 
                CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = True, 
                
                
                Module[{RSNB`initial$, RSNB`res$}, 
                 RSNB`initial$ = SelectFirst[{
                    FileNameJoin[{
                    With[{RSNB`cell$ = First[
                    Cells[
                    RSNB`nbo, CellStyle -> "PacletDirectoryChooser", CellTags -> 
                    "PacletManifestPanel"], $Failed]}, 
                    Replace[{
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectoryType"}], 
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectory"}]}, {{
                    "Notebook", 
                    Blank[]} :> Quiet[
                    NotebookDirectory[RSNB`nbo]], {"Custom", 
                    Pattern[RSNB`dir, 
                    Blank[]]} :> RSNB`dir}]], "Documentation", $Language, 
                    "Guides"}], 
                    With[{RSNB`cell$ = First[
                    Cells[
                    RSNB`nbo, CellStyle -> "PacletDirectoryChooser", CellTags -> 
                    "PacletManifestPanel"], $Failed]}, 
                    Replace[{
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectoryType"}], 
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectory"}]}, {{
                    "Notebook", 
                    Blank[]} :> Quiet[
                    NotebookDirectory[RSNB`nbo]], {"Custom", 
                    Pattern[RSNB`dir, 
                    Blank[]]} :> RSNB`dir}]], 
                    Quiet[
                    NotebookDirectory[RSNB`nbo]]}, DirectoryQ, 
                    Directory[]]; 
                 RSNB`res$ = SystemDialogInput["FileOpen", RSNB`initial$]; 
                 If[
                   And[
                    StringQ[
                    With[{RSNB`cell$ = First[
                    Cells[
                    RSNB`nbo, CellStyle -> "PacletDirectoryChooser", CellTags -> 
                    "PacletManifestPanel"], $Failed]}, 
                    Replace[{
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectoryType"}], 
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectory"}]}, {{
                    "Notebook", 
                    Blank[]} :> Quiet[
                    NotebookDirectory[RSNB`nbo]], {"Custom", 
                    Pattern[RSNB`dir, 
                    Blank[]]} :> RSNB`dir}]]], 
                    StringQ[RSNB`res$], 
                    StringStartsQ[RSNB`res$, 
                    With[{RSNB`cell$ = First[
                    Cells[
                    RSNB`nbo, CellStyle -> "PacletDirectoryChooser", CellTags -> 
                    "PacletManifestPanel"], $Failed]}, 
                    Replace[{
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectoryType"}], 
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectory"}]}, {{
                    "Notebook", 
                    Blank[]} :> Quiet[
                    NotebookDirectory[RSNB`nbo]], {"Custom", 
                    Pattern[RSNB`dir, 
                    Blank[]]} :> RSNB`dir}]]]], RSNB`res$ = StringReplace[
                    StringDelete[RSNB`res$, 
                    StringExpression[StartOfString, 
                    With[{RSNB`cell$ = First[
                    Cells[
                    RSNB`nbo, CellStyle -> "PacletDirectoryChooser", CellTags -> 
                    "PacletManifestPanel"], $Failed]}, 
                    Replace[{
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectoryType"}], 
                    CurrentValue[
                    RSNB`cell$, {TaggingRules, "PacletDirectory"}]}, {{
                    "Notebook", 
                    Blank[]} :> Quiet[
                    NotebookDirectory[RSNB`nbo]], {"Custom", 
                    Pattern[RSNB`dir, 
                    Blank[]]} :> RSNB`dir}]], 
                    Alternatives[$PathnameSeparator, ""]]], "\\" -> "/"]; 
                   CurrentValue[RSNB`cell, {TaggingRules, "Relative"}] = True,
                    CurrentValue[RSNB`cell, {TaggingRules, "Relative"}] = 
                   False]; If[
                   StringQ[RSNB`res$], 
                   CurrentValue[
                    RSNB`cell, {TaggingRules, "MainGuidePageString"}] = 
                   RSNB`res$]], 
                CurrentValue[RSNB`cell, {TaggingRules, "Refreshing"}] = 
                False]], Method -> "Queued", ImageSize -> {Automatic, 24}, 
             Enabled -> Dynamic[
               Not[
                CurrentValue[
                 EvaluationCell[], {TaggingRules, "Refreshing"}]]], 
             Appearance -> Automatic, Evaluator -> Automatic]}}, 
          GridBoxAlignment -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
          False, GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "ColumnsIndexed" -> {2 -> 0.2}, "Rows" -> {{Automatic}}}, 
          BaseStyle -> {"Text"}], "Grid"], Background -> GrayLevel[0.98], 
        FrameMargins -> 10, FrameStyle -> GrayLevel[0.8], ImageSize -> {
          Scaled[1], Automatic}, StripOnInput -> False]& )}], 
   Cell[
    StyleData["AttachedMessage"], Deletable -> True, 
    CellMargins -> {{60, 40}, {15, 5}}]}, Visible -> False, FrontEndVersion -> 
  "13.2 for Linux x86 (64-bit) (November 18, 2022)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"2ca9824a-464c-45ff-a64e-2277e2ba4802"
]

